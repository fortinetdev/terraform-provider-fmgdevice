// Copyright 2020 Fortinet, Inc. All rights reserved.
// Author: Hongbin Lu (@fgtdev-hblu), Frank Shen (@frankshen01)
// Documentation:
// Hongbin Lu (@fgtdev-hblu), Frank Shen (@frankshen01),
// Xing Li (@lix-fortinet), Yue Wang (@yuew-ftnt)

// Description: Description: SDK for FortiManager Provider

package forticlient

import (
	"fmt"
)

// UpdateAlertemailSetting API operation for FortiManager Device updates the specified Setting.
// Returns the index value of the Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - alertemail setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateAlertemailSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/alertemail/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteAlertemailSetting API operation for FortiManager Device deletes the specified Setting.
// Returns error for service API and SDK errors.
// See the device - alertemail setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteAlertemailSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for alertemail - setting
	return
}

// ReadAlertemailSetting API operation for FortiManager Device gets the Setting
// with the specified index value.
// Returns the requested Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - alertemail setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadAlertemailSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/alertemail/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateAntivirusExemptList API operation for FortiManager Device creates a new Exempt List.
// Returns the index value of the Exempt List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - antivirus exempt-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateAntivirusExemptList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/antivirus/exempt-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateAntivirusExemptList API operation for FortiManager Device updates the specified Exempt List.
// Returns the index value of the Exempt List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - antivirus exempt-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateAntivirusExemptList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/antivirus/exempt-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteAntivirusExemptList API operation for FortiManager Device deletes the specified Exempt List.
// Returns error for service API and SDK errors.
// See the device - antivirus exempt-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteAntivirusExemptList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/antivirus/exempt-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadAntivirusExemptList API operation for FortiManager Device gets the Exempt List
// with the specified index value.
// Returns the requested Exempt List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - antivirus exempt-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadAntivirusExemptList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/antivirus/exempt-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateAntivirusQuarantine API operation for FortiManager Device updates the specified Quarantine.
// Returns the index value of the Quarantine and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - antivirus quarantine chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateAntivirusQuarantine(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/antivirus/quarantine"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteAntivirusQuarantine API operation for FortiManager Device deletes the specified Quarantine.
// Returns error for service API and SDK errors.
// See the device - antivirus quarantine chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteAntivirusQuarantine(mkey string, paradict map[string]string) (err error) {

	//No unset API for antivirus - quarantine
	return
}

// ReadAntivirusQuarantine API operation for FortiManager Device gets the Quarantine
// with the specified index value.
// Returns the requested Quarantine value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - antivirus quarantine chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadAntivirusQuarantine(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/antivirus/quarantine"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateAntivirusSettings API operation for FortiManager Device updates the specified Settings.
// Returns the index value of the Settings and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - antivirus settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateAntivirusSettings(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/antivirus/settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteAntivirusSettings API operation for FortiManager Device deletes the specified Settings.
// Returns error for service API and SDK errors.
// See the device - antivirus settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteAntivirusSettings(mkey string, paradict map[string]string) (err error) {

	//No unset API for antivirus - settings
	return
}

// ReadAntivirusSettings API operation for FortiManager Device gets the Settings
// with the specified index value.
// Returns the requested Settings value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - antivirus settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadAntivirusSettings(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/antivirus/settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateApplicationName API operation for FortiManager Device updates the specified Name.
// Returns the index value of the Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - application name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateApplicationName(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/application/name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteApplicationName API operation for FortiManager Device deletes the specified Name.
// Returns error for service API and SDK errors.
// See the device - application name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteApplicationName(mkey string, paradict map[string]string) (err error) {

	//No unset API for application - name
	return
}

// ReadApplicationName API operation for FortiManager Device gets the Name
// with the specified index value.
// Returns the requested Name value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - application name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadApplicationName(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/application/name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateApplicationRuleSettings API operation for FortiManager Device updates the specified Rule Settings.
// Returns the index value of the Rule Settings and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - application rule-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateApplicationRuleSettings(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/application/rule-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteApplicationRuleSettings API operation for FortiManager Device deletes the specified Rule Settings.
// Returns error for service API and SDK errors.
// See the device - application rule-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteApplicationRuleSettings(mkey string, paradict map[string]string) (err error) {

	//No unset API for application - rule-settings
	return
}

// ReadApplicationRuleSettings API operation for FortiManager Device gets the Rule Settings
// with the specified index value.
// Returns the requested Rule Settings value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - application rule-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadApplicationRuleSettings(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/application/rule-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateAutomationSetting API operation for FortiManager Device updates the specified Setting.
// Returns the index value of the Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - automation setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateAutomationSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/automation/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteAutomationSetting API operation for FortiManager Device deletes the specified Setting.
// Returns error for service API and SDK errors.
// See the device - automation setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteAutomationSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for automation - setting
	return
}

// ReadAutomationSetting API operation for FortiManager Device gets the Setting
// with the specified index value.
// Returns the requested Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - automation setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadAutomationSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/automation/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateCertificateRemote API operation for FortiManager Device creates a new Remote.
// Returns the index value of the Remote and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - certificate remote chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateCertificateRemote(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/certificate/remote"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateCertificateRemote API operation for FortiManager Device updates the specified Remote.
// Returns the index value of the Remote and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - certificate remote chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateCertificateRemote(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/certificate/remote"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteCertificateRemote API operation for FortiManager Device deletes the specified Remote.
// Returns error for service API and SDK errors.
// See the device - certificate remote chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteCertificateRemote(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/certificate/remote"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadCertificateRemote API operation for FortiManager Device gets the Remote
// with the specified index value.
// Returns the requested Remote value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - certificate remote chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadCertificateRemote(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/certificate/remote"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateDlpExactDataMatch API operation for FortiManager Device creates a new Exact Data Match.
// Returns the index value of the Exact Data Match and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - dlp exact-data-match chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateDlpExactDataMatch(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/dlp/exact-data-match"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateDlpExactDataMatch API operation for FortiManager Device updates the specified Exact Data Match.
// Returns the index value of the Exact Data Match and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - dlp exact-data-match chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateDlpExactDataMatch(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/dlp/exact-data-match"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteDlpExactDataMatch API operation for FortiManager Device deletes the specified Exact Data Match.
// Returns error for service API and SDK errors.
// See the device - dlp exact-data-match chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteDlpExactDataMatch(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/dlp/exact-data-match"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadDlpExactDataMatch API operation for FortiManager Device gets the Exact Data Match
// with the specified index value.
// Returns the requested Exact Data Match value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - dlp exact-data-match chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadDlpExactDataMatch(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/dlp/exact-data-match"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateDlpExactDataMatchColumns API operation for FortiManager Device creates a new Exact Data MatchColumns.
// Returns the index value of the Exact Data MatchColumns and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - dlp exact-data-match columns chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateDlpExactDataMatchColumns(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/dlp/exact-data-match/{exact-data-match}/columns"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateDlpExactDataMatchColumns API operation for FortiManager Device updates the specified Exact Data MatchColumns.
// Returns the index value of the Exact Data MatchColumns and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - dlp exact-data-match columns chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateDlpExactDataMatchColumns(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/dlp/exact-data-match/{exact-data-match}/columns"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteDlpExactDataMatchColumns API operation for FortiManager Device deletes the specified Exact Data MatchColumns.
// Returns error for service API and SDK errors.
// See the device - dlp exact-data-match columns chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteDlpExactDataMatchColumns(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/dlp/exact-data-match/{exact-data-match}/columns"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadDlpExactDataMatchColumns API operation for FortiManager Device gets the Exact Data MatchColumns
// with the specified index value.
// Returns the requested Exact Data MatchColumns value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - dlp exact-data-match columns chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadDlpExactDataMatchColumns(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/dlp/exact-data-match/{exact-data-match}/columns"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateDlpExactDataMatchColumnsMove API operation for FortiManager Device updates the specified Exact Data MatchColumnsMove.
// Returns the index value of the Exact Data MatchColumnsMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - dlp exact-data-match columns move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateDlpExactDataMatchColumnsMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/dlp/exact-data-match/{exact-data-match}/columns/{columns}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadDlpExactDataMatchColumnsMove API operation for FortiManager Device gets the Exact Data MatchColumnsMove
// with the specified index value.
// Returns the requested Exact Data MatchColumnsMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - dlp exact-data-match columns move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadDlpExactDataMatchColumnsMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/dlp/exact-data-match/{exact-data-match}/columns"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"index"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// CreateDlpFpDocSource API operation for FortiManager Device creates a new Fp Doc Source.
// Returns the index value of the Fp Doc Source and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - dlp fp-doc-source chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateDlpFpDocSource(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/dlp/fp-doc-source"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateDlpFpDocSource API operation for FortiManager Device updates the specified Fp Doc Source.
// Returns the index value of the Fp Doc Source and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - dlp fp-doc-source chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateDlpFpDocSource(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/dlp/fp-doc-source"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteDlpFpDocSource API operation for FortiManager Device deletes the specified Fp Doc Source.
// Returns error for service API and SDK errors.
// See the device - dlp fp-doc-source chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteDlpFpDocSource(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/dlp/fp-doc-source"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadDlpFpDocSource API operation for FortiManager Device gets the Fp Doc Source
// with the specified index value.
// Returns the requested Fp Doc Source value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - dlp fp-doc-source chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadDlpFpDocSource(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/dlp/fp-doc-source"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateDlpSettings API operation for FortiManager Device updates the specified Settings.
// Returns the index value of the Settings and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - dlp settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateDlpSettings(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/dlp/settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteDlpSettings API operation for FortiManager Device deletes the specified Settings.
// Returns error for service API and SDK errors.
// See the device - dlp settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteDlpSettings(mkey string, paradict map[string]string) (err error) {

	//No unset API for dlp - settings
	return
}

// ReadDlpSettings API operation for FortiManager Device gets the Settings
// with the specified index value.
// Returns the requested Settings value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - dlp settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadDlpSettings(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/dlp/settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateDpdkCpus API operation for FortiManager Device updates the specified Cpus.
// Returns the index value of the Cpus and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - dpdk cpus chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateDpdkCpus(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/dpdk/cpus"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteDpdkCpus API operation for FortiManager Device deletes the specified Cpus.
// Returns error for service API and SDK errors.
// See the device - dpdk cpus chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteDpdkCpus(mkey string, paradict map[string]string) (err error) {

	//No unset API for dpdk - cpus
	return
}

// ReadDpdkCpus API operation for FortiManager Device gets the Cpus
// with the specified index value.
// Returns the requested Cpus value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - dpdk cpus chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadDpdkCpus(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/dpdk/cpus"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateDpdkGlobal API operation for FortiManager Device updates the specified Global.
// Returns the index value of the Global and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - dpdk global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateDpdkGlobal(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/dpdk/global"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteDpdkGlobal API operation for FortiManager Device deletes the specified Global.
// Returns error for service API and SDK errors.
// See the device - dpdk global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteDpdkGlobal(mkey string, paradict map[string]string) (err error) {

	//No unset API for dpdk - global
	return
}

// ReadDpdkGlobal API operation for FortiManager Device gets the Global
// with the specified index value.
// Returns the requested Global value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - dpdk global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadDpdkGlobal(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/dpdk/global"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateEmailfilterFortiguard API operation for FortiManager Device updates the specified Fortiguard.
// Returns the index value of the Fortiguard and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - emailfilter fortiguard chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateEmailfilterFortiguard(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/emailfilter/fortiguard"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteEmailfilterFortiguard API operation for FortiManager Device deletes the specified Fortiguard.
// Returns error for service API and SDK errors.
// See the device - emailfilter fortiguard chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteEmailfilterFortiguard(mkey string, paradict map[string]string) (err error) {

	//No unset API for emailfilter - fortiguard
	return
}

// ReadEmailfilterFortiguard API operation for FortiManager Device gets the Fortiguard
// with the specified index value.
// Returns the requested Fortiguard value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - emailfilter fortiguard chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadEmailfilterFortiguard(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/emailfilter/fortiguard"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateEndpointControlSettings API operation for FortiManager Device updates the specified Settings.
// Returns the index value of the Settings and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - endpoint-control settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateEndpointControlSettings(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/endpoint-control/settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteEndpointControlSettings API operation for FortiManager Device deletes the specified Settings.
// Returns error for service API and SDK errors.
// See the device - endpoint-control settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteEndpointControlSettings(mkey string, paradict map[string]string) (err error) {

	//No unset API for endpoint-control - settings
	return
}

// ReadEndpointControlSettings API operation for FortiManager Device gets the Settings
// with the specified index value.
// Returns the requested Settings value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - endpoint-control settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadEndpointControlSettings(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/endpoint-control/settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateExtenderControllerExtender API operation for FortiManager Device creates a new Extender.
// Returns the index value of the Extender and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - extender-controller extender chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateExtenderControllerExtender(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extender-controller/extender"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateExtenderControllerExtender API operation for FortiManager Device updates the specified Extender.
// Returns the index value of the Extender and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - extender-controller extender chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateExtenderControllerExtender(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extender-controller/extender"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteExtenderControllerExtender API operation for FortiManager Device deletes the specified Extender.
// Returns error for service API and SDK errors.
// See the device - extender-controller extender chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteExtenderControllerExtender(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extender-controller/extender"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadExtenderControllerExtender API operation for FortiManager Device gets the Extender
// with the specified index value.
// Returns the requested Extender value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - extender-controller extender chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadExtenderControllerExtender(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extender-controller/extender"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateExtenderControllerExtenderWanExtension API operation for FortiManager Device updates the specified ExtenderWan Extension.
// Returns the index value of the ExtenderWan Extension and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - extender-controller extender wan-extension chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateExtenderControllerExtenderWanExtension(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extender-controller/extender/{extender}/wan-extension"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteExtenderControllerExtenderWanExtension API operation for FortiManager Device deletes the specified ExtenderWan Extension.
// Returns error for service API and SDK errors.
// See the device - extender-controller extender wan-extension chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteExtenderControllerExtenderWanExtension(mkey string, paradict map[string]string) (err error) {

	//No unset API for extender-controller - extender wan-extension
	return
}

// ReadExtenderControllerExtenderWanExtension API operation for FortiManager Device gets the ExtenderWan Extension
// with the specified index value.
// Returns the requested ExtenderWan Extension value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - extender-controller extender wan-extension chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadExtenderControllerExtenderWanExtension(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extender-controller/extender/{extender}/wan-extension"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateExtensionControllerExtender API operation for FortiManager Device creates a new Extender.
// Returns the index value of the Extender and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - extension-controller extender chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateExtensionControllerExtender(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extension-controller/extender"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateExtensionControllerExtender API operation for FortiManager Device updates the specified Extender.
// Returns the index value of the Extender and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - extension-controller extender chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateExtensionControllerExtender(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extension-controller/extender"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteExtensionControllerExtender API operation for FortiManager Device deletes the specified Extender.
// Returns error for service API and SDK errors.
// See the device - extension-controller extender chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteExtensionControllerExtender(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extension-controller/extender"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadExtensionControllerExtender API operation for FortiManager Device gets the Extender
// with the specified index value.
// Returns the requested Extender value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - extension-controller extender chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadExtensionControllerExtender(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extension-controller/extender"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateExtensionControllerFortigate API operation for FortiManager Device creates a new Fortigate.
// Returns the index value of the Fortigate and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - extension-controller fortigate chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateExtensionControllerFortigate(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extension-controller/fortigate"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateExtensionControllerFortigate API operation for FortiManager Device updates the specified Fortigate.
// Returns the index value of the Fortigate and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - extension-controller fortigate chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateExtensionControllerFortigate(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extension-controller/fortigate"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteExtensionControllerFortigate API operation for FortiManager Device deletes the specified Fortigate.
// Returns error for service API and SDK errors.
// See the device - extension-controller fortigate chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteExtensionControllerFortigate(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extension-controller/fortigate"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadExtensionControllerFortigate API operation for FortiManager Device gets the Fortigate
// with the specified index value.
// Returns the requested Fortigate value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - extension-controller fortigate chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadExtensionControllerFortigate(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extension-controller/fortigate"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateExtensionControllerFortigateProfile API operation for FortiManager Device creates a new Fortigate Profile.
// Returns the index value of the Fortigate Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - extension-controller fortigate-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateExtensionControllerFortigateProfile(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extension-controller/fortigate-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateExtensionControllerFortigateProfile API operation for FortiManager Device updates the specified Fortigate Profile.
// Returns the index value of the Fortigate Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - extension-controller fortigate-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateExtensionControllerFortigateProfile(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extension-controller/fortigate-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteExtensionControllerFortigateProfile API operation for FortiManager Device deletes the specified Fortigate Profile.
// Returns error for service API and SDK errors.
// See the device - extension-controller fortigate-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteExtensionControllerFortigateProfile(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extension-controller/fortigate-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadExtensionControllerFortigateProfile API operation for FortiManager Device gets the Fortigate Profile
// with the specified index value.
// Returns the requested Fortigate Profile value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - extension-controller fortigate-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadExtensionControllerFortigateProfile(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extension-controller/fortigate-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateExtensionControllerFortigateProfileLanExtension API operation for FortiManager Device updates the specified Fortigate ProfileLan Extension.
// Returns the index value of the Fortigate ProfileLan Extension and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - extension-controller fortigate-profile lan-extension chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateExtensionControllerFortigateProfileLanExtension(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extension-controller/fortigate-profile/{fortigate-profile}/lan-extension"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteExtensionControllerFortigateProfileLanExtension API operation for FortiManager Device deletes the specified Fortigate ProfileLan Extension.
// Returns error for service API and SDK errors.
// See the device - extension-controller fortigate-profile lan-extension chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteExtensionControllerFortigateProfileLanExtension(mkey string, paradict map[string]string) (err error) {

	//No unset API for extension-controller - fortigate-profile lan-extension
	return
}

// ReadExtensionControllerFortigateProfileLanExtension API operation for FortiManager Device gets the Fortigate ProfileLan Extension
// with the specified index value.
// Returns the requested Fortigate ProfileLan Extension value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - extension-controller fortigate-profile lan-extension chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadExtensionControllerFortigateProfileLanExtension(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/extension-controller/fortigate-profile/{fortigate-profile}/lan-extension"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateFirewallAuthPortal API operation for FortiManager Device updates the specified Auth Portal.
// Returns the index value of the Auth Portal and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall auth-portal chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallAuthPortal(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/auth-portal"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallAuthPortal API operation for FortiManager Device deletes the specified Auth Portal.
// Returns error for service API and SDK errors.
// See the device - firewall auth-portal chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallAuthPortal(mkey string, paradict map[string]string) (err error) {

	//No unset API for firewall - auth-portal
	return
}

// ReadFirewallAuthPortal API operation for FortiManager Device gets the Auth Portal
// with the specified index value.
// Returns the requested Auth Portal value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall auth-portal chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallAuthPortal(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/auth-portal"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateFirewallDnstranslation API operation for FortiManager Device creates a new Dnstranslation.
// Returns the index value of the Dnstranslation and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall dnstranslation chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateFirewallDnstranslation(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/dnstranslation"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateFirewallDnstranslation API operation for FortiManager Device updates the specified Dnstranslation.
// Returns the index value of the Dnstranslation and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall dnstranslation chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallDnstranslation(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/dnstranslation"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallDnstranslation API operation for FortiManager Device deletes the specified Dnstranslation.
// Returns error for service API and SDK errors.
// See the device - firewall dnstranslation chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallDnstranslation(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/dnstranslation"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadFirewallDnstranslation API operation for FortiManager Device gets the Dnstranslation
// with the specified index value.
// Returns the requested Dnstranslation value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall dnstranslation chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallDnstranslation(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/dnstranslation"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateFirewallGlobal API operation for FortiManager Device updates the specified Global.
// Returns the index value of the Global and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallGlobal(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/firewall/global"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallGlobal API operation for FortiManager Device deletes the specified Global.
// Returns error for service API and SDK errors.
// See the device - firewall global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallGlobal(mkey string, paradict map[string]string) (err error) {

	//No unset API for firewall - global
	return
}

// ReadFirewallGlobal API operation for FortiManager Device gets the Global
// with the specified index value.
// Returns the requested Global value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallGlobal(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/firewall/global"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateFirewallInternetServiceAppend API operation for FortiManager Device updates the specified Internet Service Append.
// Returns the index value of the Internet Service Append and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-append chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallInternetServiceAppend(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/firewall/internet-service-append"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallInternetServiceAppend API operation for FortiManager Device deletes the specified Internet Service Append.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-append chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallInternetServiceAppend(mkey string, paradict map[string]string) (err error) {

	//No unset API for firewall - internet-service-append
	return
}

// ReadFirewallInternetServiceAppend API operation for FortiManager Device gets the Internet Service Append
// with the specified index value.
// Returns the requested Internet Service Append value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-append chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallInternetServiceAppend(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/firewall/internet-service-append"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateFirewallInternetServiceDefinition API operation for FortiManager Device creates a new Internet Service Definition.
// Returns the index value of the Internet Service Definition and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-definition chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateFirewallInternetServiceDefinition(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/firewall/internet-service-definition"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateFirewallInternetServiceDefinition API operation for FortiManager Device updates the specified Internet Service Definition.
// Returns the index value of the Internet Service Definition and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-definition chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallInternetServiceDefinition(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/firewall/internet-service-definition"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallInternetServiceDefinition API operation for FortiManager Device deletes the specified Internet Service Definition.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-definition chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallInternetServiceDefinition(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/firewall/internet-service-definition"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadFirewallInternetServiceDefinition API operation for FortiManager Device gets the Internet Service Definition
// with the specified index value.
// Returns the requested Internet Service Definition value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-definition chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallInternetServiceDefinition(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/firewall/internet-service-definition"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateFirewallInternetServiceDefinitionEntry API operation for FortiManager Device creates a new Internet Service DefinitionEntry.
// Returns the index value of the Internet Service DefinitionEntry and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-definition entry chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateFirewallInternetServiceDefinitionEntry(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/firewall/internet-service-definition/{internet-service-definition}/entry"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateFirewallInternetServiceDefinitionEntry API operation for FortiManager Device updates the specified Internet Service DefinitionEntry.
// Returns the index value of the Internet Service DefinitionEntry and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-definition entry chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallInternetServiceDefinitionEntry(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/firewall/internet-service-definition/{internet-service-definition}/entry"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallInternetServiceDefinitionEntry API operation for FortiManager Device deletes the specified Internet Service DefinitionEntry.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-definition entry chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallInternetServiceDefinitionEntry(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/firewall/internet-service-definition/{internet-service-definition}/entry"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadFirewallInternetServiceDefinitionEntry API operation for FortiManager Device gets the Internet Service DefinitionEntry
// with the specified index value.
// Returns the requested Internet Service DefinitionEntry value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-definition entry chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallInternetServiceDefinitionEntry(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/firewall/internet-service-definition/{internet-service-definition}/entry"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateFirewallInternetServiceDefinitionEntryPortRange API operation for FortiManager Device creates a new Internet Service DefinitionEntryPort Range.
// Returns the index value of the Internet Service DefinitionEntryPort Range and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-definition entry port-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateFirewallInternetServiceDefinitionEntryPortRange(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/firewall/internet-service-definition/{internet-service-definition}/entry/{entry}/port-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateFirewallInternetServiceDefinitionEntryPortRange API operation for FortiManager Device updates the specified Internet Service DefinitionEntryPort Range.
// Returns the index value of the Internet Service DefinitionEntryPort Range and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-definition entry port-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallInternetServiceDefinitionEntryPortRange(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/firewall/internet-service-definition/{internet-service-definition}/entry/{entry}/port-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallInternetServiceDefinitionEntryPortRange API operation for FortiManager Device deletes the specified Internet Service DefinitionEntryPort Range.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-definition entry port-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallInternetServiceDefinitionEntryPortRange(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/firewall/internet-service-definition/{internet-service-definition}/entry/{entry}/port-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadFirewallInternetServiceDefinitionEntryPortRange API operation for FortiManager Device gets the Internet Service DefinitionEntryPort Range
// with the specified index value.
// Returns the requested Internet Service DefinitionEntryPort Range value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-definition entry port-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallInternetServiceDefinitionEntryPortRange(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/firewall/internet-service-definition/{internet-service-definition}/entry/{entry}/port-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateFirewallInternetServiceExtension API operation for FortiManager Device creates a new Internet Service Extension.
// Returns the index value of the Internet Service Extension and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-extension chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateFirewallInternetServiceExtension(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/internet-service-extension"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateFirewallInternetServiceExtension API operation for FortiManager Device updates the specified Internet Service Extension.
// Returns the index value of the Internet Service Extension and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-extension chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallInternetServiceExtension(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/internet-service-extension"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallInternetServiceExtension API operation for FortiManager Device deletes the specified Internet Service Extension.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-extension chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallInternetServiceExtension(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/internet-service-extension"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadFirewallInternetServiceExtension API operation for FortiManager Device gets the Internet Service Extension
// with the specified index value.
// Returns the requested Internet Service Extension value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-extension chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallInternetServiceExtension(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/internet-service-extension"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateFirewallInternetServiceExtensionEntry API operation for FortiManager Device creates a new Internet Service ExtensionEntry.
// Returns the index value of the Internet Service ExtensionEntry and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-extension entry chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateFirewallInternetServiceExtensionEntry(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/internet-service-extension/{internet-service-extension}/entry"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateFirewallInternetServiceExtensionEntry API operation for FortiManager Device updates the specified Internet Service ExtensionEntry.
// Returns the index value of the Internet Service ExtensionEntry and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-extension entry chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallInternetServiceExtensionEntry(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/internet-service-extension/{internet-service-extension}/entry"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallInternetServiceExtensionEntry API operation for FortiManager Device deletes the specified Internet Service ExtensionEntry.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-extension entry chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallInternetServiceExtensionEntry(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/internet-service-extension/{internet-service-extension}/entry"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadFirewallInternetServiceExtensionEntry API operation for FortiManager Device gets the Internet Service ExtensionEntry
// with the specified index value.
// Returns the requested Internet Service ExtensionEntry value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-extension entry chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallInternetServiceExtensionEntry(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/internet-service-extension/{internet-service-extension}/entry"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateFirewallInternetServiceExtensionEntryPortRange API operation for FortiManager Device creates a new Internet Service ExtensionEntryPort Range.
// Returns the index value of the Internet Service ExtensionEntryPort Range and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-extension entry port-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateFirewallInternetServiceExtensionEntryPortRange(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/internet-service-extension/{internet-service-extension}/entry/{entry}/port-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateFirewallInternetServiceExtensionEntryPortRange API operation for FortiManager Device updates the specified Internet Service ExtensionEntryPort Range.
// Returns the index value of the Internet Service ExtensionEntryPort Range and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-extension entry port-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallInternetServiceExtensionEntryPortRange(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/internet-service-extension/{internet-service-extension}/entry/{entry}/port-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallInternetServiceExtensionEntryPortRange API operation for FortiManager Device deletes the specified Internet Service ExtensionEntryPort Range.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-extension entry port-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallInternetServiceExtensionEntryPortRange(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/internet-service-extension/{internet-service-extension}/entry/{entry}/port-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadFirewallInternetServiceExtensionEntryPortRange API operation for FortiManager Device gets the Internet Service ExtensionEntryPort Range
// with the specified index value.
// Returns the requested Internet Service ExtensionEntryPort Range value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall internet-service-extension entry port-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallInternetServiceExtensionEntryPortRange(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/internet-service-extension/{internet-service-extension}/entry/{entry}/port-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateFirewallIpTranslation API operation for FortiManager Device creates a new Ip Translation.
// Returns the index value of the Ip Translation and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ip-translation chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateFirewallIpTranslation(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ip-translation"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateFirewallIpTranslation API operation for FortiManager Device updates the specified Ip Translation.
// Returns the index value of the Ip Translation and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ip-translation chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallIpTranslation(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ip-translation"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallIpTranslation API operation for FortiManager Device deletes the specified Ip Translation.
// Returns error for service API and SDK errors.
// See the device - firewall ip-translation chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallIpTranslation(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ip-translation"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadFirewallIpTranslation API operation for FortiManager Device gets the Ip Translation
// with the specified index value.
// Returns the requested Ip Translation value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ip-translation chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallIpTranslation(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ip-translation"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateFirewallIpmacbindingSetting API operation for FortiManager Device updates the specified IpmacbindingSetting.
// Returns the index value of the IpmacbindingSetting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ipmacbinding setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallIpmacbindingSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ipmacbinding/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallIpmacbindingSetting API operation for FortiManager Device deletes the specified IpmacbindingSetting.
// Returns error for service API and SDK errors.
// See the device - firewall ipmacbinding setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallIpmacbindingSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for firewall - ipmacbinding setting
	return
}

// ReadFirewallIpmacbindingSetting API operation for FortiManager Device gets the IpmacbindingSetting
// with the specified index value.
// Returns the requested IpmacbindingSetting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ipmacbinding setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallIpmacbindingSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ipmacbinding/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateFirewallIpmacbindingTable API operation for FortiManager Device creates a new IpmacbindingTable.
// Returns the index value of the IpmacbindingTable and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ipmacbinding table chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateFirewallIpmacbindingTable(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ipmacbinding/table"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateFirewallIpmacbindingTable API operation for FortiManager Device updates the specified IpmacbindingTable.
// Returns the index value of the IpmacbindingTable and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ipmacbinding table chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallIpmacbindingTable(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ipmacbinding/table"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallIpmacbindingTable API operation for FortiManager Device deletes the specified IpmacbindingTable.
// Returns error for service API and SDK errors.
// See the device - firewall ipmacbinding table chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallIpmacbindingTable(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ipmacbinding/table"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadFirewallIpmacbindingTable API operation for FortiManager Device gets the IpmacbindingTable
// with the specified index value.
// Returns the requested IpmacbindingTable value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ipmacbinding table chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallIpmacbindingTable(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ipmacbinding/table"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateFirewallIpv6EhFilter API operation for FortiManager Device updates the specified Ipv6 Eh Filter.
// Returns the index value of the Ipv6 Eh Filter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ipv6-eh-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallIpv6EhFilter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/firewall/ipv6-eh-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallIpv6EhFilter API operation for FortiManager Device deletes the specified Ipv6 Eh Filter.
// Returns error for service API and SDK errors.
// See the device - firewall ipv6-eh-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallIpv6EhFilter(mkey string, paradict map[string]string) (err error) {

	//No unset API for firewall - ipv6-eh-filter
	return
}

// ReadFirewallIpv6EhFilter API operation for FortiManager Device gets the Ipv6 Eh Filter
// with the specified index value.
// Returns the requested Ipv6 Eh Filter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ipv6-eh-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallIpv6EhFilter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/firewall/ipv6-eh-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateFirewallOnDemandSniffer API operation for FortiManager Device creates a new On Demand Sniffer.
// Returns the index value of the On Demand Sniffer and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall on-demand-sniffer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateFirewallOnDemandSniffer(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/on-demand-sniffer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateFirewallOnDemandSniffer API operation for FortiManager Device updates the specified On Demand Sniffer.
// Returns the index value of the On Demand Sniffer and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall on-demand-sniffer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallOnDemandSniffer(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/on-demand-sniffer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallOnDemandSniffer API operation for FortiManager Device deletes the specified On Demand Sniffer.
// Returns error for service API and SDK errors.
// See the device - firewall on-demand-sniffer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallOnDemandSniffer(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/on-demand-sniffer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadFirewallOnDemandSniffer API operation for FortiManager Device gets the On Demand Sniffer
// with the specified index value.
// Returns the requested On Demand Sniffer value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall on-demand-sniffer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallOnDemandSniffer(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/on-demand-sniffer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateFirewallSniffer API operation for FortiManager Device creates a new Sniffer.
// Returns the index value of the Sniffer and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall sniffer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateFirewallSniffer(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/sniffer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateFirewallSniffer API operation for FortiManager Device updates the specified Sniffer.
// Returns the index value of the Sniffer and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall sniffer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallSniffer(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/sniffer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallSniffer API operation for FortiManager Device deletes the specified Sniffer.
// Returns error for service API and SDK errors.
// See the device - firewall sniffer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallSniffer(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/sniffer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadFirewallSniffer API operation for FortiManager Device gets the Sniffer
// with the specified index value.
// Returns the requested Sniffer value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall sniffer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallSniffer(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/sniffer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateFirewallSnifferMove API operation for FortiManager Device updates the specified SnifferMove.
// Returns the index value of the SnifferMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall sniffer move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallSnifferMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/sniffer/{sniffer}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadFirewallSnifferMove API operation for FortiManager Device gets the SnifferMove
// with the specified index value.
// Returns the requested SnifferMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall sniffer move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallSnifferMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/sniffer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"id"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// CreateFirewallSshHostKey API operation for FortiManager Device creates a new SshHost Key.
// Returns the index value of the SshHost Key and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ssh host-key chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateFirewallSshHostKey(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ssh/host-key"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateFirewallSshHostKey API operation for FortiManager Device updates the specified SshHost Key.
// Returns the index value of the SshHost Key and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ssh host-key chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallSshHostKey(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ssh/host-key"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallSshHostKey API operation for FortiManager Device deletes the specified SshHost Key.
// Returns error for service API and SDK errors.
// See the device - firewall ssh host-key chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallSshHostKey(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ssh/host-key"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadFirewallSshHostKey API operation for FortiManager Device gets the SshHost Key
// with the specified index value.
// Returns the requested SshHost Key value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ssh host-key chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallSshHostKey(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ssh/host-key"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateFirewallSshLocalKey API operation for FortiManager Device creates a new SshLocal Key.
// Returns the index value of the SshLocal Key and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ssh local-key chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateFirewallSshLocalKey(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ssh/local-key"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateFirewallSshLocalKey API operation for FortiManager Device updates the specified SshLocal Key.
// Returns the index value of the SshLocal Key and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ssh local-key chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallSshLocalKey(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ssh/local-key"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallSshLocalKey API operation for FortiManager Device deletes the specified SshLocal Key.
// Returns error for service API and SDK errors.
// See the device - firewall ssh local-key chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallSshLocalKey(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ssh/local-key"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadFirewallSshLocalKey API operation for FortiManager Device gets the SshLocal Key
// with the specified index value.
// Returns the requested SshLocal Key value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ssh local-key chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallSshLocalKey(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ssh/local-key"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateFirewallSshSetting API operation for FortiManager Device updates the specified SshSetting.
// Returns the index value of the SshSetting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ssh setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallSshSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ssh/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallSshSetting API operation for FortiManager Device deletes the specified SshSetting.
// Returns error for service API and SDK errors.
// See the device - firewall ssh setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallSshSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for firewall - ssh setting
	return
}

// ReadFirewallSshSetting API operation for FortiManager Device gets the SshSetting
// with the specified index value.
// Returns the requested SshSetting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ssh setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallSshSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ssh/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateFirewallSslServer API operation for FortiManager Device creates a new Ssl Server.
// Returns the index value of the Ssl Server and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ssl-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateFirewallSslServer(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ssl-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateFirewallSslServer API operation for FortiManager Device updates the specified Ssl Server.
// Returns the index value of the Ssl Server and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ssl-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallSslServer(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ssl-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallSslServer API operation for FortiManager Device deletes the specified Ssl Server.
// Returns error for service API and SDK errors.
// See the device - firewall ssl-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallSslServer(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ssl-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadFirewallSslServer API operation for FortiManager Device gets the Ssl Server
// with the specified index value.
// Returns the requested Ssl Server value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ssl-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallSslServer(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ssl-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateFirewallSslSetting API operation for FortiManager Device updates the specified SslSetting.
// Returns the index value of the SslSetting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ssl setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallSslSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/firewall/ssl/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallSslSetting API operation for FortiManager Device deletes the specified SslSetting.
// Returns error for service API and SDK errors.
// See the device - firewall ssl setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallSslSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for firewall - ssl setting
	return
}

// ReadFirewallSslSetting API operation for FortiManager Device gets the SslSetting
// with the specified index value.
// Returns the requested SslSetting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ssl setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallSslSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/firewall/ssl/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateFirewallTtlPolicy API operation for FortiManager Device creates a new Ttl Policy.
// Returns the index value of the Ttl Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ttl-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateFirewallTtlPolicy(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ttl-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateFirewallTtlPolicy API operation for FortiManager Device updates the specified Ttl Policy.
// Returns the index value of the Ttl Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ttl-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallTtlPolicy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ttl-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFirewallTtlPolicy API operation for FortiManager Device deletes the specified Ttl Policy.
// Returns error for service API and SDK errors.
// See the device - firewall ttl-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFirewallTtlPolicy(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ttl-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadFirewallTtlPolicy API operation for FortiManager Device gets the Ttl Policy
// with the specified index value.
// Returns the requested Ttl Policy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ttl-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallTtlPolicy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ttl-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateFirewallTtlPolicyMove API operation for FortiManager Device updates the specified Ttl PolicyMove.
// Returns the index value of the Ttl PolicyMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ttl-policy move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFirewallTtlPolicyMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ttl-policy/{ttl-policy}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadFirewallTtlPolicyMove API operation for FortiManager Device gets the Ttl PolicyMove
// with the specified index value.
// Returns the requested Ttl PolicyMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - firewall ttl-policy move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFirewallTtlPolicyMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/firewall/ttl-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"id"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// UpdateFtpProxyExplicit API operation for FortiManager Device updates the specified Explicit.
// Returns the index value of the Explicit and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - ftp-proxy explicit chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateFtpProxyExplicit(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/ftp-proxy/explicit"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteFtpProxyExplicit API operation for FortiManager Device deletes the specified Explicit.
// Returns error for service API and SDK errors.
// See the device - ftp-proxy explicit chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteFtpProxyExplicit(mkey string, paradict map[string]string) (err error) {

	//No unset API for ftp-proxy - explicit
	return
}

// ReadFtpProxyExplicit API operation for FortiManager Device gets the Explicit
// with the specified index value.
// Returns the requested Explicit value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - ftp-proxy explicit chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadFtpProxyExplicit(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/ftp-proxy/explicit"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateIcapServerGroup API operation for FortiManager Device creates a new Server Group.
// Returns the index value of the Server Group and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - icap server-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateIcapServerGroup(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/icap/server-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateIcapServerGroup API operation for FortiManager Device updates the specified Server Group.
// Returns the index value of the Server Group and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - icap server-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateIcapServerGroup(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/icap/server-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteIcapServerGroup API operation for FortiManager Device deletes the specified Server Group.
// Returns error for service API and SDK errors.
// See the device - icap server-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteIcapServerGroup(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/icap/server-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadIcapServerGroup API operation for FortiManager Device gets the Server Group
// with the specified index value.
// Returns the requested Server Group value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - icap server-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadIcapServerGroup(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/icap/server-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateIpsDecoder API operation for FortiManager Device creates a new Decoder.
// Returns the index value of the Decoder and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - ips decoder chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateIpsDecoder(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/ips/decoder"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateIpsDecoder API operation for FortiManager Device updates the specified Decoder.
// Returns the index value of the Decoder and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - ips decoder chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateIpsDecoder(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/ips/decoder"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteIpsDecoder API operation for FortiManager Device deletes the specified Decoder.
// Returns error for service API and SDK errors.
// See the device - ips decoder chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteIpsDecoder(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/ips/decoder"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadIpsDecoder API operation for FortiManager Device gets the Decoder
// with the specified index value.
// Returns the requested Decoder value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - ips decoder chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadIpsDecoder(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/ips/decoder"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateIpsDecoderParameter API operation for FortiManager Device updates the specified DecoderParameter.
// Returns the index value of the DecoderParameter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - ips decoder parameter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateIpsDecoderParameter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/ips/decoder/{decoder}/parameter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteIpsDecoderParameter API operation for FortiManager Device deletes the specified DecoderParameter.
// Returns error for service API and SDK errors.
// See the device - ips decoder parameter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteIpsDecoderParameter(mkey string, paradict map[string]string) (err error) {

	//No unset API for ips - decoder parameter
	return
}

// ReadIpsDecoderParameter API operation for FortiManager Device gets the DecoderParameter
// with the specified index value.
// Returns the requested DecoderParameter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - ips decoder parameter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadIpsDecoderParameter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/ips/decoder/{decoder}/parameter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateIpsGlobal API operation for FortiManager Device updates the specified Global.
// Returns the index value of the Global and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - ips global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateIpsGlobal(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/ips/global"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteIpsGlobal API operation for FortiManager Device deletes the specified Global.
// Returns error for service API and SDK errors.
// See the device - ips global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteIpsGlobal(mkey string, paradict map[string]string) (err error) {

	//No unset API for ips - global
	return
}

// ReadIpsGlobal API operation for FortiManager Device gets the Global
// with the specified index value.
// Returns the requested Global value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - ips global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadIpsGlobal(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/ips/global"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateIpsGlobalTlsActiveProbe API operation for FortiManager Device updates the specified GlobalTls Active Probe.
// Returns the index value of the GlobalTls Active Probe and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - ips global tls-active-probe chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateIpsGlobalTlsActiveProbe(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/ips/global/tls-active-probe"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteIpsGlobalTlsActiveProbe API operation for FortiManager Device deletes the specified GlobalTls Active Probe.
// Returns error for service API and SDK errors.
// See the device - ips global tls-active-probe chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteIpsGlobalTlsActiveProbe(mkey string, paradict map[string]string) (err error) {

	//No unset API for ips - global tls-active-probe
	return
}

// ReadIpsGlobalTlsActiveProbe API operation for FortiManager Device gets the GlobalTls Active Probe
// with the specified index value.
// Returns the requested GlobalTls Active Probe value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - ips global tls-active-probe chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadIpsGlobalTlsActiveProbe(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/ips/global/tls-active-probe"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateIpsRule API operation for FortiManager Device updates the specified Rule.
// Returns the index value of the Rule and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - ips rule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateIpsRule(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/ips/rule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteIpsRule API operation for FortiManager Device deletes the specified Rule.
// Returns error for service API and SDK errors.
// See the device - ips rule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteIpsRule(mkey string, paradict map[string]string) (err error) {

	//No unset API for ips - rule
	return
}

// ReadIpsRule API operation for FortiManager Device gets the Rule
// with the specified index value.
// Returns the requested Rule value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - ips rule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadIpsRule(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/ips/rule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateIpsRuleSettings API operation for FortiManager Device updates the specified Rule Settings.
// Returns the index value of the Rule Settings and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - ips rule-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateIpsRuleSettings(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/ips/rule-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteIpsRuleSettings API operation for FortiManager Device deletes the specified Rule Settings.
// Returns error for service API and SDK errors.
// See the device - ips rule-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteIpsRuleSettings(mkey string, paradict map[string]string) (err error) {

	//No unset API for ips - rule-settings
	return
}

// ReadIpsRuleSettings API operation for FortiManager Device gets the Rule Settings
// with the specified index value.
// Returns the requested Rule Settings value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - ips rule-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadIpsRuleSettings(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/ips/rule-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateIpsSettings API operation for FortiManager Device updates the specified Settings.
// Returns the index value of the Settings and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - ips settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateIpsSettings(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/ips/settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteIpsSettings API operation for FortiManager Device deletes the specified Settings.
// Returns error for service API and SDK errors.
// See the device - ips settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteIpsSettings(mkey string, paradict map[string]string) (err error) {

	//No unset API for ips - settings
	return
}

// ReadIpsSettings API operation for FortiManager Device gets the Settings
// with the specified index value.
// Returns the requested Settings value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - ips settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadIpsSettings(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/ips/settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLoadBalanceSettingWorkers API operation for FortiManager Device creates a new SettingWorkers.
// Returns the index value of the SettingWorkers and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - load-balance setting workers chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLoadBalanceSettingWorkers(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/load-balance/setting/workers"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLoadBalanceSettingWorkers API operation for FortiManager Device updates the specified SettingWorkers.
// Returns the index value of the SettingWorkers and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - load-balance setting workers chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLoadBalanceSettingWorkers(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/load-balance/setting/workers"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLoadBalanceSettingWorkers API operation for FortiManager Device deletes the specified SettingWorkers.
// Returns error for service API and SDK errors.
// See the device - load-balance setting workers chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLoadBalanceSettingWorkers(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/load-balance/setting/workers"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLoadBalanceSettingWorkers API operation for FortiManager Device gets the SettingWorkers
// with the specified index value.
// Returns the requested SettingWorkers value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - load-balance setting workers chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLoadBalanceSettingWorkers(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/load-balance/setting/workers"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogAzureSecurityCenter2FilterFreeStyle API operation for FortiManager Device creates a new Azure Security Center2FilterFree Style.
// Returns the index value of the Azure Security Center2FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log azure-security-center2 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogAzureSecurityCenter2FilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/azure-security-center2/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogAzureSecurityCenter2FilterFreeStyle API operation for FortiManager Device updates the specified Azure Security Center2FilterFree Style.
// Returns the index value of the Azure Security Center2FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log azure-security-center2 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogAzureSecurityCenter2FilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/azure-security-center2/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogAzureSecurityCenter2FilterFreeStyle API operation for FortiManager Device deletes the specified Azure Security Center2FilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log azure-security-center2 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogAzureSecurityCenter2FilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/log/azure-security-center2/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogAzureSecurityCenter2FilterFreeStyle API operation for FortiManager Device gets the Azure Security Center2FilterFree Style
// with the specified index value.
// Returns the requested Azure Security Center2FilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log azure-security-center2 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogAzureSecurityCenter2FilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/azure-security-center2/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogAzureSecurityCenter2SettingCustomFieldName API operation for FortiManager Device creates a new Azure Security Center2SettingCustom Field Name.
// Returns the index value of the Azure Security Center2SettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log azure-security-center2 setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogAzureSecurityCenter2SettingCustomFieldName(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/azure-security-center2/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogAzureSecurityCenter2SettingCustomFieldName API operation for FortiManager Device updates the specified Azure Security Center2SettingCustom Field Name.
// Returns the index value of the Azure Security Center2SettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log azure-security-center2 setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogAzureSecurityCenter2SettingCustomFieldName(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/azure-security-center2/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogAzureSecurityCenter2SettingCustomFieldName API operation for FortiManager Device deletes the specified Azure Security Center2SettingCustom Field Name.
// Returns error for service API and SDK errors.
// See the device - log azure-security-center2 setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogAzureSecurityCenter2SettingCustomFieldName(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/log/azure-security-center2/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogAzureSecurityCenter2SettingCustomFieldName API operation for FortiManager Device gets the Azure Security Center2SettingCustom Field Name
// with the specified index value.
// Returns the requested Azure Security Center2SettingCustom Field Name value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log azure-security-center2 setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogAzureSecurityCenter2SettingCustomFieldName(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/azure-security-center2/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogAzureSecurityCenterFilterFreeStyle API operation for FortiManager Device creates a new Azure Security CenterFilterFree Style.
// Returns the index value of the Azure Security CenterFilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log azure-security-center filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogAzureSecurityCenterFilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/azure-security-center/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogAzureSecurityCenterFilterFreeStyle API operation for FortiManager Device updates the specified Azure Security CenterFilterFree Style.
// Returns the index value of the Azure Security CenterFilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log azure-security-center filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogAzureSecurityCenterFilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/azure-security-center/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogAzureSecurityCenterFilterFreeStyle API operation for FortiManager Device deletes the specified Azure Security CenterFilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log azure-security-center filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogAzureSecurityCenterFilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/log/azure-security-center/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogAzureSecurityCenterFilterFreeStyle API operation for FortiManager Device gets the Azure Security CenterFilterFree Style
// with the specified index value.
// Returns the requested Azure Security CenterFilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log azure-security-center filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogAzureSecurityCenterFilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/azure-security-center/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogAzureSecurityCenterSettingCustomFieldName API operation for FortiManager Device creates a new Azure Security CenterSettingCustom Field Name.
// Returns the index value of the Azure Security CenterSettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log azure-security-center setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogAzureSecurityCenterSettingCustomFieldName(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/azure-security-center/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogAzureSecurityCenterSettingCustomFieldName API operation for FortiManager Device updates the specified Azure Security CenterSettingCustom Field Name.
// Returns the index value of the Azure Security CenterSettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log azure-security-center setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogAzureSecurityCenterSettingCustomFieldName(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/azure-security-center/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogAzureSecurityCenterSettingCustomFieldName API operation for FortiManager Device deletes the specified Azure Security CenterSettingCustom Field Name.
// Returns error for service API and SDK errors.
// See the device - log azure-security-center setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogAzureSecurityCenterSettingCustomFieldName(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/log/azure-security-center/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogAzureSecurityCenterSettingCustomFieldName API operation for FortiManager Device gets the Azure Security CenterSettingCustom Field Name
// with the specified index value.
// Returns the requested Azure Security CenterSettingCustom Field Name value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log azure-security-center setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogAzureSecurityCenterSettingCustomFieldName(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/azure-security-center/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogDiskFilter API operation for FortiManager Device updates the specified DiskFilter.
// Returns the index value of the DiskFilter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log disk filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogDiskFilter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/disk/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogDiskFilter API operation for FortiManager Device deletes the specified DiskFilter.
// Returns error for service API and SDK errors.
// See the device - log disk filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogDiskFilter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - disk filter
	return
}

// ReadLogDiskFilter API operation for FortiManager Device gets the DiskFilter
// with the specified index value.
// Returns the requested DiskFilter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log disk filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogDiskFilter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/disk/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogDiskFilterFreeStyle API operation for FortiManager Device creates a new DiskFilterFree Style.
// Returns the index value of the DiskFilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log disk filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogDiskFilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/disk/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogDiskFilterFreeStyle API operation for FortiManager Device updates the specified DiskFilterFree Style.
// Returns the index value of the DiskFilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log disk filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogDiskFilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/disk/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogDiskFilterFreeStyle API operation for FortiManager Device deletes the specified DiskFilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log disk filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogDiskFilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/disk/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogDiskFilterFreeStyle API operation for FortiManager Device gets the DiskFilterFree Style
// with the specified index value.
// Returns the requested DiskFilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log disk filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogDiskFilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/disk/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogDiskSetting API operation for FortiManager Device updates the specified DiskSetting.
// Returns the index value of the DiskSetting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log disk setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogDiskSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/disk/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogDiskSetting API operation for FortiManager Device deletes the specified DiskSetting.
// Returns error for service API and SDK errors.
// See the device - log disk setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogDiskSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - disk setting
	return
}

// ReadLogDiskSetting API operation for FortiManager Device gets the DiskSetting
// with the specified index value.
// Returns the requested DiskSetting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log disk setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogDiskSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/disk/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogEventfilter API operation for FortiManager Device updates the specified Eventfilter.
// Returns the index value of the Eventfilter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log eventfilter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogEventfilter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/eventfilter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogEventfilter API operation for FortiManager Device deletes the specified Eventfilter.
// Returns error for service API and SDK errors.
// See the device - log eventfilter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogEventfilter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - eventfilter
	return
}

// ReadLogEventfilter API operation for FortiManager Device gets the Eventfilter
// with the specified index value.
// Returns the requested Eventfilter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log eventfilter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogEventfilter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/eventfilter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogFortianalyzerCloudFilterFreeStyle API operation for FortiManager Device creates a new Fortianalyzer CloudFilterFree Style.
// Returns the index value of the Fortianalyzer CloudFilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer-cloud filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogFortianalyzerCloudFilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer-cloud/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogFortianalyzerCloudFilterFreeStyle API operation for FortiManager Device updates the specified Fortianalyzer CloudFilterFree Style.
// Returns the index value of the Fortianalyzer CloudFilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer-cloud filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortianalyzerCloudFilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer-cloud/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortianalyzerCloudFilterFreeStyle API operation for FortiManager Device deletes the specified Fortianalyzer CloudFilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer-cloud filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortianalyzerCloudFilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer-cloud/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogFortianalyzerCloudFilterFreeStyle API operation for FortiManager Device gets the Fortianalyzer CloudFilterFree Style
// with the specified index value.
// Returns the requested Fortianalyzer CloudFilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer-cloud filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortianalyzerCloudFilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer-cloud/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogFortianalyzerCloudOverrideFilter API operation for FortiManager Device updates the specified Fortianalyzer CloudOverride Filter.
// Returns the index value of the Fortianalyzer CloudOverride Filter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer-cloud override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortianalyzerCloudOverrideFilter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer-cloud/override-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortianalyzerCloudOverrideFilter API operation for FortiManager Device deletes the specified Fortianalyzer CloudOverride Filter.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer-cloud override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortianalyzerCloudOverrideFilter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - fortianalyzer-cloud override-filter
	return
}

// ReadLogFortianalyzerCloudOverrideFilter API operation for FortiManager Device gets the Fortianalyzer CloudOverride Filter
// with the specified index value.
// Returns the requested Fortianalyzer CloudOverride Filter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer-cloud override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortianalyzerCloudOverrideFilter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer-cloud/override-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogFortianalyzerCloudOverrideFilterFreeStyle API operation for FortiManager Device creates a new Fortianalyzer CloudOverride FilterFree Style.
// Returns the index value of the Fortianalyzer CloudOverride FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer-cloud override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogFortianalyzerCloudOverrideFilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer-cloud/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogFortianalyzerCloudOverrideFilterFreeStyle API operation for FortiManager Device updates the specified Fortianalyzer CloudOverride FilterFree Style.
// Returns the index value of the Fortianalyzer CloudOverride FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer-cloud override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortianalyzerCloudOverrideFilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer-cloud/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortianalyzerCloudOverrideFilterFreeStyle API operation for FortiManager Device deletes the specified Fortianalyzer CloudOverride FilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer-cloud override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortianalyzerCloudOverrideFilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer-cloud/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogFortianalyzerCloudOverrideFilterFreeStyle API operation for FortiManager Device gets the Fortianalyzer CloudOverride FilterFree Style
// with the specified index value.
// Returns the requested Fortianalyzer CloudOverride FilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer-cloud override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortianalyzerCloudOverrideFilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer-cloud/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogFortianalyzerCloudOverrideSetting API operation for FortiManager Device updates the specified Fortianalyzer CloudOverride Setting.
// Returns the index value of the Fortianalyzer CloudOverride Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer-cloud override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortianalyzerCloudOverrideSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer-cloud/override-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortianalyzerCloudOverrideSetting API operation for FortiManager Device deletes the specified Fortianalyzer CloudOverride Setting.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer-cloud override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortianalyzerCloudOverrideSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - fortianalyzer-cloud override-setting
	return
}

// ReadLogFortianalyzerCloudOverrideSetting API operation for FortiManager Device gets the Fortianalyzer CloudOverride Setting
// with the specified index value.
// Returns the requested Fortianalyzer CloudOverride Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer-cloud override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortianalyzerCloudOverrideSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer-cloud/override-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogFortianalyzerCloudSetting API operation for FortiManager Device updates the specified Fortianalyzer CloudSetting.
// Returns the index value of the Fortianalyzer CloudSetting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer-cloud setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortianalyzerCloudSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer-cloud/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortianalyzerCloudSetting API operation for FortiManager Device deletes the specified Fortianalyzer CloudSetting.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer-cloud setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortianalyzerCloudSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - fortianalyzer-cloud setting
	return
}

// ReadLogFortianalyzerCloudSetting API operation for FortiManager Device gets the Fortianalyzer CloudSetting
// with the specified index value.
// Returns the requested Fortianalyzer CloudSetting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer-cloud setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortianalyzerCloudSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer-cloud/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogFortianalyzer2FilterFreeStyle API operation for FortiManager Device creates a new Fortianalyzer2FilterFree Style.
// Returns the index value of the Fortianalyzer2FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer2 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogFortianalyzer2FilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer2/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogFortianalyzer2FilterFreeStyle API operation for FortiManager Device updates the specified Fortianalyzer2FilterFree Style.
// Returns the index value of the Fortianalyzer2FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer2 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortianalyzer2FilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer2/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortianalyzer2FilterFreeStyle API operation for FortiManager Device deletes the specified Fortianalyzer2FilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer2 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortianalyzer2FilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer2/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogFortianalyzer2FilterFreeStyle API operation for FortiManager Device gets the Fortianalyzer2FilterFree Style
// with the specified index value.
// Returns the requested Fortianalyzer2FilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer2 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortianalyzer2FilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer2/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogFortianalyzer2OverrideFilter API operation for FortiManager Device updates the specified Fortianalyzer2Override Filter.
// Returns the index value of the Fortianalyzer2Override Filter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer2 override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortianalyzer2OverrideFilter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer2/override-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortianalyzer2OverrideFilter API operation for FortiManager Device deletes the specified Fortianalyzer2Override Filter.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer2 override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortianalyzer2OverrideFilter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - fortianalyzer2 override-filter
	return
}

// ReadLogFortianalyzer2OverrideFilter API operation for FortiManager Device gets the Fortianalyzer2Override Filter
// with the specified index value.
// Returns the requested Fortianalyzer2Override Filter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer2 override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortianalyzer2OverrideFilter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer2/override-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogFortianalyzer2OverrideFilterFreeStyle API operation for FortiManager Device creates a new Fortianalyzer2Override FilterFree Style.
// Returns the index value of the Fortianalyzer2Override FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer2 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogFortianalyzer2OverrideFilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer2/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogFortianalyzer2OverrideFilterFreeStyle API operation for FortiManager Device updates the specified Fortianalyzer2Override FilterFree Style.
// Returns the index value of the Fortianalyzer2Override FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer2 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortianalyzer2OverrideFilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer2/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortianalyzer2OverrideFilterFreeStyle API operation for FortiManager Device deletes the specified Fortianalyzer2Override FilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer2 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortianalyzer2OverrideFilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer2/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogFortianalyzer2OverrideFilterFreeStyle API operation for FortiManager Device gets the Fortianalyzer2Override FilterFree Style
// with the specified index value.
// Returns the requested Fortianalyzer2Override FilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer2 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortianalyzer2OverrideFilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer2/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogFortianalyzer2OverrideSetting API operation for FortiManager Device updates the specified Fortianalyzer2Override Setting.
// Returns the index value of the Fortianalyzer2Override Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer2 override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortianalyzer2OverrideSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer2/override-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortianalyzer2OverrideSetting API operation for FortiManager Device deletes the specified Fortianalyzer2Override Setting.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer2 override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortianalyzer2OverrideSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - fortianalyzer2 override-setting
	return
}

// ReadLogFortianalyzer2OverrideSetting API operation for FortiManager Device gets the Fortianalyzer2Override Setting
// with the specified index value.
// Returns the requested Fortianalyzer2Override Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer2 override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortianalyzer2OverrideSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer2/override-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogFortianalyzer2Setting API operation for FortiManager Device updates the specified Fortianalyzer2Setting.
// Returns the index value of the Fortianalyzer2Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer2 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortianalyzer2Setting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer2/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortianalyzer2Setting API operation for FortiManager Device deletes the specified Fortianalyzer2Setting.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer2 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortianalyzer2Setting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - fortianalyzer2 setting
	return
}

// ReadLogFortianalyzer2Setting API operation for FortiManager Device gets the Fortianalyzer2Setting
// with the specified index value.
// Returns the requested Fortianalyzer2Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer2 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortianalyzer2Setting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer2/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogFortianalyzer3FilterFreeStyle API operation for FortiManager Device creates a new Fortianalyzer3FilterFree Style.
// Returns the index value of the Fortianalyzer3FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer3 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogFortianalyzer3FilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer3/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogFortianalyzer3FilterFreeStyle API operation for FortiManager Device updates the specified Fortianalyzer3FilterFree Style.
// Returns the index value of the Fortianalyzer3FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer3 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortianalyzer3FilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer3/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortianalyzer3FilterFreeStyle API operation for FortiManager Device deletes the specified Fortianalyzer3FilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer3 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortianalyzer3FilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer3/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogFortianalyzer3FilterFreeStyle API operation for FortiManager Device gets the Fortianalyzer3FilterFree Style
// with the specified index value.
// Returns the requested Fortianalyzer3FilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer3 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortianalyzer3FilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer3/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogFortianalyzer3OverrideFilter API operation for FortiManager Device updates the specified Fortianalyzer3Override Filter.
// Returns the index value of the Fortianalyzer3Override Filter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer3 override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortianalyzer3OverrideFilter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer3/override-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortianalyzer3OverrideFilter API operation for FortiManager Device deletes the specified Fortianalyzer3Override Filter.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer3 override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortianalyzer3OverrideFilter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - fortianalyzer3 override-filter
	return
}

// ReadLogFortianalyzer3OverrideFilter API operation for FortiManager Device gets the Fortianalyzer3Override Filter
// with the specified index value.
// Returns the requested Fortianalyzer3Override Filter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer3 override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortianalyzer3OverrideFilter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer3/override-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogFortianalyzer3OverrideFilterFreeStyle API operation for FortiManager Device creates a new Fortianalyzer3Override FilterFree Style.
// Returns the index value of the Fortianalyzer3Override FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer3 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogFortianalyzer3OverrideFilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer3/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogFortianalyzer3OverrideFilterFreeStyle API operation for FortiManager Device updates the specified Fortianalyzer3Override FilterFree Style.
// Returns the index value of the Fortianalyzer3Override FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer3 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortianalyzer3OverrideFilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer3/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortianalyzer3OverrideFilterFreeStyle API operation for FortiManager Device deletes the specified Fortianalyzer3Override FilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer3 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortianalyzer3OverrideFilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer3/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogFortianalyzer3OverrideFilterFreeStyle API operation for FortiManager Device gets the Fortianalyzer3Override FilterFree Style
// with the specified index value.
// Returns the requested Fortianalyzer3Override FilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer3 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortianalyzer3OverrideFilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer3/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogFortianalyzer3OverrideSetting API operation for FortiManager Device updates the specified Fortianalyzer3Override Setting.
// Returns the index value of the Fortianalyzer3Override Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer3 override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortianalyzer3OverrideSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer3/override-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortianalyzer3OverrideSetting API operation for FortiManager Device deletes the specified Fortianalyzer3Override Setting.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer3 override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortianalyzer3OverrideSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - fortianalyzer3 override-setting
	return
}

// ReadLogFortianalyzer3OverrideSetting API operation for FortiManager Device gets the Fortianalyzer3Override Setting
// with the specified index value.
// Returns the requested Fortianalyzer3Override Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer3 override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortianalyzer3OverrideSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer3/override-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogFortianalyzer3Setting API operation for FortiManager Device updates the specified Fortianalyzer3Setting.
// Returns the index value of the Fortianalyzer3Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer3 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortianalyzer3Setting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer3/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortianalyzer3Setting API operation for FortiManager Device deletes the specified Fortianalyzer3Setting.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer3 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortianalyzer3Setting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - fortianalyzer3 setting
	return
}

// ReadLogFortianalyzer3Setting API operation for FortiManager Device gets the Fortianalyzer3Setting
// with the specified index value.
// Returns the requested Fortianalyzer3Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer3 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortianalyzer3Setting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer3/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogFortianalyzerFilterFreeStyle API operation for FortiManager Device creates a new FortianalyzerFilterFree Style.
// Returns the index value of the FortianalyzerFilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogFortianalyzerFilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogFortianalyzerFilterFreeStyle API operation for FortiManager Device updates the specified FortianalyzerFilterFree Style.
// Returns the index value of the FortianalyzerFilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortianalyzerFilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortianalyzerFilterFreeStyle API operation for FortiManager Device deletes the specified FortianalyzerFilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortianalyzerFilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogFortianalyzerFilterFreeStyle API operation for FortiManager Device gets the FortianalyzerFilterFree Style
// with the specified index value.
// Returns the requested FortianalyzerFilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortianalyzerFilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogFortianalyzerOverrideFilterFreeStyle API operation for FortiManager Device creates a new FortianalyzerOverride FilterFree Style.
// Returns the index value of the FortianalyzerOverride FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogFortianalyzerOverrideFilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogFortianalyzerOverrideFilterFreeStyle API operation for FortiManager Device updates the specified FortianalyzerOverride FilterFree Style.
// Returns the index value of the FortianalyzerOverride FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortianalyzerOverrideFilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortianalyzerOverrideFilterFreeStyle API operation for FortiManager Device deletes the specified FortianalyzerOverride FilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortianalyzerOverrideFilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogFortianalyzerOverrideFilterFreeStyle API operation for FortiManager Device gets the FortianalyzerOverride FilterFree Style
// with the specified index value.
// Returns the requested FortianalyzerOverride FilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortianalyzerOverrideFilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortianalyzer/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogFortianalyzerSetting API operation for FortiManager Device updates the specified FortianalyzerSetting.
// Returns the index value of the FortianalyzerSetting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortianalyzerSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortianalyzerSetting API operation for FortiManager Device deletes the specified FortianalyzerSetting.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortianalyzerSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - fortianalyzer setting
	return
}

// ReadLogFortianalyzerSetting API operation for FortiManager Device gets the FortianalyzerSetting
// with the specified index value.
// Returns the requested FortianalyzerSetting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortianalyzer setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortianalyzerSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortianalyzer/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogFortiguardFilter API operation for FortiManager Device updates the specified FortiguardFilter.
// Returns the index value of the FortiguardFilter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortiguard filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortiguardFilter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortiguard/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortiguardFilter API operation for FortiManager Device deletes the specified FortiguardFilter.
// Returns error for service API and SDK errors.
// See the device - log fortiguard filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortiguardFilter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - fortiguard filter
	return
}

// ReadLogFortiguardFilter API operation for FortiManager Device gets the FortiguardFilter
// with the specified index value.
// Returns the requested FortiguardFilter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortiguard filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortiguardFilter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortiguard/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogFortiguardFilterFreeStyle API operation for FortiManager Device creates a new FortiguardFilterFree Style.
// Returns the index value of the FortiguardFilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortiguard filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogFortiguardFilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortiguard/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogFortiguardFilterFreeStyle API operation for FortiManager Device updates the specified FortiguardFilterFree Style.
// Returns the index value of the FortiguardFilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortiguard filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortiguardFilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortiguard/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortiguardFilterFreeStyle API operation for FortiManager Device deletes the specified FortiguardFilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log fortiguard filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortiguardFilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/log/fortiguard/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogFortiguardFilterFreeStyle API operation for FortiManager Device gets the FortiguardFilterFree Style
// with the specified index value.
// Returns the requested FortiguardFilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortiguard filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortiguardFilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortiguard/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogFortiguardOverrideFilter API operation for FortiManager Device updates the specified FortiguardOverride Filter.
// Returns the index value of the FortiguardOverride Filter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortiguard override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortiguardOverrideFilter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortiguard/override-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortiguardOverrideFilter API operation for FortiManager Device deletes the specified FortiguardOverride Filter.
// Returns error for service API and SDK errors.
// See the device - log fortiguard override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortiguardOverrideFilter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - fortiguard override-filter
	return
}

// ReadLogFortiguardOverrideFilter API operation for FortiManager Device gets the FortiguardOverride Filter
// with the specified index value.
// Returns the requested FortiguardOverride Filter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortiguard override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortiguardOverrideFilter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortiguard/override-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogFortiguardOverrideFilterFreeStyle API operation for FortiManager Device creates a new FortiguardOverride FilterFree Style.
// Returns the index value of the FortiguardOverride FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortiguard override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogFortiguardOverrideFilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortiguard/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogFortiguardOverrideFilterFreeStyle API operation for FortiManager Device updates the specified FortiguardOverride FilterFree Style.
// Returns the index value of the FortiguardOverride FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortiguard override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortiguardOverrideFilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortiguard/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortiguardOverrideFilterFreeStyle API operation for FortiManager Device deletes the specified FortiguardOverride FilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log fortiguard override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortiguardOverrideFilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortiguard/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogFortiguardOverrideFilterFreeStyle API operation for FortiManager Device gets the FortiguardOverride FilterFree Style
// with the specified index value.
// Returns the requested FortiguardOverride FilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortiguard override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortiguardOverrideFilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortiguard/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogFortiguardOverrideSetting API operation for FortiManager Device updates the specified FortiguardOverride Setting.
// Returns the index value of the FortiguardOverride Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortiguard override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortiguardOverrideSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortiguard/override-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortiguardOverrideSetting API operation for FortiManager Device deletes the specified FortiguardOverride Setting.
// Returns error for service API and SDK errors.
// See the device - log fortiguard override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortiguardOverrideSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - fortiguard override-setting
	return
}

// ReadLogFortiguardOverrideSetting API operation for FortiManager Device gets the FortiguardOverride Setting
// with the specified index value.
// Returns the requested FortiguardOverride Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortiguard override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortiguardOverrideSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/fortiguard/override-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogFortiguardSetting API operation for FortiManager Device updates the specified FortiguardSetting.
// Returns the index value of the FortiguardSetting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortiguard setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogFortiguardSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortiguard/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogFortiguardSetting API operation for FortiManager Device deletes the specified FortiguardSetting.
// Returns error for service API and SDK errors.
// See the device - log fortiguard setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogFortiguardSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - fortiguard setting
	return
}

// ReadLogFortiguardSetting API operation for FortiManager Device gets the FortiguardSetting
// with the specified index value.
// Returns the requested FortiguardSetting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log fortiguard setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogFortiguardSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/fortiguard/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogGuiDisplay API operation for FortiManager Device updates the specified Gui Display.
// Returns the index value of the Gui Display and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log gui-display chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogGuiDisplay(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/gui-display"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogGuiDisplay API operation for FortiManager Device deletes the specified Gui Display.
// Returns error for service API and SDK errors.
// See the device - log gui-display chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogGuiDisplay(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - gui-display
	return
}

// ReadLogGuiDisplay API operation for FortiManager Device gets the Gui Display
// with the specified index value.
// Returns the requested Gui Display value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log gui-display chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogGuiDisplay(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/gui-display"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogMemoryFilter API operation for FortiManager Device updates the specified MemoryFilter.
// Returns the index value of the MemoryFilter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log memory filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogMemoryFilter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/memory/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogMemoryFilter API operation for FortiManager Device deletes the specified MemoryFilter.
// Returns error for service API and SDK errors.
// See the device - log memory filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogMemoryFilter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - memory filter
	return
}

// ReadLogMemoryFilter API operation for FortiManager Device gets the MemoryFilter
// with the specified index value.
// Returns the requested MemoryFilter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log memory filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogMemoryFilter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/memory/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogMemoryFilterFreeStyle API operation for FortiManager Device creates a new MemoryFilterFree Style.
// Returns the index value of the MemoryFilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log memory filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogMemoryFilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/memory/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogMemoryFilterFreeStyle API operation for FortiManager Device updates the specified MemoryFilterFree Style.
// Returns the index value of the MemoryFilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log memory filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogMemoryFilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/memory/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogMemoryFilterFreeStyle API operation for FortiManager Device deletes the specified MemoryFilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log memory filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogMemoryFilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/memory/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogMemoryFilterFreeStyle API operation for FortiManager Device gets the MemoryFilterFree Style
// with the specified index value.
// Returns the requested MemoryFilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log memory filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogMemoryFilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/memory/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogMemoryGlobalSetting API operation for FortiManager Device updates the specified MemoryGlobal Setting.
// Returns the index value of the MemoryGlobal Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log memory global-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogMemoryGlobalSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/memory/global-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogMemoryGlobalSetting API operation for FortiManager Device deletes the specified MemoryGlobal Setting.
// Returns error for service API and SDK errors.
// See the device - log memory global-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogMemoryGlobalSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - memory global-setting
	return
}

// ReadLogMemoryGlobalSetting API operation for FortiManager Device gets the MemoryGlobal Setting
// with the specified index value.
// Returns the requested MemoryGlobal Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log memory global-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogMemoryGlobalSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/memory/global-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogMemorySetting API operation for FortiManager Device updates the specified MemorySetting.
// Returns the index value of the MemorySetting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log memory setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogMemorySetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/memory/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogMemorySetting API operation for FortiManager Device deletes the specified MemorySetting.
// Returns error for service API and SDK errors.
// See the device - log memory setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogMemorySetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - memory setting
	return
}

// ReadLogMemorySetting API operation for FortiManager Device gets the MemorySetting
// with the specified index value.
// Returns the requested MemorySetting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log memory setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogMemorySetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/memory/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogNullDeviceFilter API operation for FortiManager Device updates the specified Null DeviceFilter.
// Returns the index value of the Null DeviceFilter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log null-device filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogNullDeviceFilter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/null-device/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogNullDeviceFilter API operation for FortiManager Device deletes the specified Null DeviceFilter.
// Returns error for service API and SDK errors.
// See the device - log null-device filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogNullDeviceFilter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - null-device filter
	return
}

// ReadLogNullDeviceFilter API operation for FortiManager Device gets the Null DeviceFilter
// with the specified index value.
// Returns the requested Null DeviceFilter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log null-device filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogNullDeviceFilter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/null-device/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogNullDeviceFilterFreeStyle API operation for FortiManager Device creates a new Null DeviceFilterFree Style.
// Returns the index value of the Null DeviceFilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log null-device filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogNullDeviceFilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/null-device/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogNullDeviceFilterFreeStyle API operation for FortiManager Device updates the specified Null DeviceFilterFree Style.
// Returns the index value of the Null DeviceFilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log null-device filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogNullDeviceFilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/null-device/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogNullDeviceFilterFreeStyle API operation for FortiManager Device deletes the specified Null DeviceFilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log null-device filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogNullDeviceFilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/null-device/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogNullDeviceFilterFreeStyle API operation for FortiManager Device gets the Null DeviceFilterFree Style
// with the specified index value.
// Returns the requested Null DeviceFilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log null-device filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogNullDeviceFilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/null-device/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogNullDeviceSetting API operation for FortiManager Device updates the specified Null DeviceSetting.
// Returns the index value of the Null DeviceSetting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log null-device setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogNullDeviceSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/null-device/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogNullDeviceSetting API operation for FortiManager Device deletes the specified Null DeviceSetting.
// Returns error for service API and SDK errors.
// See the device - log null-device setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogNullDeviceSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - null-device setting
	return
}

// ReadLogNullDeviceSetting API operation for FortiManager Device gets the Null DeviceSetting
// with the specified index value.
// Returns the requested Null DeviceSetting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log null-device setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogNullDeviceSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/null-device/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogSetting API operation for FortiManager Device updates the specified Setting.
// Returns the index value of the Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSetting API operation for FortiManager Device deletes the specified Setting.
// Returns error for service API and SDK errors.
// See the device - log setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - setting
	return
}

// ReadLogSetting API operation for FortiManager Device gets the Setting
// with the specified index value.
// Returns the requested Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogSyslogd2Filter API operation for FortiManager Device updates the specified Syslogd2Filter.
// Returns the index value of the Syslogd2Filter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd2Filter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd2/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd2Filter API operation for FortiManager Device deletes the specified Syslogd2Filter.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd2Filter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - syslogd2 filter
	return
}

// ReadLogSyslogd2Filter API operation for FortiManager Device gets the Syslogd2Filter
// with the specified index value.
// Returns the requested Syslogd2Filter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd2Filter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd2/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogSyslogd2FilterFreeStyle API operation for FortiManager Device creates a new Syslogd2FilterFree Style.
// Returns the index value of the Syslogd2FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogSyslogd2FilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd2/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogSyslogd2FilterFreeStyle API operation for FortiManager Device updates the specified Syslogd2FilterFree Style.
// Returns the index value of the Syslogd2FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd2FilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd2/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd2FilterFreeStyle API operation for FortiManager Device deletes the specified Syslogd2FilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd2FilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/log/syslogd2/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogSyslogd2FilterFreeStyle API operation for FortiManager Device gets the Syslogd2FilterFree Style
// with the specified index value.
// Returns the requested Syslogd2FilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd2FilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd2/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogSyslogd2OverrideFilter API operation for FortiManager Device updates the specified Syslogd2Override Filter.
// Returns the index value of the Syslogd2Override Filter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd2OverrideFilter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd2/override-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd2OverrideFilter API operation for FortiManager Device deletes the specified Syslogd2Override Filter.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd2OverrideFilter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - syslogd2 override-filter
	return
}

// ReadLogSyslogd2OverrideFilter API operation for FortiManager Device gets the Syslogd2Override Filter
// with the specified index value.
// Returns the requested Syslogd2Override Filter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd2OverrideFilter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd2/override-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogSyslogd2OverrideFilterFreeStyle API operation for FortiManager Device creates a new Syslogd2Override FilterFree Style.
// Returns the index value of the Syslogd2Override FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogSyslogd2OverrideFilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd2/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogSyslogd2OverrideFilterFreeStyle API operation for FortiManager Device updates the specified Syslogd2Override FilterFree Style.
// Returns the index value of the Syslogd2Override FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd2OverrideFilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd2/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd2OverrideFilterFreeStyle API operation for FortiManager Device deletes the specified Syslogd2Override FilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd2OverrideFilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd2/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogSyslogd2OverrideFilterFreeStyle API operation for FortiManager Device gets the Syslogd2Override FilterFree Style
// with the specified index value.
// Returns the requested Syslogd2Override FilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd2OverrideFilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd2/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogSyslogd2OverrideSetting API operation for FortiManager Device updates the specified Syslogd2Override Setting.
// Returns the index value of the Syslogd2Override Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd2OverrideSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd2/override-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd2OverrideSetting API operation for FortiManager Device deletes the specified Syslogd2Override Setting.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd2OverrideSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - syslogd2 override-setting
	return
}

// ReadLogSyslogd2OverrideSetting API operation for FortiManager Device gets the Syslogd2Override Setting
// with the specified index value.
// Returns the requested Syslogd2Override Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd2OverrideSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd2/override-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogSyslogd2OverrideSettingCustomFieldName API operation for FortiManager Device creates a new Syslogd2Override SettingCustom Field Name.
// Returns the index value of the Syslogd2Override SettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 override-setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogSyslogd2OverrideSettingCustomFieldName(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd2/override-setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogSyslogd2OverrideSettingCustomFieldName API operation for FortiManager Device updates the specified Syslogd2Override SettingCustom Field Name.
// Returns the index value of the Syslogd2Override SettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 override-setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd2OverrideSettingCustomFieldName(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd2/override-setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd2OverrideSettingCustomFieldName API operation for FortiManager Device deletes the specified Syslogd2Override SettingCustom Field Name.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 override-setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd2OverrideSettingCustomFieldName(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd2/override-setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogSyslogd2OverrideSettingCustomFieldName API operation for FortiManager Device gets the Syslogd2Override SettingCustom Field Name
// with the specified index value.
// Returns the requested Syslogd2Override SettingCustom Field Name value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 override-setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd2OverrideSettingCustomFieldName(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd2/override-setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogSyslogd2Setting API operation for FortiManager Device updates the specified Syslogd2Setting.
// Returns the index value of the Syslogd2Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd2Setting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd2/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd2Setting API operation for FortiManager Device deletes the specified Syslogd2Setting.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd2Setting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - syslogd2 setting
	return
}

// ReadLogSyslogd2Setting API operation for FortiManager Device gets the Syslogd2Setting
// with the specified index value.
// Returns the requested Syslogd2Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd2Setting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd2/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogSyslogd2SettingCustomFieldName API operation for FortiManager Device creates a new Syslogd2SettingCustom Field Name.
// Returns the index value of the Syslogd2SettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogSyslogd2SettingCustomFieldName(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd2/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogSyslogd2SettingCustomFieldName API operation for FortiManager Device updates the specified Syslogd2SettingCustom Field Name.
// Returns the index value of the Syslogd2SettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd2SettingCustomFieldName(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd2/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd2SettingCustomFieldName API operation for FortiManager Device deletes the specified Syslogd2SettingCustom Field Name.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd2SettingCustomFieldName(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/log/syslogd2/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogSyslogd2SettingCustomFieldName API operation for FortiManager Device gets the Syslogd2SettingCustom Field Name
// with the specified index value.
// Returns the requested Syslogd2SettingCustom Field Name value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd2 setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd2SettingCustomFieldName(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd2/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogSyslogd3Filter API operation for FortiManager Device updates the specified Syslogd3Filter.
// Returns the index value of the Syslogd3Filter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd3Filter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd3/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd3Filter API operation for FortiManager Device deletes the specified Syslogd3Filter.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd3Filter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - syslogd3 filter
	return
}

// ReadLogSyslogd3Filter API operation for FortiManager Device gets the Syslogd3Filter
// with the specified index value.
// Returns the requested Syslogd3Filter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd3Filter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd3/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogSyslogd3FilterFreeStyle API operation for FortiManager Device creates a new Syslogd3FilterFree Style.
// Returns the index value of the Syslogd3FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogSyslogd3FilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd3/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogSyslogd3FilterFreeStyle API operation for FortiManager Device updates the specified Syslogd3FilterFree Style.
// Returns the index value of the Syslogd3FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd3FilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd3/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd3FilterFreeStyle API operation for FortiManager Device deletes the specified Syslogd3FilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd3FilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/log/syslogd3/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogSyslogd3FilterFreeStyle API operation for FortiManager Device gets the Syslogd3FilterFree Style
// with the specified index value.
// Returns the requested Syslogd3FilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd3FilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd3/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogSyslogd3OverrideFilter API operation for FortiManager Device updates the specified Syslogd3Override Filter.
// Returns the index value of the Syslogd3Override Filter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd3OverrideFilter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd3/override-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd3OverrideFilter API operation for FortiManager Device deletes the specified Syslogd3Override Filter.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd3OverrideFilter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - syslogd3 override-filter
	return
}

// ReadLogSyslogd3OverrideFilter API operation for FortiManager Device gets the Syslogd3Override Filter
// with the specified index value.
// Returns the requested Syslogd3Override Filter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd3OverrideFilter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd3/override-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogSyslogd3OverrideFilterFreeStyle API operation for FortiManager Device creates a new Syslogd3Override FilterFree Style.
// Returns the index value of the Syslogd3Override FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogSyslogd3OverrideFilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd3/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogSyslogd3OverrideFilterFreeStyle API operation for FortiManager Device updates the specified Syslogd3Override FilterFree Style.
// Returns the index value of the Syslogd3Override FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd3OverrideFilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd3/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd3OverrideFilterFreeStyle API operation for FortiManager Device deletes the specified Syslogd3Override FilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd3OverrideFilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd3/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogSyslogd3OverrideFilterFreeStyle API operation for FortiManager Device gets the Syslogd3Override FilterFree Style
// with the specified index value.
// Returns the requested Syslogd3Override FilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd3OverrideFilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd3/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogSyslogd3OverrideSetting API operation for FortiManager Device updates the specified Syslogd3Override Setting.
// Returns the index value of the Syslogd3Override Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd3OverrideSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd3/override-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd3OverrideSetting API operation for FortiManager Device deletes the specified Syslogd3Override Setting.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd3OverrideSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - syslogd3 override-setting
	return
}

// ReadLogSyslogd3OverrideSetting API operation for FortiManager Device gets the Syslogd3Override Setting
// with the specified index value.
// Returns the requested Syslogd3Override Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd3OverrideSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd3/override-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogSyslogd3OverrideSettingCustomFieldName API operation for FortiManager Device creates a new Syslogd3Override SettingCustom Field Name.
// Returns the index value of the Syslogd3Override SettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 override-setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogSyslogd3OverrideSettingCustomFieldName(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd3/override-setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogSyslogd3OverrideSettingCustomFieldName API operation for FortiManager Device updates the specified Syslogd3Override SettingCustom Field Name.
// Returns the index value of the Syslogd3Override SettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 override-setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd3OverrideSettingCustomFieldName(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd3/override-setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd3OverrideSettingCustomFieldName API operation for FortiManager Device deletes the specified Syslogd3Override SettingCustom Field Name.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 override-setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd3OverrideSettingCustomFieldName(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd3/override-setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogSyslogd3OverrideSettingCustomFieldName API operation for FortiManager Device gets the Syslogd3Override SettingCustom Field Name
// with the specified index value.
// Returns the requested Syslogd3Override SettingCustom Field Name value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 override-setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd3OverrideSettingCustomFieldName(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd3/override-setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogSyslogd3Setting API operation for FortiManager Device updates the specified Syslogd3Setting.
// Returns the index value of the Syslogd3Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd3Setting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd3/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd3Setting API operation for FortiManager Device deletes the specified Syslogd3Setting.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd3Setting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - syslogd3 setting
	return
}

// ReadLogSyslogd3Setting API operation for FortiManager Device gets the Syslogd3Setting
// with the specified index value.
// Returns the requested Syslogd3Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd3Setting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd3/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogSyslogd3SettingCustomFieldName API operation for FortiManager Device creates a new Syslogd3SettingCustom Field Name.
// Returns the index value of the Syslogd3SettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogSyslogd3SettingCustomFieldName(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd3/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogSyslogd3SettingCustomFieldName API operation for FortiManager Device updates the specified Syslogd3SettingCustom Field Name.
// Returns the index value of the Syslogd3SettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd3SettingCustomFieldName(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd3/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd3SettingCustomFieldName API operation for FortiManager Device deletes the specified Syslogd3SettingCustom Field Name.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd3SettingCustomFieldName(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/log/syslogd3/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogSyslogd3SettingCustomFieldName API operation for FortiManager Device gets the Syslogd3SettingCustom Field Name
// with the specified index value.
// Returns the requested Syslogd3SettingCustom Field Name value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd3 setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd3SettingCustomFieldName(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd3/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogSyslogd4Filter API operation for FortiManager Device updates the specified Syslogd4Filter.
// Returns the index value of the Syslogd4Filter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd4Filter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd4/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd4Filter API operation for FortiManager Device deletes the specified Syslogd4Filter.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd4Filter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - syslogd4 filter
	return
}

// ReadLogSyslogd4Filter API operation for FortiManager Device gets the Syslogd4Filter
// with the specified index value.
// Returns the requested Syslogd4Filter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd4Filter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd4/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogSyslogd4FilterFreeStyle API operation for FortiManager Device creates a new Syslogd4FilterFree Style.
// Returns the index value of the Syslogd4FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogSyslogd4FilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd4/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogSyslogd4FilterFreeStyle API operation for FortiManager Device updates the specified Syslogd4FilterFree Style.
// Returns the index value of the Syslogd4FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd4FilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd4/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd4FilterFreeStyle API operation for FortiManager Device deletes the specified Syslogd4FilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd4FilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/log/syslogd4/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogSyslogd4FilterFreeStyle API operation for FortiManager Device gets the Syslogd4FilterFree Style
// with the specified index value.
// Returns the requested Syslogd4FilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd4FilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd4/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogSyslogd4OverrideFilter API operation for FortiManager Device updates the specified Syslogd4Override Filter.
// Returns the index value of the Syslogd4Override Filter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd4OverrideFilter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd4/override-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd4OverrideFilter API operation for FortiManager Device deletes the specified Syslogd4Override Filter.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd4OverrideFilter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - syslogd4 override-filter
	return
}

// ReadLogSyslogd4OverrideFilter API operation for FortiManager Device gets the Syslogd4Override Filter
// with the specified index value.
// Returns the requested Syslogd4Override Filter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 override-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd4OverrideFilter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd4/override-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogSyslogd4OverrideFilterFreeStyle API operation for FortiManager Device creates a new Syslogd4Override FilterFree Style.
// Returns the index value of the Syslogd4Override FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogSyslogd4OverrideFilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd4/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogSyslogd4OverrideFilterFreeStyle API operation for FortiManager Device updates the specified Syslogd4Override FilterFree Style.
// Returns the index value of the Syslogd4Override FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd4OverrideFilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd4/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd4OverrideFilterFreeStyle API operation for FortiManager Device deletes the specified Syslogd4Override FilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd4OverrideFilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd4/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogSyslogd4OverrideFilterFreeStyle API operation for FortiManager Device gets the Syslogd4Override FilterFree Style
// with the specified index value.
// Returns the requested Syslogd4Override FilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd4OverrideFilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd4/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogSyslogd4OverrideSetting API operation for FortiManager Device updates the specified Syslogd4Override Setting.
// Returns the index value of the Syslogd4Override Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd4OverrideSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd4/override-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd4OverrideSetting API operation for FortiManager Device deletes the specified Syslogd4Override Setting.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd4OverrideSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - syslogd4 override-setting
	return
}

// ReadLogSyslogd4OverrideSetting API operation for FortiManager Device gets the Syslogd4Override Setting
// with the specified index value.
// Returns the requested Syslogd4Override Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 override-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd4OverrideSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd4/override-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogSyslogd4OverrideSettingCustomFieldName API operation for FortiManager Device creates a new Syslogd4Override SettingCustom Field Name.
// Returns the index value of the Syslogd4Override SettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 override-setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogSyslogd4OverrideSettingCustomFieldName(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd4/override-setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogSyslogd4OverrideSettingCustomFieldName API operation for FortiManager Device updates the specified Syslogd4Override SettingCustom Field Name.
// Returns the index value of the Syslogd4Override SettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 override-setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd4OverrideSettingCustomFieldName(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd4/override-setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd4OverrideSettingCustomFieldName API operation for FortiManager Device deletes the specified Syslogd4Override SettingCustom Field Name.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 override-setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd4OverrideSettingCustomFieldName(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd4/override-setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogSyslogd4OverrideSettingCustomFieldName API operation for FortiManager Device gets the Syslogd4Override SettingCustom Field Name
// with the specified index value.
// Returns the requested Syslogd4Override SettingCustom Field Name value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 override-setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd4OverrideSettingCustomFieldName(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd4/override-setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogSyslogd4Setting API operation for FortiManager Device updates the specified Syslogd4Setting.
// Returns the index value of the Syslogd4Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd4Setting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd4/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd4Setting API operation for FortiManager Device deletes the specified Syslogd4Setting.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd4Setting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - syslogd4 setting
	return
}

// ReadLogSyslogd4Setting API operation for FortiManager Device gets the Syslogd4Setting
// with the specified index value.
// Returns the requested Syslogd4Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd4Setting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd4/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogSyslogd4SettingCustomFieldName API operation for FortiManager Device creates a new Syslogd4SettingCustom Field Name.
// Returns the index value of the Syslogd4SettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogSyslogd4SettingCustomFieldName(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd4/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogSyslogd4SettingCustomFieldName API operation for FortiManager Device updates the specified Syslogd4SettingCustom Field Name.
// Returns the index value of the Syslogd4SettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogd4SettingCustomFieldName(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd4/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogd4SettingCustomFieldName API operation for FortiManager Device deletes the specified Syslogd4SettingCustom Field Name.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogd4SettingCustomFieldName(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/log/syslogd4/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogSyslogd4SettingCustomFieldName API operation for FortiManager Device gets the Syslogd4SettingCustom Field Name
// with the specified index value.
// Returns the requested Syslogd4SettingCustom Field Name value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd4 setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogd4SettingCustomFieldName(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd4/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogSyslogdFilter API operation for FortiManager Device updates the specified SyslogdFilter.
// Returns the index value of the SyslogdFilter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogdFilter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogdFilter API operation for FortiManager Device deletes the specified SyslogdFilter.
// Returns error for service API and SDK errors.
// See the device - log syslogd filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogdFilter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - syslogd filter
	return
}

// ReadLogSyslogdFilter API operation for FortiManager Device gets the SyslogdFilter
// with the specified index value.
// Returns the requested SyslogdFilter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogdFilter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogSyslogdFilterFreeStyle API operation for FortiManager Device creates a new SyslogdFilterFree Style.
// Returns the index value of the SyslogdFilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogSyslogdFilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogSyslogdFilterFreeStyle API operation for FortiManager Device updates the specified SyslogdFilterFree Style.
// Returns the index value of the SyslogdFilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogdFilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogdFilterFreeStyle API operation for FortiManager Device deletes the specified SyslogdFilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log syslogd filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogdFilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/log/syslogd/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogSyslogdFilterFreeStyle API operation for FortiManager Device gets the SyslogdFilterFree Style
// with the specified index value.
// Returns the requested SyslogdFilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogdFilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogSyslogdOverrideFilterFreeStyle API operation for FortiManager Device creates a new SyslogdOverride FilterFree Style.
// Returns the index value of the SyslogdOverride FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogSyslogdOverrideFilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogSyslogdOverrideFilterFreeStyle API operation for FortiManager Device updates the specified SyslogdOverride FilterFree Style.
// Returns the index value of the SyslogdOverride FilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogdOverrideFilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogdOverrideFilterFreeStyle API operation for FortiManager Device deletes the specified SyslogdOverride FilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log syslogd override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogdOverrideFilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogSyslogdOverrideFilterFreeStyle API operation for FortiManager Device gets the SyslogdOverride FilterFree Style
// with the specified index value.
// Returns the requested SyslogdOverride FilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd override-filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogdOverrideFilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd/override-filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogSyslogdOverrideSettingCustomFieldName API operation for FortiManager Device creates a new SyslogdOverride SettingCustom Field Name.
// Returns the index value of the SyslogdOverride SettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd override-setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogSyslogdOverrideSettingCustomFieldName(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd/override-setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogSyslogdOverrideSettingCustomFieldName API operation for FortiManager Device updates the specified SyslogdOverride SettingCustom Field Name.
// Returns the index value of the SyslogdOverride SettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd override-setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogdOverrideSettingCustomFieldName(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd/override-setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogdOverrideSettingCustomFieldName API operation for FortiManager Device deletes the specified SyslogdOverride SettingCustom Field Name.
// Returns error for service API and SDK errors.
// See the device - log syslogd override-setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogdOverrideSettingCustomFieldName(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd/override-setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogSyslogdOverrideSettingCustomFieldName API operation for FortiManager Device gets the SyslogdOverride SettingCustom Field Name
// with the specified index value.
// Returns the requested SyslogdOverride SettingCustom Field Name value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd override-setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogdOverrideSettingCustomFieldName(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/syslogd/override-setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogSyslogdSetting API operation for FortiManager Device updates the specified SyslogdSetting.
// Returns the index value of the SyslogdSetting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogdSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogdSetting API operation for FortiManager Device deletes the specified SyslogdSetting.
// Returns error for service API and SDK errors.
// See the device - log syslogd setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogdSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - syslogd setting
	return
}

// ReadLogSyslogdSetting API operation for FortiManager Device gets the SyslogdSetting
// with the specified index value.
// Returns the requested SyslogdSetting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogdSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogSyslogdSettingCustomFieldName API operation for FortiManager Device creates a new SyslogdSettingCustom Field Name.
// Returns the index value of the SyslogdSettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogSyslogdSettingCustomFieldName(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogSyslogdSettingCustomFieldName API operation for FortiManager Device updates the specified SyslogdSettingCustom Field Name.
// Returns the index value of the SyslogdSettingCustom Field Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogSyslogdSettingCustomFieldName(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogSyslogdSettingCustomFieldName API operation for FortiManager Device deletes the specified SyslogdSettingCustom Field Name.
// Returns error for service API and SDK errors.
// See the device - log syslogd setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogSyslogdSettingCustomFieldName(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/log/syslogd/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogSyslogdSettingCustomFieldName API operation for FortiManager Device gets the SyslogdSettingCustom Field Name
// with the specified index value.
// Returns the requested SyslogdSettingCustom Field Name value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log syslogd setting custom-field-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogSyslogdSettingCustomFieldName(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/syslogd/setting/custom-field-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogTacacsAccounting2Filter API operation for FortiManager Device updates the specified Tacacs+Accounting2Filter.
// Returns the index value of the Tacacs+Accounting2Filter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log tacacs+accounting2 filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogTacacsAccounting2Filter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/tacacs+accounting2/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogTacacsAccounting2Filter API operation for FortiManager Device deletes the specified Tacacs+Accounting2Filter.
// Returns error for service API and SDK errors.
// See the device - log tacacs+accounting2 filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogTacacsAccounting2Filter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - tacacs+accounting2 filter
	return
}

// ReadLogTacacsAccounting2Filter API operation for FortiManager Device gets the Tacacs+Accounting2Filter
// with the specified index value.
// Returns the requested Tacacs+Accounting2Filter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log tacacs+accounting2 filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogTacacsAccounting2Filter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/tacacs+accounting2/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogTacacsAccounting2Setting API operation for FortiManager Device updates the specified Tacacs+Accounting2Setting.
// Returns the index value of the Tacacs+Accounting2Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log tacacs+accounting2 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogTacacsAccounting2Setting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/tacacs+accounting2/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogTacacsAccounting2Setting API operation for FortiManager Device deletes the specified Tacacs+Accounting2Setting.
// Returns error for service API and SDK errors.
// See the device - log tacacs+accounting2 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogTacacsAccounting2Setting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - tacacs+accounting2 setting
	return
}

// ReadLogTacacsAccounting2Setting API operation for FortiManager Device gets the Tacacs+Accounting2Setting
// with the specified index value.
// Returns the requested Tacacs+Accounting2Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log tacacs+accounting2 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogTacacsAccounting2Setting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/tacacs+accounting2/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogTacacsAccounting3Filter API operation for FortiManager Device updates the specified Tacacs+Accounting3Filter.
// Returns the index value of the Tacacs+Accounting3Filter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log tacacs+accounting3 filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogTacacsAccounting3Filter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/tacacs+accounting3/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogTacacsAccounting3Filter API operation for FortiManager Device deletes the specified Tacacs+Accounting3Filter.
// Returns error for service API and SDK errors.
// See the device - log tacacs+accounting3 filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogTacacsAccounting3Filter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - tacacs+accounting3 filter
	return
}

// ReadLogTacacsAccounting3Filter API operation for FortiManager Device gets the Tacacs+Accounting3Filter
// with the specified index value.
// Returns the requested Tacacs+Accounting3Filter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log tacacs+accounting3 filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogTacacsAccounting3Filter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/tacacs+accounting3/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogTacacsAccounting3Setting API operation for FortiManager Device updates the specified Tacacs+Accounting3Setting.
// Returns the index value of the Tacacs+Accounting3Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log tacacs+accounting3 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogTacacsAccounting3Setting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/tacacs+accounting3/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogTacacsAccounting3Setting API operation for FortiManager Device deletes the specified Tacacs+Accounting3Setting.
// Returns error for service API and SDK errors.
// See the device - log tacacs+accounting3 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogTacacsAccounting3Setting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - tacacs+accounting3 setting
	return
}

// ReadLogTacacsAccounting3Setting API operation for FortiManager Device gets the Tacacs+Accounting3Setting
// with the specified index value.
// Returns the requested Tacacs+Accounting3Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log tacacs+accounting3 setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogTacacsAccounting3Setting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/tacacs+accounting3/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogTacacsAccountingFilter API operation for FortiManager Device updates the specified Tacacs+AccountingFilter.
// Returns the index value of the Tacacs+AccountingFilter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log tacacs+accounting filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogTacacsAccountingFilter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/tacacs+accounting/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogTacacsAccountingFilter API operation for FortiManager Device deletes the specified Tacacs+AccountingFilter.
// Returns error for service API and SDK errors.
// See the device - log tacacs+accounting filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogTacacsAccountingFilter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - tacacs+accounting filter
	return
}

// ReadLogTacacsAccountingFilter API operation for FortiManager Device gets the Tacacs+AccountingFilter
// with the specified index value.
// Returns the requested Tacacs+AccountingFilter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log tacacs+accounting filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogTacacsAccountingFilter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/tacacs+accounting/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogTacacsAccountingSetting API operation for FortiManager Device updates the specified Tacacs+AccountingSetting.
// Returns the index value of the Tacacs+AccountingSetting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log tacacs+accounting setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogTacacsAccountingSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/tacacs+accounting/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogTacacsAccountingSetting API operation for FortiManager Device deletes the specified Tacacs+AccountingSetting.
// Returns error for service API and SDK errors.
// See the device - log tacacs+accounting setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogTacacsAccountingSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - tacacs+accounting setting
	return
}

// ReadLogTacacsAccountingSetting API operation for FortiManager Device gets the Tacacs+AccountingSetting
// with the specified index value.
// Returns the requested Tacacs+AccountingSetting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log tacacs+accounting setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogTacacsAccountingSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/log/tacacs+accounting/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogWebtrendsFilter API operation for FortiManager Device updates the specified WebtrendsFilter.
// Returns the index value of the WebtrendsFilter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log webtrends filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogWebtrendsFilter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/webtrends/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogWebtrendsFilter API operation for FortiManager Device deletes the specified WebtrendsFilter.
// Returns error for service API and SDK errors.
// See the device - log webtrends filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogWebtrendsFilter(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - webtrends filter
	return
}

// ReadLogWebtrendsFilter API operation for FortiManager Device gets the WebtrendsFilter
// with the specified index value.
// Returns the requested WebtrendsFilter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log webtrends filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogWebtrendsFilter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/webtrends/filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateLogWebtrendsFilterFreeStyle API operation for FortiManager Device creates a new WebtrendsFilterFree Style.
// Returns the index value of the WebtrendsFilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log webtrends filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateLogWebtrendsFilterFreeStyle(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/webtrends/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateLogWebtrendsFilterFreeStyle API operation for FortiManager Device updates the specified WebtrendsFilterFree Style.
// Returns the index value of the WebtrendsFilterFree Style and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log webtrends filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogWebtrendsFilterFreeStyle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/webtrends/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogWebtrendsFilterFreeStyle API operation for FortiManager Device deletes the specified WebtrendsFilterFree Style.
// Returns error for service API and SDK errors.
// See the device - log webtrends filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogWebtrendsFilterFreeStyle(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/log/webtrends/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadLogWebtrendsFilterFreeStyle API operation for FortiManager Device gets the WebtrendsFilterFree Style
// with the specified index value.
// Returns the requested WebtrendsFilterFree Style value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log webtrends filter free-style chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogWebtrendsFilterFreeStyle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/webtrends/filter/free-style"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateLogWebtrendsSetting API operation for FortiManager Device updates the specified WebtrendsSetting.
// Returns the index value of the WebtrendsSetting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log webtrends setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateLogWebtrendsSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/webtrends/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteLogWebtrendsSetting API operation for FortiManager Device deletes the specified WebtrendsSetting.
// Returns error for service API and SDK errors.
// See the device - log webtrends setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteLogWebtrendsSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for log - webtrends setting
	return
}

// ReadLogWebtrendsSetting API operation for FortiManager Device gets the WebtrendsSetting
// with the specified index value.
// Returns the requested WebtrendsSetting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - log webtrends setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadLogWebtrendsSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/log/webtrends/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateNsxtServiceChain API operation for FortiManager Device creates a new Service Chain.
// Returns the index value of the Service Chain and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - nsxt service-chain chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateNsxtServiceChain(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/nsxt/service-chain"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateNsxtServiceChain API operation for FortiManager Device updates the specified Service Chain.
// Returns the index value of the Service Chain and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - nsxt service-chain chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateNsxtServiceChain(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/nsxt/service-chain"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteNsxtServiceChain API operation for FortiManager Device deletes the specified Service Chain.
// Returns error for service API and SDK errors.
// See the device - nsxt service-chain chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteNsxtServiceChain(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/nsxt/service-chain"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadNsxtServiceChain API operation for FortiManager Device gets the Service Chain
// with the specified index value.
// Returns the requested Service Chain value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - nsxt service-chain chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadNsxtServiceChain(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/nsxt/service-chain"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateNsxtServiceChainServiceIndex API operation for FortiManager Device creates a new Service ChainService Index.
// Returns the index value of the Service ChainService Index and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - nsxt service-chain service-index chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateNsxtServiceChainServiceIndex(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/nsxt/service-chain/{service-chain}/service-index"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateNsxtServiceChainServiceIndex API operation for FortiManager Device updates the specified Service ChainService Index.
// Returns the index value of the Service ChainService Index and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - nsxt service-chain service-index chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateNsxtServiceChainServiceIndex(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/nsxt/service-chain/{service-chain}/service-index"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteNsxtServiceChainServiceIndex API operation for FortiManager Device deletes the specified Service ChainService Index.
// Returns error for service API and SDK errors.
// See the device - nsxt service-chain service-index chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteNsxtServiceChainServiceIndex(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/nsxt/service-chain/{service-chain}/service-index"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadNsxtServiceChainServiceIndex API operation for FortiManager Device gets the Service ChainService Index
// with the specified index value.
// Returns the requested Service ChainService Index value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - nsxt service-chain service-index chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadNsxtServiceChainServiceIndex(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/nsxt/service-chain/{service-chain}/service-index"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateNsxtServiceChainServiceIndexMove API operation for FortiManager Device updates the specified Service ChainService IndexMove.
// Returns the index value of the Service ChainService IndexMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - nsxt service-chain service-index move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateNsxtServiceChainServiceIndexMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/nsxt/service-chain/{service-chain}/service-index/{service-index}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadNsxtServiceChainServiceIndexMove API operation for FortiManager Device gets the Service ChainService IndexMove
// with the specified index value.
// Returns the requested Service ChainService IndexMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - nsxt service-chain service-index move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadNsxtServiceChainServiceIndexMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/global/nsxt/service-chain/{service-chain}/service-index"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"id"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// UpdateNsxtSetting API operation for FortiManager Device updates the specified Setting.
// Returns the index value of the Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - nsxt setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateNsxtSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/nsxt/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteNsxtSetting API operation for FortiManager Device deletes the specified Setting.
// Returns error for service API and SDK errors.
// See the device - nsxt setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteNsxtSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for nsxt - setting
	return
}

// ReadNsxtSetting API operation for FortiManager Device gets the Setting
// with the specified index value.
// Returns the requested Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - nsxt setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadNsxtSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/nsxt/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateReportLayout API operation for FortiManager Device creates a new Layout.
// Returns the index value of the Layout and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateReportLayout(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateReportLayout API operation for FortiManager Device updates the specified Layout.
// Returns the index value of the Layout and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateReportLayout(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteReportLayout API operation for FortiManager Device deletes the specified Layout.
// Returns error for service API and SDK errors.
// See the device - report layout chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteReportLayout(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadReportLayout API operation for FortiManager Device gets the Layout
// with the specified index value.
// Returns the requested Layout value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadReportLayout(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateReportLayoutBodyItem API operation for FortiManager Device creates a new LayoutBody Item.
// Returns the index value of the LayoutBody Item and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout body-item chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateReportLayoutBodyItem(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/body-item"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateReportLayoutBodyItem API operation for FortiManager Device updates the specified LayoutBody Item.
// Returns the index value of the LayoutBody Item and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout body-item chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateReportLayoutBodyItem(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/body-item"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteReportLayoutBodyItem API operation for FortiManager Device deletes the specified LayoutBody Item.
// Returns error for service API and SDK errors.
// See the device - report layout body-item chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteReportLayoutBodyItem(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/body-item"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadReportLayoutBodyItem API operation for FortiManager Device gets the LayoutBody Item
// with the specified index value.
// Returns the requested LayoutBody Item value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout body-item chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadReportLayoutBodyItem(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/body-item"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateReportLayoutBodyItemMove API operation for FortiManager Device updates the specified LayoutBody ItemMove.
// Returns the index value of the LayoutBody ItemMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout body-item move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateReportLayoutBodyItemMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/body-item/{body-item}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadReportLayoutBodyItemMove API operation for FortiManager Device gets the LayoutBody ItemMove
// with the specified index value.
// Returns the requested LayoutBody ItemMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout body-item move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadReportLayoutBodyItemMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/body-item"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"id"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// CreateReportLayoutBodyItemParameters API operation for FortiManager Device creates a new LayoutBody ItemParameters.
// Returns the index value of the LayoutBody ItemParameters and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout body-item parameters chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateReportLayoutBodyItemParameters(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/body-item/{body-item}/parameters"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateReportLayoutBodyItemParameters API operation for FortiManager Device updates the specified LayoutBody ItemParameters.
// Returns the index value of the LayoutBody ItemParameters and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout body-item parameters chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateReportLayoutBodyItemParameters(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/body-item/{body-item}/parameters"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteReportLayoutBodyItemParameters API operation for FortiManager Device deletes the specified LayoutBody ItemParameters.
// Returns error for service API and SDK errors.
// See the device - report layout body-item parameters chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteReportLayoutBodyItemParameters(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/body-item/{body-item}/parameters"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadReportLayoutBodyItemParameters API operation for FortiManager Device gets the LayoutBody ItemParameters
// with the specified index value.
// Returns the requested LayoutBody ItemParameters value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout body-item parameters chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadReportLayoutBodyItemParameters(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/body-item/{body-item}/parameters"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateReportLayoutPage API operation for FortiManager Device updates the specified LayoutPage.
// Returns the index value of the LayoutPage and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout page chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateReportLayoutPage(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/page"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteReportLayoutPage API operation for FortiManager Device deletes the specified LayoutPage.
// Returns error for service API and SDK errors.
// See the device - report layout page chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteReportLayoutPage(mkey string, paradict map[string]string) (err error) {

	//No unset API for report - layout page
	return
}

// ReadReportLayoutPage API operation for FortiManager Device gets the LayoutPage
// with the specified index value.
// Returns the requested LayoutPage value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout page chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadReportLayoutPage(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/page"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateReportLayoutPageFooter API operation for FortiManager Device updates the specified LayoutPageFooter.
// Returns the index value of the LayoutPageFooter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout page footer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateReportLayoutPageFooter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/page/footer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteReportLayoutPageFooter API operation for FortiManager Device deletes the specified LayoutPageFooter.
// Returns error for service API and SDK errors.
// See the device - report layout page footer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteReportLayoutPageFooter(mkey string, paradict map[string]string) (err error) {

	//No unset API for report - layout page footer
	return
}

// ReadReportLayoutPageFooter API operation for FortiManager Device gets the LayoutPageFooter
// with the specified index value.
// Returns the requested LayoutPageFooter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout page footer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadReportLayoutPageFooter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/page/footer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateReportLayoutPageFooterFooterItem API operation for FortiManager Device creates a new LayoutPageFooterFooter Item.
// Returns the index value of the LayoutPageFooterFooter Item and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout page footer footer-item chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateReportLayoutPageFooterFooterItem(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/page/footer/footer-item"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateReportLayoutPageFooterFooterItem API operation for FortiManager Device updates the specified LayoutPageFooterFooter Item.
// Returns the index value of the LayoutPageFooterFooter Item and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout page footer footer-item chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateReportLayoutPageFooterFooterItem(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/page/footer/footer-item"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteReportLayoutPageFooterFooterItem API operation for FortiManager Device deletes the specified LayoutPageFooterFooter Item.
// Returns error for service API and SDK errors.
// See the device - report layout page footer footer-item chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteReportLayoutPageFooterFooterItem(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/page/footer/footer-item"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadReportLayoutPageFooterFooterItem API operation for FortiManager Device gets the LayoutPageFooterFooter Item
// with the specified index value.
// Returns the requested LayoutPageFooterFooter Item value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout page footer footer-item chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadReportLayoutPageFooterFooterItem(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/page/footer/footer-item"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateReportLayoutPageFooterFooterItemMove API operation for FortiManager Device updates the specified LayoutPageFooterFooter ItemMove.
// Returns the index value of the LayoutPageFooterFooter ItemMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout page footer footer-item move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateReportLayoutPageFooterFooterItemMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/page/footer/footer-item/{footer-item}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadReportLayoutPageFooterFooterItemMove API operation for FortiManager Device gets the LayoutPageFooterFooter ItemMove
// with the specified index value.
// Returns the requested LayoutPageFooterFooter ItemMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout page footer footer-item move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadReportLayoutPageFooterFooterItemMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/page/footer/footer-item"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"id"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// UpdateReportLayoutPageHeader API operation for FortiManager Device updates the specified LayoutPageHeader.
// Returns the index value of the LayoutPageHeader and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout page header chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateReportLayoutPageHeader(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/page/header"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteReportLayoutPageHeader API operation for FortiManager Device deletes the specified LayoutPageHeader.
// Returns error for service API and SDK errors.
// See the device - report layout page header chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteReportLayoutPageHeader(mkey string, paradict map[string]string) (err error) {

	//No unset API for report - layout page header
	return
}

// ReadReportLayoutPageHeader API operation for FortiManager Device gets the LayoutPageHeader
// with the specified index value.
// Returns the requested LayoutPageHeader value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout page header chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadReportLayoutPageHeader(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/page/header"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateReportLayoutPageHeaderHeaderItem API operation for FortiManager Device creates a new LayoutPageHeaderHeader Item.
// Returns the index value of the LayoutPageHeaderHeader Item and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout page header header-item chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateReportLayoutPageHeaderHeaderItem(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/page/header/header-item"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateReportLayoutPageHeaderHeaderItem API operation for FortiManager Device updates the specified LayoutPageHeaderHeader Item.
// Returns the index value of the LayoutPageHeaderHeader Item and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout page header header-item chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateReportLayoutPageHeaderHeaderItem(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/page/header/header-item"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteReportLayoutPageHeaderHeaderItem API operation for FortiManager Device deletes the specified LayoutPageHeaderHeader Item.
// Returns error for service API and SDK errors.
// See the device - report layout page header header-item chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteReportLayoutPageHeaderHeaderItem(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/page/header/header-item"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadReportLayoutPageHeaderHeaderItem API operation for FortiManager Device gets the LayoutPageHeaderHeader Item
// with the specified index value.
// Returns the requested LayoutPageHeaderHeader Item value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout page header header-item chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadReportLayoutPageHeaderHeaderItem(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/page/header/header-item"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateReportLayoutPageHeaderHeaderItemMove API operation for FortiManager Device updates the specified LayoutPageHeaderHeader ItemMove.
// Returns the index value of the LayoutPageHeaderHeader ItemMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout page header header-item move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateReportLayoutPageHeaderHeaderItemMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/page/header/header-item/{header-item}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadReportLayoutPageHeaderHeaderItemMove API operation for FortiManager Device gets the LayoutPageHeaderHeader ItemMove
// with the specified index value.
// Returns the requested LayoutPageHeaderHeader ItemMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report layout page header header-item move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadReportLayoutPageHeaderHeaderItemMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/layout/{layout}/page/header/header-item"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"id"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// UpdateReportSetting API operation for FortiManager Device updates the specified Setting.
// Returns the index value of the Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateReportSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteReportSetting API operation for FortiManager Device deletes the specified Setting.
// Returns error for service API and SDK errors.
// See the device - report setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteReportSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for report - setting
	return
}

// ReadReportSetting API operation for FortiManager Device gets the Setting
// with the specified index value.
// Returns the requested Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - report setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadReportSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/report/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterAuthPath API operation for FortiManager Device creates a new Auth Path.
// Returns the index value of the Auth Path and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router auth-path chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterAuthPath(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/auth-path"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterAuthPath API operation for FortiManager Device updates the specified Auth Path.
// Returns the index value of the Auth Path and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router auth-path chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterAuthPath(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/auth-path"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterAuthPath API operation for FortiManager Device deletes the specified Auth Path.
// Returns error for service API and SDK errors.
// See the device - router auth-path chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterAuthPath(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/auth-path"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterAuthPath API operation for FortiManager Device gets the Auth Path
// with the specified index value.
// Returns the requested Auth Path value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router auth-path chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterAuthPath(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/auth-path"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterBfd API operation for FortiManager Device updates the specified Bfd.
// Returns the index value of the Bfd and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bfd chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBfd(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBfd API operation for FortiManager Device deletes the specified Bfd.
// Returns error for service API and SDK errors.
// See the device - router bfd chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBfd(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - bfd
	return
}

// ReadRouterBfd API operation for FortiManager Device gets the Bfd
// with the specified index value.
// Returns the requested Bfd value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bfd chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBfd(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterBfd6 API operation for FortiManager Device updates the specified Bfd6.
// Returns the index value of the Bfd6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bfd6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBfd6(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBfd6 API operation for FortiManager Device deletes the specified Bfd6.
// Returns error for service API and SDK errors.
// See the device - router bfd6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBfd6(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - bfd6
	return
}

// ReadRouterBfd6 API operation for FortiManager Device gets the Bfd6
// with the specified index value.
// Returns the requested Bfd6 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bfd6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBfd6(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterBfd6MultihopTemplate API operation for FortiManager Device creates a new Bfd6Multihop Template.
// Returns the index value of the Bfd6Multihop Template and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bfd6 multihop-template chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterBfd6MultihopTemplate(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd6/multihop-template"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterBfd6MultihopTemplate API operation for FortiManager Device updates the specified Bfd6Multihop Template.
// Returns the index value of the Bfd6Multihop Template and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bfd6 multihop-template chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBfd6MultihopTemplate(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd6/multihop-template"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBfd6MultihopTemplate API operation for FortiManager Device deletes the specified Bfd6Multihop Template.
// Returns error for service API and SDK errors.
// See the device - router bfd6 multihop-template chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBfd6MultihopTemplate(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd6/multihop-template"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterBfd6MultihopTemplate API operation for FortiManager Device gets the Bfd6Multihop Template
// with the specified index value.
// Returns the requested Bfd6Multihop Template value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bfd6 multihop-template chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBfd6MultihopTemplate(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd6/multihop-template"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterBfd6Neighbor API operation for FortiManager Device creates a new Bfd6Neighbor.
// Returns the index value of the Bfd6Neighbor and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bfd6 neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterBfd6Neighbor(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd6/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterBfd6Neighbor API operation for FortiManager Device updates the specified Bfd6Neighbor.
// Returns the index value of the Bfd6Neighbor and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bfd6 neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBfd6Neighbor(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd6/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBfd6Neighbor API operation for FortiManager Device deletes the specified Bfd6Neighbor.
// Returns error for service API and SDK errors.
// See the device - router bfd6 neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBfd6Neighbor(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd6/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterBfd6Neighbor API operation for FortiManager Device gets the Bfd6Neighbor
// with the specified index value.
// Returns the requested Bfd6Neighbor value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bfd6 neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBfd6Neighbor(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd6/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterBfdMultihopTemplate API operation for FortiManager Device creates a new BfdMultihop Template.
// Returns the index value of the BfdMultihop Template and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bfd multihop-template chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterBfdMultihopTemplate(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd/multihop-template"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterBfdMultihopTemplate API operation for FortiManager Device updates the specified BfdMultihop Template.
// Returns the index value of the BfdMultihop Template and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bfd multihop-template chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBfdMultihopTemplate(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd/multihop-template"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBfdMultihopTemplate API operation for FortiManager Device deletes the specified BfdMultihop Template.
// Returns error for service API and SDK errors.
// See the device - router bfd multihop-template chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBfdMultihopTemplate(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd/multihop-template"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterBfdMultihopTemplate API operation for FortiManager Device gets the BfdMultihop Template
// with the specified index value.
// Returns the requested BfdMultihop Template value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bfd multihop-template chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBfdMultihopTemplate(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd/multihop-template"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterBfdNeighbor API operation for FortiManager Device creates a new BfdNeighbor.
// Returns the index value of the BfdNeighbor and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bfd neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterBfdNeighbor(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterBfdNeighbor API operation for FortiManager Device updates the specified BfdNeighbor.
// Returns the index value of the BfdNeighbor and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bfd neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBfdNeighbor(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBfdNeighbor API operation for FortiManager Device deletes the specified BfdNeighbor.
// Returns error for service API and SDK errors.
// See the device - router bfd neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBfdNeighbor(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterBfdNeighbor API operation for FortiManager Device gets the BfdNeighbor
// with the specified index value.
// Returns the requested BfdNeighbor value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bfd neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBfdNeighbor(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bfd/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterBgp API operation for FortiManager Device updates the specified Bgp.
// Returns the index value of the Bgp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBgp(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBgp API operation for FortiManager Device deletes the specified Bgp.
// Returns error for service API and SDK errors.
// See the device - router bgp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBgp(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - bgp
	return
}

// ReadRouterBgp API operation for FortiManager Device gets the Bgp
// with the specified index value.
// Returns the requested Bgp value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBgp(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterBgpAdminDistance API operation for FortiManager Device creates a new BgpAdmin Distance.
// Returns the index value of the BgpAdmin Distance and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp admin-distance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterBgpAdminDistance(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/admin-distance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterBgpAdminDistance API operation for FortiManager Device updates the specified BgpAdmin Distance.
// Returns the index value of the BgpAdmin Distance and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp admin-distance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBgpAdminDistance(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/admin-distance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBgpAdminDistance API operation for FortiManager Device deletes the specified BgpAdmin Distance.
// Returns error for service API and SDK errors.
// See the device - router bgp admin-distance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBgpAdminDistance(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/admin-distance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterBgpAdminDistance API operation for FortiManager Device gets the BgpAdmin Distance
// with the specified index value.
// Returns the requested BgpAdmin Distance value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp admin-distance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBgpAdminDistance(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/admin-distance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterBgpAggregateAddress API operation for FortiManager Device creates a new BgpAggregate Address.
// Returns the index value of the BgpAggregate Address and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp aggregate-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterBgpAggregateAddress(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/aggregate-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterBgpAggregateAddress API operation for FortiManager Device updates the specified BgpAggregate Address.
// Returns the index value of the BgpAggregate Address and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp aggregate-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBgpAggregateAddress(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/aggregate-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBgpAggregateAddress API operation for FortiManager Device deletes the specified BgpAggregate Address.
// Returns error for service API and SDK errors.
// See the device - router bgp aggregate-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBgpAggregateAddress(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/aggregate-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterBgpAggregateAddress API operation for FortiManager Device gets the BgpAggregate Address
// with the specified index value.
// Returns the requested BgpAggregate Address value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp aggregate-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBgpAggregateAddress(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/aggregate-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterBgpAggregateAddress6 API operation for FortiManager Device creates a new BgpAggregate Address6.
// Returns the index value of the BgpAggregate Address6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp aggregate-address6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterBgpAggregateAddress6(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/aggregate-address6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterBgpAggregateAddress6 API operation for FortiManager Device updates the specified BgpAggregate Address6.
// Returns the index value of the BgpAggregate Address6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp aggregate-address6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBgpAggregateAddress6(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/aggregate-address6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBgpAggregateAddress6 API operation for FortiManager Device deletes the specified BgpAggregate Address6.
// Returns error for service API and SDK errors.
// See the device - router bgp aggregate-address6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBgpAggregateAddress6(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/aggregate-address6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterBgpAggregateAddress6 API operation for FortiManager Device gets the BgpAggregate Address6
// with the specified index value.
// Returns the requested BgpAggregate Address6 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp aggregate-address6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBgpAggregateAddress6(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/aggregate-address6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterBgpNeighbor API operation for FortiManager Device creates a new BgpNeighbor.
// Returns the index value of the BgpNeighbor and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterBgpNeighbor(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterBgpNeighbor API operation for FortiManager Device updates the specified BgpNeighbor.
// Returns the index value of the BgpNeighbor and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBgpNeighbor(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBgpNeighbor API operation for FortiManager Device deletes the specified BgpNeighbor.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBgpNeighbor(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterBgpNeighbor API operation for FortiManager Device gets the BgpNeighbor
// with the specified index value.
// Returns the requested BgpNeighbor value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBgpNeighbor(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterBgpNeighborGroup API operation for FortiManager Device creates a new BgpNeighbor Group.
// Returns the index value of the BgpNeighbor Group and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterBgpNeighborGroup(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterBgpNeighborGroup API operation for FortiManager Device updates the specified BgpNeighbor Group.
// Returns the index value of the BgpNeighbor Group and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBgpNeighborGroup(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBgpNeighborGroup API operation for FortiManager Device deletes the specified BgpNeighbor Group.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBgpNeighborGroup(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterBgpNeighborGroup API operation for FortiManager Device gets the BgpNeighbor Group
// with the specified index value.
// Returns the requested BgpNeighbor Group value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBgpNeighborGroup(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterBgpNeighborRange API operation for FortiManager Device creates a new BgpNeighbor Range.
// Returns the index value of the BgpNeighbor Range and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterBgpNeighborRange(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterBgpNeighborRange API operation for FortiManager Device updates the specified BgpNeighbor Range.
// Returns the index value of the BgpNeighbor Range and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBgpNeighborRange(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBgpNeighborRange API operation for FortiManager Device deletes the specified BgpNeighbor Range.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBgpNeighborRange(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterBgpNeighborRange API operation for FortiManager Device gets the BgpNeighbor Range
// with the specified index value.
// Returns the requested BgpNeighbor Range value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBgpNeighborRange(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterBgpNeighborRange6 API operation for FortiManager Device creates a new BgpNeighbor Range6.
// Returns the index value of the BgpNeighbor Range6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor-range6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterBgpNeighborRange6(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor-range6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterBgpNeighborRange6 API operation for FortiManager Device updates the specified BgpNeighbor Range6.
// Returns the index value of the BgpNeighbor Range6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor-range6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBgpNeighborRange6(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor-range6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBgpNeighborRange6 API operation for FortiManager Device deletes the specified BgpNeighbor Range6.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor-range6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBgpNeighborRange6(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor-range6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterBgpNeighborRange6 API operation for FortiManager Device gets the BgpNeighbor Range6
// with the specified index value.
// Returns the requested BgpNeighbor Range6 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor-range6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBgpNeighborRange6(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor-range6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterBgpNeighborConditionalAdvertise API operation for FortiManager Device creates a new BgpNeighborConditional Advertise.
// Returns the index value of the BgpNeighborConditional Advertise and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor conditional-advertise chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterBgpNeighborConditionalAdvertise(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor/{neighbor}/conditional-advertise"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterBgpNeighborConditionalAdvertise API operation for FortiManager Device updates the specified BgpNeighborConditional Advertise.
// Returns the index value of the BgpNeighborConditional Advertise and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor conditional-advertise chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBgpNeighborConditionalAdvertise(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor/{neighbor}/conditional-advertise"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBgpNeighborConditionalAdvertise API operation for FortiManager Device deletes the specified BgpNeighborConditional Advertise.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor conditional-advertise chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBgpNeighborConditionalAdvertise(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor/{neighbor}/conditional-advertise"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterBgpNeighborConditionalAdvertise API operation for FortiManager Device gets the BgpNeighborConditional Advertise
// with the specified index value.
// Returns the requested BgpNeighborConditional Advertise value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor conditional-advertise chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBgpNeighborConditionalAdvertise(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor/{neighbor}/conditional-advertise"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterBgpNeighborConditionalAdvertise6 API operation for FortiManager Device creates a new BgpNeighborConditional Advertise6.
// Returns the index value of the BgpNeighborConditional Advertise6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor conditional-advertise6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterBgpNeighborConditionalAdvertise6(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor/{neighbor}/conditional-advertise6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterBgpNeighborConditionalAdvertise6 API operation for FortiManager Device updates the specified BgpNeighborConditional Advertise6.
// Returns the index value of the BgpNeighborConditional Advertise6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor conditional-advertise6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBgpNeighborConditionalAdvertise6(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor/{neighbor}/conditional-advertise6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBgpNeighborConditionalAdvertise6 API operation for FortiManager Device deletes the specified BgpNeighborConditional Advertise6.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor conditional-advertise6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBgpNeighborConditionalAdvertise6(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor/{neighbor}/conditional-advertise6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterBgpNeighborConditionalAdvertise6 API operation for FortiManager Device gets the BgpNeighborConditional Advertise6
// with the specified index value.
// Returns the requested BgpNeighborConditional Advertise6 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp neighbor conditional-advertise6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBgpNeighborConditionalAdvertise6(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/neighbor/{neighbor}/conditional-advertise6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterBgpNetwork API operation for FortiManager Device creates a new BgpNetwork.
// Returns the index value of the BgpNetwork and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp network chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterBgpNetwork(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/network"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterBgpNetwork API operation for FortiManager Device updates the specified BgpNetwork.
// Returns the index value of the BgpNetwork and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp network chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBgpNetwork(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/network"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBgpNetwork API operation for FortiManager Device deletes the specified BgpNetwork.
// Returns error for service API and SDK errors.
// See the device - router bgp network chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBgpNetwork(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/network"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterBgpNetwork API operation for FortiManager Device gets the BgpNetwork
// with the specified index value.
// Returns the requested BgpNetwork value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp network chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBgpNetwork(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/network"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterBgpNetwork6 API operation for FortiManager Device creates a new BgpNetwork6.
// Returns the index value of the BgpNetwork6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp network6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterBgpNetwork6(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/network6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterBgpNetwork6 API operation for FortiManager Device updates the specified BgpNetwork6.
// Returns the index value of the BgpNetwork6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp network6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBgpNetwork6(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/network6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBgpNetwork6 API operation for FortiManager Device deletes the specified BgpNetwork6.
// Returns error for service API and SDK errors.
// See the device - router bgp network6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBgpNetwork6(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/network6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterBgpNetwork6 API operation for FortiManager Device gets the BgpNetwork6
// with the specified index value.
// Returns the requested BgpNetwork6 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp network6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBgpNetwork6(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/network6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterBgpRedistribute API operation for FortiManager Device updates the specified BgpRedistribute.
// Returns the index value of the BgpRedistribute and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp redistribute chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBgpRedistribute(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/redistribute"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBgpRedistribute API operation for FortiManager Device deletes the specified BgpRedistribute.
// Returns error for service API and SDK errors.
// See the device - router bgp redistribute chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBgpRedistribute(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - bgp redistribute
	return
}

// ReadRouterBgpRedistribute API operation for FortiManager Device gets the BgpRedistribute
// with the specified index value.
// Returns the requested BgpRedistribute value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp redistribute chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBgpRedistribute(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/redistribute"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterBgpRedistribute6 API operation for FortiManager Device updates the specified BgpRedistribute6.
// Returns the index value of the BgpRedistribute6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp redistribute6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBgpRedistribute6(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/redistribute6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBgpRedistribute6 API operation for FortiManager Device deletes the specified BgpRedistribute6.
// Returns error for service API and SDK errors.
// See the device - router bgp redistribute6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBgpRedistribute6(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - bgp redistribute6
	return
}

// ReadRouterBgpRedistribute6 API operation for FortiManager Device gets the BgpRedistribute6
// with the specified index value.
// Returns the requested BgpRedistribute6 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp redistribute6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBgpRedistribute6(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/redistribute6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterBgpVrf API operation for FortiManager Device creates a new BgpVrf.
// Returns the index value of the BgpVrf and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp vrf chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterBgpVrf(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/vrf"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterBgpVrf API operation for FortiManager Device updates the specified BgpVrf.
// Returns the index value of the BgpVrf and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp vrf chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBgpVrf(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/vrf"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBgpVrf API operation for FortiManager Device deletes the specified BgpVrf.
// Returns error for service API and SDK errors.
// See the device - router bgp vrf chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBgpVrf(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/vrf"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterBgpVrf API operation for FortiManager Device gets the BgpVrf
// with the specified index value.
// Returns the requested BgpVrf value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp vrf chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBgpVrf(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/vrf"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterBgpVrf6 API operation for FortiManager Device creates a new BgpVrf6.
// Returns the index value of the BgpVrf6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp vrf6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterBgpVrf6(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/vrf6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterBgpVrf6 API operation for FortiManager Device updates the specified BgpVrf6.
// Returns the index value of the BgpVrf6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp vrf6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterBgpVrf6(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/vrf6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterBgpVrf6 API operation for FortiManager Device deletes the specified BgpVrf6.
// Returns error for service API and SDK errors.
// See the device - router bgp vrf6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterBgpVrf6(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/vrf6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterBgpVrf6 API operation for FortiManager Device gets the BgpVrf6
// with the specified index value.
// Returns the requested BgpVrf6 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router bgp vrf6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterBgpVrf6(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/bgp/vrf6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterExtcommunityList API operation for FortiManager Device creates a new Extcommunity List.
// Returns the index value of the Extcommunity List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router extcommunity-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterExtcommunityList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/extcommunity-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterExtcommunityList API operation for FortiManager Device updates the specified Extcommunity List.
// Returns the index value of the Extcommunity List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router extcommunity-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterExtcommunityList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/extcommunity-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterExtcommunityList API operation for FortiManager Device deletes the specified Extcommunity List.
// Returns error for service API and SDK errors.
// See the device - router extcommunity-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterExtcommunityList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/extcommunity-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterExtcommunityList API operation for FortiManager Device gets the Extcommunity List
// with the specified index value.
// Returns the requested Extcommunity List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router extcommunity-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterExtcommunityList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/extcommunity-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterExtcommunityListRule API operation for FortiManager Device creates a new Extcommunity ListRule.
// Returns the index value of the Extcommunity ListRule and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router extcommunity-list rule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterExtcommunityListRule(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/extcommunity-list/{extcommunity-list}/rule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterExtcommunityListRule API operation for FortiManager Device updates the specified Extcommunity ListRule.
// Returns the index value of the Extcommunity ListRule and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router extcommunity-list rule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterExtcommunityListRule(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/extcommunity-list/{extcommunity-list}/rule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterExtcommunityListRule API operation for FortiManager Device deletes the specified Extcommunity ListRule.
// Returns error for service API and SDK errors.
// See the device - router extcommunity-list rule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterExtcommunityListRule(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/extcommunity-list/{extcommunity-list}/rule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterExtcommunityListRule API operation for FortiManager Device gets the Extcommunity ListRule
// with the specified index value.
// Returns the requested Extcommunity ListRule value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router extcommunity-list rule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterExtcommunityListRule(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/extcommunity-list/{extcommunity-list}/rule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterIsis API operation for FortiManager Device updates the specified Isis.
// Returns the index value of the Isis and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router isis chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterIsis(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterIsis API operation for FortiManager Device deletes the specified Isis.
// Returns error for service API and SDK errors.
// See the device - router isis chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterIsis(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - isis
	return
}

// ReadRouterIsis API operation for FortiManager Device gets the Isis
// with the specified index value.
// Returns the requested Isis value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router isis chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterIsis(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterIsisIsisInterface API operation for FortiManager Device creates a new IsisIsis Interface.
// Returns the index value of the IsisIsis Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router isis isis-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterIsisIsisInterface(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/isis-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterIsisIsisInterface API operation for FortiManager Device updates the specified IsisIsis Interface.
// Returns the index value of the IsisIsis Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router isis isis-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterIsisIsisInterface(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/isis-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterIsisIsisInterface API operation for FortiManager Device deletes the specified IsisIsis Interface.
// Returns error for service API and SDK errors.
// See the device - router isis isis-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterIsisIsisInterface(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/isis-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterIsisIsisInterface API operation for FortiManager Device gets the IsisIsis Interface
// with the specified index value.
// Returns the requested IsisIsis Interface value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router isis isis-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterIsisIsisInterface(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/isis-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterIsisIsisNet API operation for FortiManager Device creates a new IsisIsis Net.
// Returns the index value of the IsisIsis Net and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router isis isis-net chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterIsisIsisNet(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/isis-net"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterIsisIsisNet API operation for FortiManager Device updates the specified IsisIsis Net.
// Returns the index value of the IsisIsis Net and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router isis isis-net chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterIsisIsisNet(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/isis-net"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterIsisIsisNet API operation for FortiManager Device deletes the specified IsisIsis Net.
// Returns error for service API and SDK errors.
// See the device - router isis isis-net chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterIsisIsisNet(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/isis-net"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterIsisIsisNet API operation for FortiManager Device gets the IsisIsis Net
// with the specified index value.
// Returns the requested IsisIsis Net value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router isis isis-net chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterIsisIsisNet(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/isis-net"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterIsisRedistribute API operation for FortiManager Device updates the specified IsisRedistribute.
// Returns the index value of the IsisRedistribute and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router isis redistribute chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterIsisRedistribute(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/redistribute"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterIsisRedistribute API operation for FortiManager Device deletes the specified IsisRedistribute.
// Returns error for service API and SDK errors.
// See the device - router isis redistribute chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterIsisRedistribute(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - isis redistribute
	return
}

// ReadRouterIsisRedistribute API operation for FortiManager Device gets the IsisRedistribute
// with the specified index value.
// Returns the requested IsisRedistribute value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router isis redistribute chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterIsisRedistribute(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/redistribute"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterIsisRedistribute6 API operation for FortiManager Device updates the specified IsisRedistribute6.
// Returns the index value of the IsisRedistribute6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router isis redistribute6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterIsisRedistribute6(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/redistribute6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterIsisRedistribute6 API operation for FortiManager Device deletes the specified IsisRedistribute6.
// Returns error for service API and SDK errors.
// See the device - router isis redistribute6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterIsisRedistribute6(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - isis redistribute6
	return
}

// ReadRouterIsisRedistribute6 API operation for FortiManager Device gets the IsisRedistribute6
// with the specified index value.
// Returns the requested IsisRedistribute6 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router isis redistribute6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterIsisRedistribute6(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/redistribute6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterIsisSummaryAddress API operation for FortiManager Device creates a new IsisSummary Address.
// Returns the index value of the IsisSummary Address and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router isis summary-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterIsisSummaryAddress(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/summary-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterIsisSummaryAddress API operation for FortiManager Device updates the specified IsisSummary Address.
// Returns the index value of the IsisSummary Address and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router isis summary-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterIsisSummaryAddress(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/summary-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterIsisSummaryAddress API operation for FortiManager Device deletes the specified IsisSummary Address.
// Returns error for service API and SDK errors.
// See the device - router isis summary-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterIsisSummaryAddress(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/summary-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterIsisSummaryAddress API operation for FortiManager Device gets the IsisSummary Address
// with the specified index value.
// Returns the requested IsisSummary Address value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router isis summary-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterIsisSummaryAddress(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/summary-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterIsisSummaryAddress6 API operation for FortiManager Device creates a new IsisSummary Address6.
// Returns the index value of the IsisSummary Address6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router isis summary-address6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterIsisSummaryAddress6(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/summary-address6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterIsisSummaryAddress6 API operation for FortiManager Device updates the specified IsisSummary Address6.
// Returns the index value of the IsisSummary Address6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router isis summary-address6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterIsisSummaryAddress6(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/summary-address6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterIsisSummaryAddress6 API operation for FortiManager Device deletes the specified IsisSummary Address6.
// Returns error for service API and SDK errors.
// See the device - router isis summary-address6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterIsisSummaryAddress6(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/summary-address6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterIsisSummaryAddress6 API operation for FortiManager Device gets the IsisSummary Address6
// with the specified index value.
// Returns the requested IsisSummary Address6 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router isis summary-address6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterIsisSummaryAddress6(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/isis/summary-address6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterKeyChain API operation for FortiManager Device creates a new Key Chain.
// Returns the index value of the Key Chain and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router key-chain chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterKeyChain(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/key-chain"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterKeyChain API operation for FortiManager Device updates the specified Key Chain.
// Returns the index value of the Key Chain and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router key-chain chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterKeyChain(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/key-chain"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterKeyChain API operation for FortiManager Device deletes the specified Key Chain.
// Returns error for service API and SDK errors.
// See the device - router key-chain chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterKeyChain(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/key-chain"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterKeyChain API operation for FortiManager Device gets the Key Chain
// with the specified index value.
// Returns the requested Key Chain value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router key-chain chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterKeyChain(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/key-chain"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterMulticast API operation for FortiManager Device updates the specified Multicast.
// Returns the index value of the Multicast and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterMulticast(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterMulticast API operation for FortiManager Device deletes the specified Multicast.
// Returns error for service API and SDK errors.
// See the device - router multicast chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterMulticast(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - multicast
	return
}

// ReadRouterMulticast API operation for FortiManager Device gets the Multicast
// with the specified index value.
// Returns the requested Multicast value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterMulticast(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterMulticastFlow API operation for FortiManager Device creates a new Multicast Flow.
// Returns the index value of the Multicast Flow and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast-flow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterMulticastFlow(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast-flow"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterMulticastFlow API operation for FortiManager Device updates the specified Multicast Flow.
// Returns the index value of the Multicast Flow and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast-flow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterMulticastFlow(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast-flow"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterMulticastFlow API operation for FortiManager Device deletes the specified Multicast Flow.
// Returns error for service API and SDK errors.
// See the device - router multicast-flow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterMulticastFlow(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast-flow"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterMulticastFlow API operation for FortiManager Device gets the Multicast Flow
// with the specified index value.
// Returns the requested Multicast Flow value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast-flow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterMulticastFlow(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast-flow"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterMulticastFlowFlows API operation for FortiManager Device creates a new Multicast FlowFlows.
// Returns the index value of the Multicast FlowFlows and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast-flow flows chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterMulticastFlowFlows(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast-flow/{multicast-flow}/flows"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterMulticastFlowFlows API operation for FortiManager Device updates the specified Multicast FlowFlows.
// Returns the index value of the Multicast FlowFlows and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast-flow flows chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterMulticastFlowFlows(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast-flow/{multicast-flow}/flows"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterMulticastFlowFlows API operation for FortiManager Device deletes the specified Multicast FlowFlows.
// Returns error for service API and SDK errors.
// See the device - router multicast-flow flows chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterMulticastFlowFlows(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast-flow/{multicast-flow}/flows"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterMulticastFlowFlows API operation for FortiManager Device gets the Multicast FlowFlows
// with the specified index value.
// Returns the requested Multicast FlowFlows value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast-flow flows chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterMulticastFlowFlows(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast-flow/{multicast-flow}/flows"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterMulticast6 API operation for FortiManager Device updates the specified Multicast6.
// Returns the index value of the Multicast6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterMulticast6(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterMulticast6 API operation for FortiManager Device deletes the specified Multicast6.
// Returns error for service API and SDK errors.
// See the device - router multicast6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterMulticast6(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - multicast6
	return
}

// ReadRouterMulticast6 API operation for FortiManager Device gets the Multicast6
// with the specified index value.
// Returns the requested Multicast6 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterMulticast6(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterMulticast6Interface API operation for FortiManager Device creates a new Multicast6Interface.
// Returns the index value of the Multicast6Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast6 interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterMulticast6Interface(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast6/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterMulticast6Interface API operation for FortiManager Device updates the specified Multicast6Interface.
// Returns the index value of the Multicast6Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast6 interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterMulticast6Interface(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast6/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterMulticast6Interface API operation for FortiManager Device deletes the specified Multicast6Interface.
// Returns error for service API and SDK errors.
// See the device - router multicast6 interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterMulticast6Interface(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast6/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterMulticast6Interface API operation for FortiManager Device gets the Multicast6Interface
// with the specified index value.
// Returns the requested Multicast6Interface value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast6 interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterMulticast6Interface(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast6/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterMulticast6PimSmGlobal API operation for FortiManager Device updates the specified Multicast6Pim Sm Global.
// Returns the index value of the Multicast6Pim Sm Global and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast6 pim-sm-global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterMulticast6PimSmGlobal(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast6/pim-sm-global"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterMulticast6PimSmGlobal API operation for FortiManager Device deletes the specified Multicast6Pim Sm Global.
// Returns error for service API and SDK errors.
// See the device - router multicast6 pim-sm-global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterMulticast6PimSmGlobal(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - multicast6 pim-sm-global
	return
}

// ReadRouterMulticast6PimSmGlobal API operation for FortiManager Device gets the Multicast6Pim Sm Global
// with the specified index value.
// Returns the requested Multicast6Pim Sm Global value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast6 pim-sm-global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterMulticast6PimSmGlobal(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast6/pim-sm-global"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterMulticast6PimSmGlobalRpAddress API operation for FortiManager Device creates a new Multicast6Pim Sm GlobalRp Address.
// Returns the index value of the Multicast6Pim Sm GlobalRp Address and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast6 pim-sm-global rp-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterMulticast6PimSmGlobalRpAddress(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast6/pim-sm-global/rp-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterMulticast6PimSmGlobalRpAddress API operation for FortiManager Device updates the specified Multicast6Pim Sm GlobalRp Address.
// Returns the index value of the Multicast6Pim Sm GlobalRp Address and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast6 pim-sm-global rp-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterMulticast6PimSmGlobalRpAddress(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast6/pim-sm-global/rp-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterMulticast6PimSmGlobalRpAddress API operation for FortiManager Device deletes the specified Multicast6Pim Sm GlobalRp Address.
// Returns error for service API and SDK errors.
// See the device - router multicast6 pim-sm-global rp-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterMulticast6PimSmGlobalRpAddress(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast6/pim-sm-global/rp-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterMulticast6PimSmGlobalRpAddress API operation for FortiManager Device gets the Multicast6Pim Sm GlobalRp Address
// with the specified index value.
// Returns the requested Multicast6Pim Sm GlobalRp Address value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast6 pim-sm-global rp-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterMulticast6PimSmGlobalRpAddress(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast6/pim-sm-global/rp-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterMulticastInterface API operation for FortiManager Device creates a new MulticastInterface.
// Returns the index value of the MulticastInterface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterMulticastInterface(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterMulticastInterface API operation for FortiManager Device updates the specified MulticastInterface.
// Returns the index value of the MulticastInterface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterMulticastInterface(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterMulticastInterface API operation for FortiManager Device deletes the specified MulticastInterface.
// Returns error for service API and SDK errors.
// See the device - router multicast interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterMulticastInterface(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterMulticastInterface API operation for FortiManager Device gets the MulticastInterface
// with the specified index value.
// Returns the requested MulticastInterface value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterMulticastInterface(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterMulticastInterfaceIgmp API operation for FortiManager Device updates the specified MulticastInterfaceIgmp.
// Returns the index value of the MulticastInterfaceIgmp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast interface igmp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterMulticastInterfaceIgmp(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast/interface/{interface}/igmp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterMulticastInterfaceIgmp API operation for FortiManager Device deletes the specified MulticastInterfaceIgmp.
// Returns error for service API and SDK errors.
// See the device - router multicast interface igmp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterMulticastInterfaceIgmp(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - multicast interface igmp
	return
}

// ReadRouterMulticastInterfaceIgmp API operation for FortiManager Device gets the MulticastInterfaceIgmp
// with the specified index value.
// Returns the requested MulticastInterfaceIgmp value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast interface igmp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterMulticastInterfaceIgmp(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast/interface/{interface}/igmp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterMulticastInterfaceJoinGroup API operation for FortiManager Device creates a new MulticastInterfaceJoin Group.
// Returns the index value of the MulticastInterfaceJoin Group and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast interface join-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterMulticastInterfaceJoinGroup(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast/interface/{interface}/join-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterMulticastInterfaceJoinGroup API operation for FortiManager Device updates the specified MulticastInterfaceJoin Group.
// Returns the index value of the MulticastInterfaceJoin Group and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast interface join-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterMulticastInterfaceJoinGroup(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast/interface/{interface}/join-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterMulticastInterfaceJoinGroup API operation for FortiManager Device deletes the specified MulticastInterfaceJoin Group.
// Returns error for service API and SDK errors.
// See the device - router multicast interface join-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterMulticastInterfaceJoinGroup(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast/interface/{interface}/join-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterMulticastInterfaceJoinGroup API operation for FortiManager Device gets the MulticastInterfaceJoin Group
// with the specified index value.
// Returns the requested MulticastInterfaceJoin Group value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast interface join-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterMulticastInterfaceJoinGroup(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast/interface/{interface}/join-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterMulticastPimSmGlobal API operation for FortiManager Device updates the specified MulticastPim Sm Global.
// Returns the index value of the MulticastPim Sm Global and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast pim-sm-global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterMulticastPimSmGlobal(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast/pim-sm-global"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterMulticastPimSmGlobal API operation for FortiManager Device deletes the specified MulticastPim Sm Global.
// Returns error for service API and SDK errors.
// See the device - router multicast pim-sm-global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterMulticastPimSmGlobal(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - multicast pim-sm-global
	return
}

// ReadRouterMulticastPimSmGlobal API operation for FortiManager Device gets the MulticastPim Sm Global
// with the specified index value.
// Returns the requested MulticastPim Sm Global value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast pim-sm-global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterMulticastPimSmGlobal(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast/pim-sm-global"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterMulticastPimSmGlobalRpAddress API operation for FortiManager Device creates a new MulticastPim Sm GlobalRp Address.
// Returns the index value of the MulticastPim Sm GlobalRp Address and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast pim-sm-global rp-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterMulticastPimSmGlobalRpAddress(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast/pim-sm-global/rp-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterMulticastPimSmGlobalRpAddress API operation for FortiManager Device updates the specified MulticastPim Sm GlobalRp Address.
// Returns the index value of the MulticastPim Sm GlobalRp Address and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast pim-sm-global rp-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterMulticastPimSmGlobalRpAddress(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast/pim-sm-global/rp-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterMulticastPimSmGlobalRpAddress API operation for FortiManager Device deletes the specified MulticastPim Sm GlobalRp Address.
// Returns error for service API and SDK errors.
// See the device - router multicast pim-sm-global rp-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterMulticastPimSmGlobalRpAddress(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast/pim-sm-global/rp-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterMulticastPimSmGlobalRpAddress API operation for FortiManager Device gets the MulticastPim Sm GlobalRp Address
// with the specified index value.
// Returns the requested MulticastPim Sm GlobalRp Address value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router multicast pim-sm-global rp-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterMulticastPimSmGlobalRpAddress(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/multicast/pim-sm-global/rp-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterOspf API operation for FortiManager Device updates the specified Ospf.
// Returns the index value of the Ospf and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspf(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspf API operation for FortiManager Device deletes the specified Ospf.
// Returns error for service API and SDK errors.
// See the device - router ospf chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspf(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - ospf
	return
}

// ReadRouterOspf API operation for FortiManager Device gets the Ospf
// with the specified index value.
// Returns the requested Ospf value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspf(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterOspf6 API operation for FortiManager Device updates the specified Ospf6.
// Returns the index value of the Ospf6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspf6(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspf6 API operation for FortiManager Device deletes the specified Ospf6.
// Returns error for service API and SDK errors.
// See the device - router ospf6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspf6(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - ospf6
	return
}

// ReadRouterOspf6 API operation for FortiManager Device gets the Ospf6
// with the specified index value.
// Returns the requested Ospf6 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspf6(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterOspf6Area API operation for FortiManager Device creates a new Ospf6Area.
// Returns the index value of the Ospf6Area and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterOspf6Area(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterOspf6Area API operation for FortiManager Device updates the specified Ospf6Area.
// Returns the index value of the Ospf6Area and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspf6Area(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspf6Area API operation for FortiManager Device deletes the specified Ospf6Area.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspf6Area(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterOspf6Area API operation for FortiManager Device gets the Ospf6Area
// with the specified index value.
// Returns the requested Ospf6Area value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspf6Area(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterOspf6AreaIpsecKeys API operation for FortiManager Device creates a new Ospf6AreaIpsec Keys.
// Returns the index value of the Ospf6AreaIpsec Keys and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area ipsec-keys chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterOspf6AreaIpsecKeys(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area/{area}/ipsec-keys"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterOspf6AreaIpsecKeys API operation for FortiManager Device updates the specified Ospf6AreaIpsec Keys.
// Returns the index value of the Ospf6AreaIpsec Keys and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area ipsec-keys chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspf6AreaIpsecKeys(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area/{area}/ipsec-keys"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspf6AreaIpsecKeys API operation for FortiManager Device deletes the specified Ospf6AreaIpsec Keys.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area ipsec-keys chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspf6AreaIpsecKeys(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area/{area}/ipsec-keys"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterOspf6AreaIpsecKeys API operation for FortiManager Device gets the Ospf6AreaIpsec Keys
// with the specified index value.
// Returns the requested Ospf6AreaIpsec Keys value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area ipsec-keys chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspf6AreaIpsecKeys(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area/{area}/ipsec-keys"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterOspf6AreaRange API operation for FortiManager Device creates a new Ospf6AreaRange.
// Returns the index value of the Ospf6AreaRange and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterOspf6AreaRange(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area/{area}/range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterOspf6AreaRange API operation for FortiManager Device updates the specified Ospf6AreaRange.
// Returns the index value of the Ospf6AreaRange and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspf6AreaRange(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area/{area}/range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspf6AreaRange API operation for FortiManager Device deletes the specified Ospf6AreaRange.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspf6AreaRange(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area/{area}/range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterOspf6AreaRange API operation for FortiManager Device gets the Ospf6AreaRange
// with the specified index value.
// Returns the requested Ospf6AreaRange value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspf6AreaRange(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area/{area}/range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterOspf6AreaVirtualLink API operation for FortiManager Device creates a new Ospf6AreaVirtual Link.
// Returns the index value of the Ospf6AreaVirtual Link and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area virtual-link chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterOspf6AreaVirtualLink(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area/{area}/virtual-link"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterOspf6AreaVirtualLink API operation for FortiManager Device updates the specified Ospf6AreaVirtual Link.
// Returns the index value of the Ospf6AreaVirtual Link and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area virtual-link chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspf6AreaVirtualLink(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area/{area}/virtual-link"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspf6AreaVirtualLink API operation for FortiManager Device deletes the specified Ospf6AreaVirtual Link.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area virtual-link chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspf6AreaVirtualLink(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area/{area}/virtual-link"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterOspf6AreaVirtualLink API operation for FortiManager Device gets the Ospf6AreaVirtual Link
// with the specified index value.
// Returns the requested Ospf6AreaVirtual Link value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area virtual-link chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspf6AreaVirtualLink(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area/{area}/virtual-link"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterOspf6AreaVirtualLinkIpsecKeys API operation for FortiManager Device creates a new Ospf6AreaVirtual LinkIpsec Keys.
// Returns the index value of the Ospf6AreaVirtual LinkIpsec Keys and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area virtual-link ipsec-keys chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterOspf6AreaVirtualLinkIpsecKeys(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area/{area}/virtual-link/{virtual-link}/ipsec-keys"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterOspf6AreaVirtualLinkIpsecKeys API operation for FortiManager Device updates the specified Ospf6AreaVirtual LinkIpsec Keys.
// Returns the index value of the Ospf6AreaVirtual LinkIpsec Keys and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area virtual-link ipsec-keys chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspf6AreaVirtualLinkIpsecKeys(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area/{area}/virtual-link/{virtual-link}/ipsec-keys"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspf6AreaVirtualLinkIpsecKeys API operation for FortiManager Device deletes the specified Ospf6AreaVirtual LinkIpsec Keys.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area virtual-link ipsec-keys chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspf6AreaVirtualLinkIpsecKeys(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area/{area}/virtual-link/{virtual-link}/ipsec-keys"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterOspf6AreaVirtualLinkIpsecKeys API operation for FortiManager Device gets the Ospf6AreaVirtual LinkIpsec Keys
// with the specified index value.
// Returns the requested Ospf6AreaVirtual LinkIpsec Keys value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 area virtual-link ipsec-keys chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspf6AreaVirtualLinkIpsecKeys(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/area/{area}/virtual-link/{virtual-link}/ipsec-keys"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterOspf6Ospf6Interface API operation for FortiManager Device creates a new Ospf6Ospf6 Interface.
// Returns the index value of the Ospf6Ospf6 Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 ospf6-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterOspf6Ospf6Interface(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/ospf6-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterOspf6Ospf6Interface API operation for FortiManager Device updates the specified Ospf6Ospf6 Interface.
// Returns the index value of the Ospf6Ospf6 Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 ospf6-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspf6Ospf6Interface(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/ospf6-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspf6Ospf6Interface API operation for FortiManager Device deletes the specified Ospf6Ospf6 Interface.
// Returns error for service API and SDK errors.
// See the device - router ospf6 ospf6-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspf6Ospf6Interface(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/ospf6-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterOspf6Ospf6Interface API operation for FortiManager Device gets the Ospf6Ospf6 Interface
// with the specified index value.
// Returns the requested Ospf6Ospf6 Interface value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 ospf6-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspf6Ospf6Interface(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/ospf6-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterOspf6Ospf6InterfaceIpsecKeys API operation for FortiManager Device creates a new Ospf6Ospf6 InterfaceIpsec Keys.
// Returns the index value of the Ospf6Ospf6 InterfaceIpsec Keys and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 ospf6-interface ipsec-keys chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterOspf6Ospf6InterfaceIpsecKeys(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/ospf6-interface/{ospf6-interface}/ipsec-keys"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterOspf6Ospf6InterfaceIpsecKeys API operation for FortiManager Device updates the specified Ospf6Ospf6 InterfaceIpsec Keys.
// Returns the index value of the Ospf6Ospf6 InterfaceIpsec Keys and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 ospf6-interface ipsec-keys chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspf6Ospf6InterfaceIpsecKeys(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/ospf6-interface/{ospf6-interface}/ipsec-keys"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspf6Ospf6InterfaceIpsecKeys API operation for FortiManager Device deletes the specified Ospf6Ospf6 InterfaceIpsec Keys.
// Returns error for service API and SDK errors.
// See the device - router ospf6 ospf6-interface ipsec-keys chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspf6Ospf6InterfaceIpsecKeys(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/ospf6-interface/{ospf6-interface}/ipsec-keys"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterOspf6Ospf6InterfaceIpsecKeys API operation for FortiManager Device gets the Ospf6Ospf6 InterfaceIpsec Keys
// with the specified index value.
// Returns the requested Ospf6Ospf6 InterfaceIpsec Keys value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 ospf6-interface ipsec-keys chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspf6Ospf6InterfaceIpsecKeys(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/ospf6-interface/{ospf6-interface}/ipsec-keys"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterOspf6Ospf6InterfaceNeighbor API operation for FortiManager Device creates a new Ospf6Ospf6 InterfaceNeighbor.
// Returns the index value of the Ospf6Ospf6 InterfaceNeighbor and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 ospf6-interface neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterOspf6Ospf6InterfaceNeighbor(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/ospf6-interface/{ospf6-interface}/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterOspf6Ospf6InterfaceNeighbor API operation for FortiManager Device updates the specified Ospf6Ospf6 InterfaceNeighbor.
// Returns the index value of the Ospf6Ospf6 InterfaceNeighbor and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 ospf6-interface neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspf6Ospf6InterfaceNeighbor(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/ospf6-interface/{ospf6-interface}/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspf6Ospf6InterfaceNeighbor API operation for FortiManager Device deletes the specified Ospf6Ospf6 InterfaceNeighbor.
// Returns error for service API and SDK errors.
// See the device - router ospf6 ospf6-interface neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspf6Ospf6InterfaceNeighbor(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/ospf6-interface/{ospf6-interface}/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterOspf6Ospf6InterfaceNeighbor API operation for FortiManager Device gets the Ospf6Ospf6 InterfaceNeighbor
// with the specified index value.
// Returns the requested Ospf6Ospf6 InterfaceNeighbor value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 ospf6-interface neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspf6Ospf6InterfaceNeighbor(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/ospf6-interface/{ospf6-interface}/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterOspf6Redistribute API operation for FortiManager Device updates the specified Ospf6Redistribute.
// Returns the index value of the Ospf6Redistribute and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 redistribute chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspf6Redistribute(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/redistribute"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspf6Redistribute API operation for FortiManager Device deletes the specified Ospf6Redistribute.
// Returns error for service API and SDK errors.
// See the device - router ospf6 redistribute chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspf6Redistribute(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - ospf6 redistribute
	return
}

// ReadRouterOspf6Redistribute API operation for FortiManager Device gets the Ospf6Redistribute
// with the specified index value.
// Returns the requested Ospf6Redistribute value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 redistribute chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspf6Redistribute(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/redistribute"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterOspf6SummaryAddress API operation for FortiManager Device creates a new Ospf6Summary Address.
// Returns the index value of the Ospf6Summary Address and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 summary-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterOspf6SummaryAddress(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/summary-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterOspf6SummaryAddress API operation for FortiManager Device updates the specified Ospf6Summary Address.
// Returns the index value of the Ospf6Summary Address and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 summary-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspf6SummaryAddress(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/summary-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspf6SummaryAddress API operation for FortiManager Device deletes the specified Ospf6Summary Address.
// Returns error for service API and SDK errors.
// See the device - router ospf6 summary-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspf6SummaryAddress(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/summary-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterOspf6SummaryAddress API operation for FortiManager Device gets the Ospf6Summary Address
// with the specified index value.
// Returns the requested Ospf6Summary Address value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf6 summary-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspf6SummaryAddress(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf6/summary-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterOspfArea API operation for FortiManager Device creates a new OspfArea.
// Returns the index value of the OspfArea and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf area chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterOspfArea(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/area"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterOspfArea API operation for FortiManager Device updates the specified OspfArea.
// Returns the index value of the OspfArea and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf area chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspfArea(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/area"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspfArea API operation for FortiManager Device deletes the specified OspfArea.
// Returns error for service API and SDK errors.
// See the device - router ospf area chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspfArea(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/area"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterOspfArea API operation for FortiManager Device gets the OspfArea
// with the specified index value.
// Returns the requested OspfArea value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf area chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspfArea(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/area"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterOspfAreaRange API operation for FortiManager Device creates a new OspfAreaRange.
// Returns the index value of the OspfAreaRange and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf area range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterOspfAreaRange(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/area/{area}/range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterOspfAreaRange API operation for FortiManager Device updates the specified OspfAreaRange.
// Returns the index value of the OspfAreaRange and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf area range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspfAreaRange(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/area/{area}/range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspfAreaRange API operation for FortiManager Device deletes the specified OspfAreaRange.
// Returns error for service API and SDK errors.
// See the device - router ospf area range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspfAreaRange(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/area/{area}/range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterOspfAreaRange API operation for FortiManager Device gets the OspfAreaRange
// with the specified index value.
// Returns the requested OspfAreaRange value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf area range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspfAreaRange(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/area/{area}/range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterOspfAreaVirtualLink API operation for FortiManager Device creates a new OspfAreaVirtual Link.
// Returns the index value of the OspfAreaVirtual Link and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf area virtual-link chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterOspfAreaVirtualLink(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/area/{area}/virtual-link"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterOspfAreaVirtualLink API operation for FortiManager Device updates the specified OspfAreaVirtual Link.
// Returns the index value of the OspfAreaVirtual Link and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf area virtual-link chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspfAreaVirtualLink(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/area/{area}/virtual-link"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspfAreaVirtualLink API operation for FortiManager Device deletes the specified OspfAreaVirtual Link.
// Returns error for service API and SDK errors.
// See the device - router ospf area virtual-link chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspfAreaVirtualLink(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/area/{area}/virtual-link"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterOspfAreaVirtualLink API operation for FortiManager Device gets the OspfAreaVirtual Link
// with the specified index value.
// Returns the requested OspfAreaVirtual Link value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf area virtual-link chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspfAreaVirtualLink(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/area/{area}/virtual-link"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterOspfAreaVirtualLinkMd5Keys API operation for FortiManager Device creates a new OspfAreaVirtual LinkMd5 Keys.
// Returns the index value of the OspfAreaVirtual LinkMd5 Keys and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf area virtual-link md5-keys chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterOspfAreaVirtualLinkMd5Keys(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/area/{area}/virtual-link/{virtual-link}/md5-keys"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterOspfAreaVirtualLinkMd5Keys API operation for FortiManager Device updates the specified OspfAreaVirtual LinkMd5 Keys.
// Returns the index value of the OspfAreaVirtual LinkMd5 Keys and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf area virtual-link md5-keys chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspfAreaVirtualLinkMd5Keys(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/area/{area}/virtual-link/{virtual-link}/md5-keys"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspfAreaVirtualLinkMd5Keys API operation for FortiManager Device deletes the specified OspfAreaVirtual LinkMd5 Keys.
// Returns error for service API and SDK errors.
// See the device - router ospf area virtual-link md5-keys chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspfAreaVirtualLinkMd5Keys(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/area/{area}/virtual-link/{virtual-link}/md5-keys"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterOspfAreaVirtualLinkMd5Keys API operation for FortiManager Device gets the OspfAreaVirtual LinkMd5 Keys
// with the specified index value.
// Returns the requested OspfAreaVirtual LinkMd5 Keys value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf area virtual-link md5-keys chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspfAreaVirtualLinkMd5Keys(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/area/{area}/virtual-link/{virtual-link}/md5-keys"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterOspfDistributeList API operation for FortiManager Device creates a new OspfDistribute List.
// Returns the index value of the OspfDistribute List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf distribute-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterOspfDistributeList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/distribute-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterOspfDistributeList API operation for FortiManager Device updates the specified OspfDistribute List.
// Returns the index value of the OspfDistribute List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf distribute-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspfDistributeList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/distribute-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspfDistributeList API operation for FortiManager Device deletes the specified OspfDistribute List.
// Returns error for service API and SDK errors.
// See the device - router ospf distribute-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspfDistributeList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/distribute-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterOspfDistributeList API operation for FortiManager Device gets the OspfDistribute List
// with the specified index value.
// Returns the requested OspfDistribute List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf distribute-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspfDistributeList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/distribute-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterOspfNeighbor API operation for FortiManager Device creates a new OspfNeighbor.
// Returns the index value of the OspfNeighbor and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterOspfNeighbor(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterOspfNeighbor API operation for FortiManager Device updates the specified OspfNeighbor.
// Returns the index value of the OspfNeighbor and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspfNeighbor(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspfNeighbor API operation for FortiManager Device deletes the specified OspfNeighbor.
// Returns error for service API and SDK errors.
// See the device - router ospf neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspfNeighbor(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterOspfNeighbor API operation for FortiManager Device gets the OspfNeighbor
// with the specified index value.
// Returns the requested OspfNeighbor value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspfNeighbor(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterOspfOspfInterface API operation for FortiManager Device creates a new OspfOspf Interface.
// Returns the index value of the OspfOspf Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf ospf-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterOspfOspfInterface(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/ospf-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterOspfOspfInterface API operation for FortiManager Device updates the specified OspfOspf Interface.
// Returns the index value of the OspfOspf Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf ospf-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspfOspfInterface(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/ospf-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspfOspfInterface API operation for FortiManager Device deletes the specified OspfOspf Interface.
// Returns error for service API and SDK errors.
// See the device - router ospf ospf-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspfOspfInterface(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/ospf-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterOspfOspfInterface API operation for FortiManager Device gets the OspfOspf Interface
// with the specified index value.
// Returns the requested OspfOspf Interface value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf ospf-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspfOspfInterface(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/ospf-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterOspfRedistribute API operation for FortiManager Device updates the specified OspfRedistribute.
// Returns the index value of the OspfRedistribute and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf redistribute chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspfRedistribute(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/redistribute"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspfRedistribute API operation for FortiManager Device deletes the specified OspfRedistribute.
// Returns error for service API and SDK errors.
// See the device - router ospf redistribute chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspfRedistribute(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - ospf redistribute
	return
}

// ReadRouterOspfRedistribute API operation for FortiManager Device gets the OspfRedistribute
// with the specified index value.
// Returns the requested OspfRedistribute value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf redistribute chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspfRedistribute(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/redistribute"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterOspfSummaryAddress API operation for FortiManager Device creates a new OspfSummary Address.
// Returns the index value of the OspfSummary Address and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf summary-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterOspfSummaryAddress(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/summary-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterOspfSummaryAddress API operation for FortiManager Device updates the specified OspfSummary Address.
// Returns the index value of the OspfSummary Address and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf summary-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterOspfSummaryAddress(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/summary-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterOspfSummaryAddress API operation for FortiManager Device deletes the specified OspfSummary Address.
// Returns error for service API and SDK errors.
// See the device - router ospf summary-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterOspfSummaryAddress(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/summary-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterOspfSummaryAddress API operation for FortiManager Device gets the OspfSummary Address
// with the specified index value.
// Returns the requested OspfSummary Address value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ospf summary-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterOspfSummaryAddress(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ospf/summary-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterPolicy API operation for FortiManager Device creates a new Policy.
// Returns the index value of the Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterPolicy(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterPolicy API operation for FortiManager Device updates the specified Policy.
// Returns the index value of the Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterPolicy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterPolicy API operation for FortiManager Device deletes the specified Policy.
// Returns error for service API and SDK errors.
// See the device - router policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterPolicy(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterPolicy API operation for FortiManager Device gets the Policy
// with the specified index value.
// Returns the requested Policy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterPolicy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterPolicy6 API operation for FortiManager Device creates a new Policy6.
// Returns the index value of the Policy6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router policy6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterPolicy6(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/policy6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterPolicy6 API operation for FortiManager Device updates the specified Policy6.
// Returns the index value of the Policy6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router policy6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterPolicy6(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/policy6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterPolicy6 API operation for FortiManager Device deletes the specified Policy6.
// Returns error for service API and SDK errors.
// See the device - router policy6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterPolicy6(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/policy6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterPolicy6 API operation for FortiManager Device gets the Policy6
// with the specified index value.
// Returns the requested Policy6 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router policy6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterPolicy6(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/policy6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterPolicy6Move API operation for FortiManager Device updates the specified Policy6Move.
// Returns the index value of the Policy6Move and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router policy6 move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterPolicy6Move(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/policy6/{policy6}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadRouterPolicy6Move API operation for FortiManager Device gets the Policy6Move
// with the specified index value.
// Returns the requested Policy6Move value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router policy6 move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterPolicy6Move(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/policy6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"seq-num"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// UpdateRouterPolicyMove API operation for FortiManager Device updates the specified PolicyMove.
// Returns the index value of the PolicyMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router policy move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterPolicyMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/policy/{policy}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadRouterPolicyMove API operation for FortiManager Device gets the PolicyMove
// with the specified index value.
// Returns the requested PolicyMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router policy move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterPolicyMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"seq-num"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// UpdateRouterRip API operation for FortiManager Device updates the specified Rip.
// Returns the index value of the Rip and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterRip(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterRip API operation for FortiManager Device deletes the specified Rip.
// Returns error for service API and SDK errors.
// See the device - router rip chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterRip(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - rip
	return
}

// ReadRouterRip API operation for FortiManager Device gets the Rip
// with the specified index value.
// Returns the requested Rip value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterRip(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterRipDistance API operation for FortiManager Device creates a new RipDistance.
// Returns the index value of the RipDistance and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip distance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterRipDistance(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/distance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterRipDistance API operation for FortiManager Device updates the specified RipDistance.
// Returns the index value of the RipDistance and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip distance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterRipDistance(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/distance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterRipDistance API operation for FortiManager Device deletes the specified RipDistance.
// Returns error for service API and SDK errors.
// See the device - router rip distance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterRipDistance(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/distance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterRipDistance API operation for FortiManager Device gets the RipDistance
// with the specified index value.
// Returns the requested RipDistance value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip distance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterRipDistance(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/distance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterRipInterface API operation for FortiManager Device creates a new RipInterface.
// Returns the index value of the RipInterface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterRipInterface(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterRipInterface API operation for FortiManager Device updates the specified RipInterface.
// Returns the index value of the RipInterface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterRipInterface(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterRipInterface API operation for FortiManager Device deletes the specified RipInterface.
// Returns error for service API and SDK errors.
// See the device - router rip interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterRipInterface(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterRipInterface API operation for FortiManager Device gets the RipInterface
// with the specified index value.
// Returns the requested RipInterface value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterRipInterface(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterRipNeighbor API operation for FortiManager Device creates a new RipNeighbor.
// Returns the index value of the RipNeighbor and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterRipNeighbor(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterRipNeighbor API operation for FortiManager Device updates the specified RipNeighbor.
// Returns the index value of the RipNeighbor and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterRipNeighbor(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterRipNeighbor API operation for FortiManager Device deletes the specified RipNeighbor.
// Returns error for service API and SDK errors.
// See the device - router rip neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterRipNeighbor(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterRipNeighbor API operation for FortiManager Device gets the RipNeighbor
// with the specified index value.
// Returns the requested RipNeighbor value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterRipNeighbor(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterRipNetwork API operation for FortiManager Device creates a new RipNetwork.
// Returns the index value of the RipNetwork and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip network chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterRipNetwork(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/network"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterRipNetwork API operation for FortiManager Device updates the specified RipNetwork.
// Returns the index value of the RipNetwork and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip network chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterRipNetwork(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/network"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterRipNetwork API operation for FortiManager Device deletes the specified RipNetwork.
// Returns error for service API and SDK errors.
// See the device - router rip network chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterRipNetwork(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/network"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterRipNetwork API operation for FortiManager Device gets the RipNetwork
// with the specified index value.
// Returns the requested RipNetwork value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip network chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterRipNetwork(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/network"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterRipOffsetList API operation for FortiManager Device creates a new RipOffset List.
// Returns the index value of the RipOffset List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip offset-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterRipOffsetList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/offset-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterRipOffsetList API operation for FortiManager Device updates the specified RipOffset List.
// Returns the index value of the RipOffset List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip offset-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterRipOffsetList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/offset-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterRipOffsetList API operation for FortiManager Device deletes the specified RipOffset List.
// Returns error for service API and SDK errors.
// See the device - router rip offset-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterRipOffsetList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/offset-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterRipOffsetList API operation for FortiManager Device gets the RipOffset List
// with the specified index value.
// Returns the requested RipOffset List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip offset-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterRipOffsetList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/offset-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterRipRedistribute API operation for FortiManager Device updates the specified RipRedistribute.
// Returns the index value of the RipRedistribute and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip redistribute chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterRipRedistribute(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/redistribute"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterRipRedistribute API operation for FortiManager Device deletes the specified RipRedistribute.
// Returns error for service API and SDK errors.
// See the device - router rip redistribute chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterRipRedistribute(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - rip redistribute
	return
}

// ReadRouterRipRedistribute API operation for FortiManager Device gets the RipRedistribute
// with the specified index value.
// Returns the requested RipRedistribute value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router rip redistribute chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterRipRedistribute(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/rip/redistribute"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterRipng API operation for FortiManager Device updates the specified Ripng.
// Returns the index value of the Ripng and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterRipng(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterRipng API operation for FortiManager Device deletes the specified Ripng.
// Returns error for service API and SDK errors.
// See the device - router ripng chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterRipng(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - ripng
	return
}

// ReadRouterRipng API operation for FortiManager Device gets the Ripng
// with the specified index value.
// Returns the requested Ripng value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterRipng(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterRipngAggregateAddress API operation for FortiManager Device creates a new RipngAggregate Address.
// Returns the index value of the RipngAggregate Address and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng aggregate-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterRipngAggregateAddress(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/aggregate-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterRipngAggregateAddress API operation for FortiManager Device updates the specified RipngAggregate Address.
// Returns the index value of the RipngAggregate Address and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng aggregate-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterRipngAggregateAddress(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/aggregate-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterRipngAggregateAddress API operation for FortiManager Device deletes the specified RipngAggregate Address.
// Returns error for service API and SDK errors.
// See the device - router ripng aggregate-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterRipngAggregateAddress(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/aggregate-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterRipngAggregateAddress API operation for FortiManager Device gets the RipngAggregate Address
// with the specified index value.
// Returns the requested RipngAggregate Address value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng aggregate-address chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterRipngAggregateAddress(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/aggregate-address"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterRipngDistance API operation for FortiManager Device creates a new RipngDistance.
// Returns the index value of the RipngDistance and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng distance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterRipngDistance(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/distance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterRipngDistance API operation for FortiManager Device updates the specified RipngDistance.
// Returns the index value of the RipngDistance and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng distance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterRipngDistance(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/distance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterRipngDistance API operation for FortiManager Device deletes the specified RipngDistance.
// Returns error for service API and SDK errors.
// See the device - router ripng distance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterRipngDistance(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/distance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterRipngDistance API operation for FortiManager Device gets the RipngDistance
// with the specified index value.
// Returns the requested RipngDistance value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng distance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterRipngDistance(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/distance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterRipngDistributeList API operation for FortiManager Device creates a new RipngDistribute List.
// Returns the index value of the RipngDistribute List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng distribute-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterRipngDistributeList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/distribute-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterRipngDistributeList API operation for FortiManager Device updates the specified RipngDistribute List.
// Returns the index value of the RipngDistribute List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng distribute-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterRipngDistributeList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/distribute-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterRipngDistributeList API operation for FortiManager Device deletes the specified RipngDistribute List.
// Returns error for service API and SDK errors.
// See the device - router ripng distribute-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterRipngDistributeList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/distribute-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterRipngDistributeList API operation for FortiManager Device gets the RipngDistribute List
// with the specified index value.
// Returns the requested RipngDistribute List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng distribute-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterRipngDistributeList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/distribute-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterRipngInterface API operation for FortiManager Device creates a new RipngInterface.
// Returns the index value of the RipngInterface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterRipngInterface(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterRipngInterface API operation for FortiManager Device updates the specified RipngInterface.
// Returns the index value of the RipngInterface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterRipngInterface(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterRipngInterface API operation for FortiManager Device deletes the specified RipngInterface.
// Returns error for service API and SDK errors.
// See the device - router ripng interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterRipngInterface(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterRipngInterface API operation for FortiManager Device gets the RipngInterface
// with the specified index value.
// Returns the requested RipngInterface value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterRipngInterface(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterRipngNeighbor API operation for FortiManager Device creates a new RipngNeighbor.
// Returns the index value of the RipngNeighbor and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterRipngNeighbor(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterRipngNeighbor API operation for FortiManager Device updates the specified RipngNeighbor.
// Returns the index value of the RipngNeighbor and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterRipngNeighbor(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterRipngNeighbor API operation for FortiManager Device deletes the specified RipngNeighbor.
// Returns error for service API and SDK errors.
// See the device - router ripng neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterRipngNeighbor(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterRipngNeighbor API operation for FortiManager Device gets the RipngNeighbor
// with the specified index value.
// Returns the requested RipngNeighbor value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng neighbor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterRipngNeighbor(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/neighbor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterRipngNetwork API operation for FortiManager Device creates a new RipngNetwork.
// Returns the index value of the RipngNetwork and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng network chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterRipngNetwork(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/network"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterRipngNetwork API operation for FortiManager Device updates the specified RipngNetwork.
// Returns the index value of the RipngNetwork and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng network chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterRipngNetwork(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/network"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterRipngNetwork API operation for FortiManager Device deletes the specified RipngNetwork.
// Returns error for service API and SDK errors.
// See the device - router ripng network chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterRipngNetwork(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/network"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterRipngNetwork API operation for FortiManager Device gets the RipngNetwork
// with the specified index value.
// Returns the requested RipngNetwork value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng network chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterRipngNetwork(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/network"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterRipngOffsetList API operation for FortiManager Device creates a new RipngOffset List.
// Returns the index value of the RipngOffset List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng offset-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterRipngOffsetList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/offset-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterRipngOffsetList API operation for FortiManager Device updates the specified RipngOffset List.
// Returns the index value of the RipngOffset List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng offset-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterRipngOffsetList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/offset-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterRipngOffsetList API operation for FortiManager Device deletes the specified RipngOffset List.
// Returns error for service API and SDK errors.
// See the device - router ripng offset-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterRipngOffsetList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/offset-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterRipngOffsetList API operation for FortiManager Device gets the RipngOffset List
// with the specified index value.
// Returns the requested RipngOffset List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng offset-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterRipngOffsetList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/offset-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterRipngRedistribute API operation for FortiManager Device updates the specified RipngRedistribute.
// Returns the index value of the RipngRedistribute and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng redistribute chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterRipngRedistribute(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/redistribute"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterRipngRedistribute API operation for FortiManager Device deletes the specified RipngRedistribute.
// Returns error for service API and SDK errors.
// See the device - router ripng redistribute chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterRipngRedistribute(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - ripng redistribute
	return
}

// ReadRouterRipngRedistribute API operation for FortiManager Device gets the RipngRedistribute
// with the specified index value.
// Returns the requested RipngRedistribute value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router ripng redistribute chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterRipngRedistribute(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/ripng/redistribute"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateRouterSetting API operation for FortiManager Device updates the specified Setting.
// Returns the index value of the Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterSetting API operation for FortiManager Device deletes the specified Setting.
// Returns error for service API and SDK errors.
// See the device - router setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for router - setting
	return
}

// ReadRouterSetting API operation for FortiManager Device gets the Setting
// with the specified index value.
// Returns the requested Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterStatic API operation for FortiManager Device creates a new Static.
// Returns the index value of the Static and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router static chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterStatic(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/static"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterStatic API operation for FortiManager Device updates the specified Static.
// Returns the index value of the Static and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router static chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterStatic(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/static"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterStatic API operation for FortiManager Device deletes the specified Static.
// Returns error for service API and SDK errors.
// See the device - router static chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterStatic(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/static"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterStatic API operation for FortiManager Device gets the Static
// with the specified index value.
// Returns the requested Static value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router static chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterStatic(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/static"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateRouterStatic6 API operation for FortiManager Device creates a new Static6.
// Returns the index value of the Static6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router static6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateRouterStatic6(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/static6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateRouterStatic6 API operation for FortiManager Device updates the specified Static6.
// Returns the index value of the Static6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router static6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateRouterStatic6(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/static6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteRouterStatic6 API operation for FortiManager Device deletes the specified Static6.
// Returns error for service API and SDK errors.
// See the device - router static6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteRouterStatic6(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/static6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadRouterStatic6 API operation for FortiManager Device gets the Static6
// with the specified index value.
// Returns the requested Static6 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - router static6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadRouterStatic6(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/router/static6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchController8021XSettings API operation for FortiManager Device updates the specified 802 1X Settings.
// Returns the index value of the 802 1X Settings and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller 802-1X-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchController8021XSettings(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/802-1X-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchController8021XSettings API operation for FortiManager Device deletes the specified 802 1X Settings.
// Returns error for service API and SDK errors.
// See the device - switch-controller 802-1X-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchController8021XSettings(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - 802-1X-settings
	return
}

// ReadSwitchController8021XSettings API operation for FortiManager Device gets the 802 1X Settings
// with the specified index value.
// Returns the requested 802 1X Settings value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller 802-1X-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchController8021XSettings(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/802-1X-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerAclGroup API operation for FortiManager Device creates a new AclGroup.
// Returns the index value of the AclGroup and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller acl group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerAclGroup(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/acl/group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerAclGroup API operation for FortiManager Device updates the specified AclGroup.
// Returns the index value of the AclGroup and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller acl group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerAclGroup(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/acl/group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerAclGroup API operation for FortiManager Device deletes the specified AclGroup.
// Returns error for service API and SDK errors.
// See the device - switch-controller acl group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerAclGroup(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/acl/group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerAclGroup API operation for FortiManager Device gets the AclGroup
// with the specified index value.
// Returns the requested AclGroup value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller acl group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerAclGroup(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/acl/group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerAclIngress API operation for FortiManager Device creates a new AclIngress.
// Returns the index value of the AclIngress and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller acl ingress chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerAclIngress(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/acl/ingress"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerAclIngress API operation for FortiManager Device updates the specified AclIngress.
// Returns the index value of the AclIngress and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller acl ingress chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerAclIngress(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/acl/ingress"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerAclIngress API operation for FortiManager Device deletes the specified AclIngress.
// Returns error for service API and SDK errors.
// See the device - switch-controller acl ingress chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerAclIngress(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/acl/ingress"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerAclIngress API operation for FortiManager Device gets the AclIngress
// with the specified index value.
// Returns the requested AclIngress value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller acl ingress chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerAclIngress(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/acl/ingress"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerAclIngressAction API operation for FortiManager Device updates the specified AclIngressAction.
// Returns the index value of the AclIngressAction and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller acl ingress action chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerAclIngressAction(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/acl/ingress/{ingress}/action"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerAclIngressAction API operation for FortiManager Device deletes the specified AclIngressAction.
// Returns error for service API and SDK errors.
// See the device - switch-controller acl ingress action chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerAclIngressAction(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - acl ingress action
	return
}

// ReadSwitchControllerAclIngressAction API operation for FortiManager Device gets the AclIngressAction
// with the specified index value.
// Returns the requested AclIngressAction value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller acl ingress action chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerAclIngressAction(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/acl/ingress/{ingress}/action"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerAclIngressClassifier API operation for FortiManager Device updates the specified AclIngressClassifier.
// Returns the index value of the AclIngressClassifier and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller acl ingress classifier chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerAclIngressClassifier(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/acl/ingress/{ingress}/classifier"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerAclIngressClassifier API operation for FortiManager Device deletes the specified AclIngressClassifier.
// Returns error for service API and SDK errors.
// See the device - switch-controller acl ingress classifier chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerAclIngressClassifier(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - acl ingress classifier
	return
}

// ReadSwitchControllerAclIngressClassifier API operation for FortiManager Device gets the AclIngressClassifier
// with the specified index value.
// Returns the requested AclIngressClassifier value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller acl ingress classifier chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerAclIngressClassifier(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/acl/ingress/{ingress}/classifier"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerAutoConfigCustom API operation for FortiManager Device creates a new Auto ConfigCustom.
// Returns the index value of the Auto ConfigCustom and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller auto-config custom chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerAutoConfigCustom(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/auto-config/custom"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerAutoConfigCustom API operation for FortiManager Device updates the specified Auto ConfigCustom.
// Returns the index value of the Auto ConfigCustom and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller auto-config custom chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerAutoConfigCustom(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/auto-config/custom"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerAutoConfigCustom API operation for FortiManager Device deletes the specified Auto ConfigCustom.
// Returns error for service API and SDK errors.
// See the device - switch-controller auto-config custom chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerAutoConfigCustom(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/auto-config/custom"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerAutoConfigCustom API operation for FortiManager Device gets the Auto ConfigCustom
// with the specified index value.
// Returns the requested Auto ConfigCustom value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller auto-config custom chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerAutoConfigCustom(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/auto-config/custom"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerAutoConfigCustomSwitchBinding API operation for FortiManager Device creates a new Auto ConfigCustomSwitch Binding.
// Returns the index value of the Auto ConfigCustomSwitch Binding and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller auto-config custom switch-binding chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerAutoConfigCustomSwitchBinding(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/auto-config/custom/{custom}/switch-binding"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerAutoConfigCustomSwitchBinding API operation for FortiManager Device updates the specified Auto ConfigCustomSwitch Binding.
// Returns the index value of the Auto ConfigCustomSwitch Binding and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller auto-config custom switch-binding chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerAutoConfigCustomSwitchBinding(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/auto-config/custom/{custom}/switch-binding"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerAutoConfigCustomSwitchBinding API operation for FortiManager Device deletes the specified Auto ConfigCustomSwitch Binding.
// Returns error for service API and SDK errors.
// See the device - switch-controller auto-config custom switch-binding chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerAutoConfigCustomSwitchBinding(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/auto-config/custom/{custom}/switch-binding"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerAutoConfigCustomSwitchBinding API operation for FortiManager Device gets the Auto ConfigCustomSwitch Binding
// with the specified index value.
// Returns the requested Auto ConfigCustomSwitch Binding value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller auto-config custom switch-binding chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerAutoConfigCustomSwitchBinding(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/auto-config/custom/{custom}/switch-binding"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerAutoConfigDefault API operation for FortiManager Device updates the specified Auto ConfigDefault.
// Returns the index value of the Auto ConfigDefault and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller auto-config default chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerAutoConfigDefault(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/auto-config/default"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerAutoConfigDefault API operation for FortiManager Device deletes the specified Auto ConfigDefault.
// Returns error for service API and SDK errors.
// See the device - switch-controller auto-config default chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerAutoConfigDefault(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - auto-config default
	return
}

// ReadSwitchControllerAutoConfigDefault API operation for FortiManager Device gets the Auto ConfigDefault
// with the specified index value.
// Returns the requested Auto ConfigDefault value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller auto-config default chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerAutoConfigDefault(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/auto-config/default"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerAutoConfigPolicy API operation for FortiManager Device creates a new Auto ConfigPolicy.
// Returns the index value of the Auto ConfigPolicy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller auto-config policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerAutoConfigPolicy(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/auto-config/policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerAutoConfigPolicy API operation for FortiManager Device updates the specified Auto ConfigPolicy.
// Returns the index value of the Auto ConfigPolicy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller auto-config policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerAutoConfigPolicy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/auto-config/policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerAutoConfigPolicy API operation for FortiManager Device deletes the specified Auto ConfigPolicy.
// Returns error for service API and SDK errors.
// See the device - switch-controller auto-config policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerAutoConfigPolicy(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/auto-config/policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerAutoConfigPolicy API operation for FortiManager Device gets the Auto ConfigPolicy
// with the specified index value.
// Returns the requested Auto ConfigPolicy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller auto-config policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerAutoConfigPolicy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/auto-config/policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerCustomCommand API operation for FortiManager Device creates a new Custom Command.
// Returns the index value of the Custom Command and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller custom-command chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerCustomCommand(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/custom-command"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerCustomCommand API operation for FortiManager Device updates the specified Custom Command.
// Returns the index value of the Custom Command and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller custom-command chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerCustomCommand(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/custom-command"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerCustomCommand API operation for FortiManager Device deletes the specified Custom Command.
// Returns error for service API and SDK errors.
// See the device - switch-controller custom-command chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerCustomCommand(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/custom-command"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerCustomCommand API operation for FortiManager Device gets the Custom Command
// with the specified index value.
// Returns the requested Custom Command value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller custom-command chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerCustomCommand(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/custom-command"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerDynamicPortPolicy API operation for FortiManager Device creates a new Dynamic Port Policy.
// Returns the index value of the Dynamic Port Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller dynamic-port-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerDynamicPortPolicy(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/dynamic-port-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerDynamicPortPolicy API operation for FortiManager Device updates the specified Dynamic Port Policy.
// Returns the index value of the Dynamic Port Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller dynamic-port-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerDynamicPortPolicy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/dynamic-port-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerDynamicPortPolicy API operation for FortiManager Device deletes the specified Dynamic Port Policy.
// Returns error for service API and SDK errors.
// See the device - switch-controller dynamic-port-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerDynamicPortPolicy(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/dynamic-port-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerDynamicPortPolicy API operation for FortiManager Device gets the Dynamic Port Policy
// with the specified index value.
// Returns the requested Dynamic Port Policy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller dynamic-port-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerDynamicPortPolicy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/dynamic-port-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerDynamicPortPolicyPolicy API operation for FortiManager Device creates a new Dynamic Port PolicyPolicy.
// Returns the index value of the Dynamic Port PolicyPolicy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller dynamic-port-policy policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerDynamicPortPolicyPolicy(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/dynamic-port-policy/{dynamic-port-policy}/policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerDynamicPortPolicyPolicy API operation for FortiManager Device updates the specified Dynamic Port PolicyPolicy.
// Returns the index value of the Dynamic Port PolicyPolicy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller dynamic-port-policy policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerDynamicPortPolicyPolicy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/dynamic-port-policy/{dynamic-port-policy}/policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerDynamicPortPolicyPolicy API operation for FortiManager Device deletes the specified Dynamic Port PolicyPolicy.
// Returns error for service API and SDK errors.
// See the device - switch-controller dynamic-port-policy policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerDynamicPortPolicyPolicy(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/dynamic-port-policy/{dynamic-port-policy}/policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerDynamicPortPolicyPolicy API operation for FortiManager Device gets the Dynamic Port PolicyPolicy
// with the specified index value.
// Returns the requested Dynamic Port PolicyPolicy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller dynamic-port-policy policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerDynamicPortPolicyPolicy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/dynamic-port-policy/{dynamic-port-policy}/policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerDynamicPortPolicyPolicyMove API operation for FortiManager Device updates the specified Dynamic Port PolicyPolicyMove.
// Returns the index value of the Dynamic Port PolicyPolicyMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller dynamic-port-policy policy move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerDynamicPortPolicyPolicyMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/dynamic-port-policy/{dynamic-port-policy}/policy/{policy}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadSwitchControllerDynamicPortPolicyPolicyMove API operation for FortiManager Device gets the Dynamic Port PolicyPolicyMove
// with the specified index value.
// Returns the requested Dynamic Port PolicyPolicyMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller dynamic-port-policy policy move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerDynamicPortPolicyPolicyMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/dynamic-port-policy/{dynamic-port-policy}/policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"name"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// UpdateSwitchControllerFlowTracking API operation for FortiManager Device updates the specified Flow Tracking.
// Returns the index value of the Flow Tracking and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller flow-tracking chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerFlowTracking(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/flow-tracking"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerFlowTracking API operation for FortiManager Device deletes the specified Flow Tracking.
// Returns error for service API and SDK errors.
// See the device - switch-controller flow-tracking chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerFlowTracking(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - flow-tracking
	return
}

// ReadSwitchControllerFlowTracking API operation for FortiManager Device gets the Flow Tracking
// with the specified index value.
// Returns the requested Flow Tracking value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller flow-tracking chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerFlowTracking(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/flow-tracking"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerFlowTrackingAggregates API operation for FortiManager Device creates a new Flow TrackingAggregates.
// Returns the index value of the Flow TrackingAggregates and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller flow-tracking aggregates chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerFlowTrackingAggregates(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/flow-tracking/aggregates"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerFlowTrackingAggregates API operation for FortiManager Device updates the specified Flow TrackingAggregates.
// Returns the index value of the Flow TrackingAggregates and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller flow-tracking aggregates chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerFlowTrackingAggregates(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/flow-tracking/aggregates"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerFlowTrackingAggregates API operation for FortiManager Device deletes the specified Flow TrackingAggregates.
// Returns error for service API and SDK errors.
// See the device - switch-controller flow-tracking aggregates chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerFlowTrackingAggregates(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/flow-tracking/aggregates"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerFlowTrackingAggregates API operation for FortiManager Device gets the Flow TrackingAggregates
// with the specified index value.
// Returns the requested Flow TrackingAggregates value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller flow-tracking aggregates chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerFlowTrackingAggregates(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/flow-tracking/aggregates"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerFlowTrackingCollectors API operation for FortiManager Device creates a new Flow TrackingCollectors.
// Returns the index value of the Flow TrackingCollectors and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller flow-tracking collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerFlowTrackingCollectors(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/flow-tracking/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerFlowTrackingCollectors API operation for FortiManager Device updates the specified Flow TrackingCollectors.
// Returns the index value of the Flow TrackingCollectors and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller flow-tracking collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerFlowTrackingCollectors(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/flow-tracking/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerFlowTrackingCollectors API operation for FortiManager Device deletes the specified Flow TrackingCollectors.
// Returns error for service API and SDK errors.
// See the device - switch-controller flow-tracking collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerFlowTrackingCollectors(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/flow-tracking/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerFlowTrackingCollectors API operation for FortiManager Device gets the Flow TrackingCollectors
// with the specified index value.
// Returns the requested Flow TrackingCollectors value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller flow-tracking collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerFlowTrackingCollectors(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/flow-tracking/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerFortilinkSettings API operation for FortiManager Device creates a new Fortilink Settings.
// Returns the index value of the Fortilink Settings and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller fortilink-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerFortilinkSettings(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/fortilink-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerFortilinkSettings API operation for FortiManager Device updates the specified Fortilink Settings.
// Returns the index value of the Fortilink Settings and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller fortilink-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerFortilinkSettings(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/fortilink-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerFortilinkSettings API operation for FortiManager Device deletes the specified Fortilink Settings.
// Returns error for service API and SDK errors.
// See the device - switch-controller fortilink-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerFortilinkSettings(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/fortilink-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerFortilinkSettings API operation for FortiManager Device gets the Fortilink Settings
// with the specified index value.
// Returns the requested Fortilink Settings value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller fortilink-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerFortilinkSettings(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/fortilink-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerFortilinkSettingsNacPorts API operation for FortiManager Device updates the specified Fortilink SettingsNac Ports.
// Returns the index value of the Fortilink SettingsNac Ports and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller fortilink-settings nac-ports chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerFortilinkSettingsNacPorts(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/fortilink-settings/{fortilink-settings}/nac-ports"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerFortilinkSettingsNacPorts API operation for FortiManager Device deletes the specified Fortilink SettingsNac Ports.
// Returns error for service API and SDK errors.
// See the device - switch-controller fortilink-settings nac-ports chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerFortilinkSettingsNacPorts(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - fortilink-settings nac-ports
	return
}

// ReadSwitchControllerFortilinkSettingsNacPorts API operation for FortiManager Device gets the Fortilink SettingsNac Ports
// with the specified index value.
// Returns the requested Fortilink SettingsNac Ports value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller fortilink-settings nac-ports chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerFortilinkSettingsNacPorts(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/fortilink-settings/{fortilink-settings}/nac-ports"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerGlobal API operation for FortiManager Device updates the specified Global.
// Returns the index value of the Global and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerGlobal(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/global"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerGlobal API operation for FortiManager Device deletes the specified Global.
// Returns error for service API and SDK errors.
// See the device - switch-controller global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerGlobal(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - global
	return
}

// ReadSwitchControllerGlobal API operation for FortiManager Device gets the Global
// with the specified index value.
// Returns the requested Global value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerGlobal(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/global"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerGlobalCustomCommand API operation for FortiManager Device creates a new GlobalCustom Command.
// Returns the index value of the GlobalCustom Command and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller global custom-command chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerGlobalCustomCommand(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/global/custom-command"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerGlobalCustomCommand API operation for FortiManager Device updates the specified GlobalCustom Command.
// Returns the index value of the GlobalCustom Command and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller global custom-command chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerGlobalCustomCommand(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/global/custom-command"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerGlobalCustomCommand API operation for FortiManager Device deletes the specified GlobalCustom Command.
// Returns error for service API and SDK errors.
// See the device - switch-controller global custom-command chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerGlobalCustomCommand(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/global/custom-command"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerGlobalCustomCommand API operation for FortiManager Device gets the GlobalCustom Command
// with the specified index value.
// Returns the requested GlobalCustom Command value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller global custom-command chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerGlobalCustomCommand(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/global/custom-command"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerIgmpSnooping API operation for FortiManager Device updates the specified Igmp Snooping.
// Returns the index value of the Igmp Snooping and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller igmp-snooping chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerIgmpSnooping(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/igmp-snooping"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerIgmpSnooping API operation for FortiManager Device deletes the specified Igmp Snooping.
// Returns error for service API and SDK errors.
// See the device - switch-controller igmp-snooping chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerIgmpSnooping(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - igmp-snooping
	return
}

// ReadSwitchControllerIgmpSnooping API operation for FortiManager Device gets the Igmp Snooping
// with the specified index value.
// Returns the requested Igmp Snooping value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller igmp-snooping chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerIgmpSnooping(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/igmp-snooping"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerInitialConfigTemplate API operation for FortiManager Device creates a new Initial ConfigTemplate.
// Returns the index value of the Initial ConfigTemplate and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller initial-config template chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerInitialConfigTemplate(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/initial-config/template"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerInitialConfigTemplate API operation for FortiManager Device updates the specified Initial ConfigTemplate.
// Returns the index value of the Initial ConfigTemplate and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller initial-config template chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerInitialConfigTemplate(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/initial-config/template"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerInitialConfigTemplate API operation for FortiManager Device deletes the specified Initial ConfigTemplate.
// Returns error for service API and SDK errors.
// See the device - switch-controller initial-config template chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerInitialConfigTemplate(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/initial-config/template"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerInitialConfigTemplate API operation for FortiManager Device gets the Initial ConfigTemplate
// with the specified index value.
// Returns the requested Initial ConfigTemplate value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller initial-config template chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerInitialConfigTemplate(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/initial-config/template"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerInitialConfigVlans API operation for FortiManager Device updates the specified Initial ConfigVlans.
// Returns the index value of the Initial ConfigVlans and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller initial-config vlans chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerInitialConfigVlans(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/initial-config/vlans"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerInitialConfigVlans API operation for FortiManager Device deletes the specified Initial ConfigVlans.
// Returns error for service API and SDK errors.
// See the device - switch-controller initial-config vlans chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerInitialConfigVlans(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - initial-config vlans
	return
}

// ReadSwitchControllerInitialConfigVlans API operation for FortiManager Device gets the Initial ConfigVlans
// with the specified index value.
// Returns the requested Initial ConfigVlans value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller initial-config vlans chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerInitialConfigVlans(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/initial-config/vlans"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerLldpProfile API operation for FortiManager Device creates a new Lldp Profile.
// Returns the index value of the Lldp Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller lldp-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerLldpProfile(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/lldp-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerLldpProfile API operation for FortiManager Device updates the specified Lldp Profile.
// Returns the index value of the Lldp Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller lldp-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerLldpProfile(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/lldp-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerLldpProfile API operation for FortiManager Device deletes the specified Lldp Profile.
// Returns error for service API and SDK errors.
// See the device - switch-controller lldp-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerLldpProfile(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/lldp-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerLldpProfile API operation for FortiManager Device gets the Lldp Profile
// with the specified index value.
// Returns the requested Lldp Profile value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller lldp-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerLldpProfile(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/lldp-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerLldpProfileCustomTlvs API operation for FortiManager Device creates a new Lldp ProfileCustom Tlvs.
// Returns the index value of the Lldp ProfileCustom Tlvs and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller lldp-profile custom-tlvs chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerLldpProfileCustomTlvs(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/lldp-profile/{lldp-profile}/custom-tlvs"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerLldpProfileCustomTlvs API operation for FortiManager Device updates the specified Lldp ProfileCustom Tlvs.
// Returns the index value of the Lldp ProfileCustom Tlvs and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller lldp-profile custom-tlvs chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerLldpProfileCustomTlvs(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/lldp-profile/{lldp-profile}/custom-tlvs"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerLldpProfileCustomTlvs API operation for FortiManager Device deletes the specified Lldp ProfileCustom Tlvs.
// Returns error for service API and SDK errors.
// See the device - switch-controller lldp-profile custom-tlvs chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerLldpProfileCustomTlvs(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/lldp-profile/{lldp-profile}/custom-tlvs"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerLldpProfileCustomTlvs API operation for FortiManager Device gets the Lldp ProfileCustom Tlvs
// with the specified index value.
// Returns the requested Lldp ProfileCustom Tlvs value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller lldp-profile custom-tlvs chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerLldpProfileCustomTlvs(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/lldp-profile/{lldp-profile}/custom-tlvs"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerLldpSettings API operation for FortiManager Device updates the specified Lldp Settings.
// Returns the index value of the Lldp Settings and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller lldp-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerLldpSettings(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/lldp-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerLldpSettings API operation for FortiManager Device deletes the specified Lldp Settings.
// Returns error for service API and SDK errors.
// See the device - switch-controller lldp-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerLldpSettings(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - lldp-settings
	return
}

// ReadSwitchControllerLldpSettings API operation for FortiManager Device gets the Lldp Settings
// with the specified index value.
// Returns the requested Lldp Settings value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller lldp-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerLldpSettings(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/lldp-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerLocation API operation for FortiManager Device creates a new Location.
// Returns the index value of the Location and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller location chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerLocation(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/location"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerLocation API operation for FortiManager Device updates the specified Location.
// Returns the index value of the Location and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller location chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerLocation(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/location"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerLocation API operation for FortiManager Device deletes the specified Location.
// Returns error for service API and SDK errors.
// See the device - switch-controller location chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerLocation(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/location"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerLocation API operation for FortiManager Device gets the Location
// with the specified index value.
// Returns the requested Location value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller location chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerLocation(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/location"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerLocationAddressCivic API operation for FortiManager Device updates the specified LocationAddress Civic.
// Returns the index value of the LocationAddress Civic and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller location address-civic chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerLocationAddressCivic(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/location/{location}/address-civic"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerLocationAddressCivic API operation for FortiManager Device deletes the specified LocationAddress Civic.
// Returns error for service API and SDK errors.
// See the device - switch-controller location address-civic chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerLocationAddressCivic(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - location address-civic
	return
}

// ReadSwitchControllerLocationAddressCivic API operation for FortiManager Device gets the LocationAddress Civic
// with the specified index value.
// Returns the requested LocationAddress Civic value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller location address-civic chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerLocationAddressCivic(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/location/{location}/address-civic"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerLocationCoordinates API operation for FortiManager Device updates the specified LocationCoordinates.
// Returns the index value of the LocationCoordinates and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller location coordinates chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerLocationCoordinates(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/location/{location}/coordinates"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerLocationCoordinates API operation for FortiManager Device deletes the specified LocationCoordinates.
// Returns error for service API and SDK errors.
// See the device - switch-controller location coordinates chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerLocationCoordinates(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - location coordinates
	return
}

// ReadSwitchControllerLocationCoordinates API operation for FortiManager Device gets the LocationCoordinates
// with the specified index value.
// Returns the requested LocationCoordinates value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller location coordinates chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerLocationCoordinates(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/location/{location}/coordinates"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerLocationElinNumber API operation for FortiManager Device updates the specified LocationElin Number.
// Returns the index value of the LocationElin Number and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller location elin-number chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerLocationElinNumber(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/location/{location}/elin-number"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerLocationElinNumber API operation for FortiManager Device deletes the specified LocationElin Number.
// Returns error for service API and SDK errors.
// See the device - switch-controller location elin-number chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerLocationElinNumber(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - location elin-number
	return
}

// ReadSwitchControllerLocationElinNumber API operation for FortiManager Device gets the LocationElin Number
// with the specified index value.
// Returns the requested LocationElin Number value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller location elin-number chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerLocationElinNumber(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/location/{location}/elin-number"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerMacPolicy API operation for FortiManager Device creates a new Mac Policy.
// Returns the index value of the Mac Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller mac-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerMacPolicy(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/mac-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerMacPolicy API operation for FortiManager Device updates the specified Mac Policy.
// Returns the index value of the Mac Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller mac-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerMacPolicy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/mac-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerMacPolicy API operation for FortiManager Device deletes the specified Mac Policy.
// Returns error for service API and SDK errors.
// See the device - switch-controller mac-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerMacPolicy(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/mac-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerMacPolicy API operation for FortiManager Device gets the Mac Policy
// with the specified index value.
// Returns the requested Mac Policy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller mac-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerMacPolicy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/mac-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerManagedSwitch API operation for FortiManager Device creates a new Managed Switch.
// Returns the index value of the Managed Switch and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerManagedSwitch(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerManagedSwitch API operation for FortiManager Device updates the specified Managed Switch.
// Returns the index value of the Managed Switch and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitch(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitch API operation for FortiManager Device deletes the specified Managed Switch.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitch(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerManagedSwitch API operation for FortiManager Device gets the Managed Switch
// with the specified index value.
// Returns the requested Managed Switch value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitch(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerManagedSwitch8021XSettings API operation for FortiManager Device updates the specified Managed Switch802 1X Settings.
// Returns the index value of the Managed Switch802 1X Settings and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch 802-1X-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitch8021XSettings(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/802-1X-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitch8021XSettings API operation for FortiManager Device deletes the specified Managed Switch802 1X Settings.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch 802-1X-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitch8021XSettings(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - managed-switch 802-1X-settings
	return
}

// ReadSwitchControllerManagedSwitch8021XSettings API operation for FortiManager Device gets the Managed Switch802 1X Settings
// with the specified index value.
// Returns the requested Managed Switch802 1X Settings value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch 802-1X-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitch8021XSettings(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/802-1X-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerManagedSwitchCustomCommand API operation for FortiManager Device creates a new Managed SwitchCustom Command.
// Returns the index value of the Managed SwitchCustom Command and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch custom-command chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerManagedSwitchCustomCommand(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/custom-command"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerManagedSwitchCustomCommand API operation for FortiManager Device updates the specified Managed SwitchCustom Command.
// Returns the index value of the Managed SwitchCustom Command and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch custom-command chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchCustomCommand(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/custom-command"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchCustomCommand API operation for FortiManager Device deletes the specified Managed SwitchCustom Command.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch custom-command chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchCustomCommand(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/custom-command"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerManagedSwitchCustomCommand API operation for FortiManager Device gets the Managed SwitchCustom Command
// with the specified index value.
// Returns the requested Managed SwitchCustom Command value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch custom-command chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchCustomCommand(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/custom-command"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerManagedSwitchDhcpSnoopingStaticClient API operation for FortiManager Device creates a new Managed SwitchDhcp Snooping Static Client.
// Returns the index value of the Managed SwitchDhcp Snooping Static Client and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch dhcp-snooping-static-client chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerManagedSwitchDhcpSnoopingStaticClient(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/dhcp-snooping-static-client"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerManagedSwitchDhcpSnoopingStaticClient API operation for FortiManager Device updates the specified Managed SwitchDhcp Snooping Static Client.
// Returns the index value of the Managed SwitchDhcp Snooping Static Client and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch dhcp-snooping-static-client chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchDhcpSnoopingStaticClient(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/dhcp-snooping-static-client"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchDhcpSnoopingStaticClient API operation for FortiManager Device deletes the specified Managed SwitchDhcp Snooping Static Client.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch dhcp-snooping-static-client chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchDhcpSnoopingStaticClient(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/dhcp-snooping-static-client"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerManagedSwitchDhcpSnoopingStaticClient API operation for FortiManager Device gets the Managed SwitchDhcp Snooping Static Client
// with the specified index value.
// Returns the requested Managed SwitchDhcp Snooping Static Client value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch dhcp-snooping-static-client chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchDhcpSnoopingStaticClient(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/dhcp-snooping-static-client"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerManagedSwitchIgmpSnooping API operation for FortiManager Device updates the specified Managed SwitchIgmp Snooping.
// Returns the index value of the Managed SwitchIgmp Snooping and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch igmp-snooping chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchIgmpSnooping(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/igmp-snooping"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchIgmpSnooping API operation for FortiManager Device deletes the specified Managed SwitchIgmp Snooping.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch igmp-snooping chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchIgmpSnooping(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - managed-switch igmp-snooping
	return
}

// ReadSwitchControllerManagedSwitchIgmpSnooping API operation for FortiManager Device gets the Managed SwitchIgmp Snooping
// with the specified index value.
// Returns the requested Managed SwitchIgmp Snooping value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch igmp-snooping chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchIgmpSnooping(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/igmp-snooping"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerManagedSwitchIgmpSnoopingVlans API operation for FortiManager Device creates a new Managed SwitchIgmp SnoopingVlans.
// Returns the index value of the Managed SwitchIgmp SnoopingVlans and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch igmp-snooping vlans chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerManagedSwitchIgmpSnoopingVlans(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/igmp-snooping/vlans"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerManagedSwitchIgmpSnoopingVlans API operation for FortiManager Device updates the specified Managed SwitchIgmp SnoopingVlans.
// Returns the index value of the Managed SwitchIgmp SnoopingVlans and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch igmp-snooping vlans chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchIgmpSnoopingVlans(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/igmp-snooping/vlans"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchIgmpSnoopingVlans API operation for FortiManager Device deletes the specified Managed SwitchIgmp SnoopingVlans.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch igmp-snooping vlans chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchIgmpSnoopingVlans(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/igmp-snooping/vlans"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerManagedSwitchIgmpSnoopingVlans API operation for FortiManager Device gets the Managed SwitchIgmp SnoopingVlans
// with the specified index value.
// Returns the requested Managed SwitchIgmp SnoopingVlans value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch igmp-snooping vlans chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchIgmpSnoopingVlans(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/igmp-snooping/vlans"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerManagedSwitchIpSourceGuard API operation for FortiManager Device creates a new Managed SwitchIp Source Guard.
// Returns the index value of the Managed SwitchIp Source Guard and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch ip-source-guard chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerManagedSwitchIpSourceGuard(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/ip-source-guard"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerManagedSwitchIpSourceGuard API operation for FortiManager Device updates the specified Managed SwitchIp Source Guard.
// Returns the index value of the Managed SwitchIp Source Guard and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch ip-source-guard chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchIpSourceGuard(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/ip-source-guard"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchIpSourceGuard API operation for FortiManager Device deletes the specified Managed SwitchIp Source Guard.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch ip-source-guard chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchIpSourceGuard(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/ip-source-guard"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerManagedSwitchIpSourceGuard API operation for FortiManager Device gets the Managed SwitchIp Source Guard
// with the specified index value.
// Returns the requested Managed SwitchIp Source Guard value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch ip-source-guard chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchIpSourceGuard(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/ip-source-guard"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerManagedSwitchIpSourceGuardBindingEntry API operation for FortiManager Device creates a new Managed SwitchIp Source GuardBinding Entry.
// Returns the index value of the Managed SwitchIp Source GuardBinding Entry and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch ip-source-guard binding-entry chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerManagedSwitchIpSourceGuardBindingEntry(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/ip-source-guard/{ip-source-guard}/binding-entry"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerManagedSwitchIpSourceGuardBindingEntry API operation for FortiManager Device updates the specified Managed SwitchIp Source GuardBinding Entry.
// Returns the index value of the Managed SwitchIp Source GuardBinding Entry and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch ip-source-guard binding-entry chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchIpSourceGuardBindingEntry(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/ip-source-guard/{ip-source-guard}/binding-entry"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchIpSourceGuardBindingEntry API operation for FortiManager Device deletes the specified Managed SwitchIp Source GuardBinding Entry.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch ip-source-guard binding-entry chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchIpSourceGuardBindingEntry(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/ip-source-guard/{ip-source-guard}/binding-entry"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerManagedSwitchIpSourceGuardBindingEntry API operation for FortiManager Device gets the Managed SwitchIp Source GuardBinding Entry
// with the specified index value.
// Returns the requested Managed SwitchIp Source GuardBinding Entry value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch ip-source-guard binding-entry chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchIpSourceGuardBindingEntry(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/ip-source-guard/{ip-source-guard}/binding-entry"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerManagedSwitchMirror API operation for FortiManager Device creates a new Managed SwitchMirror.
// Returns the index value of the Managed SwitchMirror and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch mirror chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerManagedSwitchMirror(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/mirror"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerManagedSwitchMirror API operation for FortiManager Device updates the specified Managed SwitchMirror.
// Returns the index value of the Managed SwitchMirror and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch mirror chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchMirror(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/mirror"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchMirror API operation for FortiManager Device deletes the specified Managed SwitchMirror.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch mirror chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchMirror(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/mirror"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerManagedSwitchMirror API operation for FortiManager Device gets the Managed SwitchMirror
// with the specified index value.
// Returns the requested Managed SwitchMirror value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch mirror chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchMirror(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/mirror"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerManagedSwitchMove API operation for FortiManager Device updates the specified Managed SwitchMove.
// Returns the index value of the Managed SwitchMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadSwitchControllerManagedSwitchMove API operation for FortiManager Device gets the Managed SwitchMove
// with the specified index value.
// Returns the requested Managed SwitchMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"switch-id"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// CreateSwitchControllerManagedSwitchPortsDhcpSnoopOption82Override API operation for FortiManager Device creates a new Managed SwitchPortsDhcp Snoop Option82 Override.
// Returns the index value of the Managed SwitchPortsDhcp Snoop Option82 Override and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch ports dhcp-snoop-option82-override chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerManagedSwitchPortsDhcpSnoopOption82Override(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/ports/{ports}/dhcp-snoop-option82-override"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerManagedSwitchPortsDhcpSnoopOption82Override API operation for FortiManager Device updates the specified Managed SwitchPortsDhcp Snoop Option82 Override.
// Returns the index value of the Managed SwitchPortsDhcp Snoop Option82 Override and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch ports dhcp-snoop-option82-override chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchPortsDhcpSnoopOption82Override(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/ports/{ports}/dhcp-snoop-option82-override"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchPortsDhcpSnoopOption82Override API operation for FortiManager Device deletes the specified Managed SwitchPortsDhcp Snoop Option82 Override.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch ports dhcp-snoop-option82-override chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchPortsDhcpSnoopOption82Override(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/ports/{ports}/dhcp-snoop-option82-override"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerManagedSwitchPortsDhcpSnoopOption82Override API operation for FortiManager Device gets the Managed SwitchPortsDhcp Snoop Option82 Override
// with the specified index value.
// Returns the requested Managed SwitchPortsDhcp Snoop Option82 Override value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch ports dhcp-snoop-option82-override chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchPortsDhcpSnoopOption82Override(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/ports/{ports}/dhcp-snoop-option82-override"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerManagedSwitchRemoteLog API operation for FortiManager Device creates a new Managed SwitchRemote Log.
// Returns the index value of the Managed SwitchRemote Log and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch remote-log chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerManagedSwitchRemoteLog(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/remote-log"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerManagedSwitchRemoteLog API operation for FortiManager Device updates the specified Managed SwitchRemote Log.
// Returns the index value of the Managed SwitchRemote Log and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch remote-log chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchRemoteLog(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/remote-log"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchRemoteLog API operation for FortiManager Device deletes the specified Managed SwitchRemote Log.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch remote-log chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchRemoteLog(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/remote-log"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerManagedSwitchRemoteLog API operation for FortiManager Device gets the Managed SwitchRemote Log
// with the specified index value.
// Returns the requested Managed SwitchRemote Log value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch remote-log chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchRemoteLog(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/remote-log"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerManagedSwitchRouteOffloadRouter API operation for FortiManager Device creates a new Managed SwitchRoute Offload Router.
// Returns the index value of the Managed SwitchRoute Offload Router and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch route-offload-router chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerManagedSwitchRouteOffloadRouter(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/route-offload-router"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerManagedSwitchRouteOffloadRouter API operation for FortiManager Device updates the specified Managed SwitchRoute Offload Router.
// Returns the index value of the Managed SwitchRoute Offload Router and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch route-offload-router chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchRouteOffloadRouter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/route-offload-router"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchRouteOffloadRouter API operation for FortiManager Device deletes the specified Managed SwitchRoute Offload Router.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch route-offload-router chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchRouteOffloadRouter(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/route-offload-router"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerManagedSwitchRouteOffloadRouter API operation for FortiManager Device gets the Managed SwitchRoute Offload Router
// with the specified index value.
// Returns the requested Managed SwitchRoute Offload Router value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch route-offload-router chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchRouteOffloadRouter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/route-offload-router"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerManagedSwitchSnmpCommunity API operation for FortiManager Device creates a new Managed SwitchSnmp Community.
// Returns the index value of the Managed SwitchSnmp Community and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch snmp-community chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerManagedSwitchSnmpCommunity(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/snmp-community"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerManagedSwitchSnmpCommunity API operation for FortiManager Device updates the specified Managed SwitchSnmp Community.
// Returns the index value of the Managed SwitchSnmp Community and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch snmp-community chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchSnmpCommunity(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/snmp-community"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchSnmpCommunity API operation for FortiManager Device deletes the specified Managed SwitchSnmp Community.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch snmp-community chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchSnmpCommunity(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/snmp-community"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerManagedSwitchSnmpCommunity API operation for FortiManager Device gets the Managed SwitchSnmp Community
// with the specified index value.
// Returns the requested Managed SwitchSnmp Community value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch snmp-community chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchSnmpCommunity(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/snmp-community"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerManagedSwitchSnmpCommunityHosts API operation for FortiManager Device creates a new Managed SwitchSnmp CommunityHosts.
// Returns the index value of the Managed SwitchSnmp CommunityHosts and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch snmp-community hosts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerManagedSwitchSnmpCommunityHosts(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/snmp-community/{snmp-community}/hosts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerManagedSwitchSnmpCommunityHosts API operation for FortiManager Device updates the specified Managed SwitchSnmp CommunityHosts.
// Returns the index value of the Managed SwitchSnmp CommunityHosts and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch snmp-community hosts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchSnmpCommunityHosts(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/snmp-community/{snmp-community}/hosts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchSnmpCommunityHosts API operation for FortiManager Device deletes the specified Managed SwitchSnmp CommunityHosts.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch snmp-community hosts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchSnmpCommunityHosts(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/snmp-community/{snmp-community}/hosts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerManagedSwitchSnmpCommunityHosts API operation for FortiManager Device gets the Managed SwitchSnmp CommunityHosts
// with the specified index value.
// Returns the requested Managed SwitchSnmp CommunityHosts value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch snmp-community hosts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchSnmpCommunityHosts(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/snmp-community/{snmp-community}/hosts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerManagedSwitchSnmpSysinfo API operation for FortiManager Device updates the specified Managed SwitchSnmp Sysinfo.
// Returns the index value of the Managed SwitchSnmp Sysinfo and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch snmp-sysinfo chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchSnmpSysinfo(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/snmp-sysinfo"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchSnmpSysinfo API operation for FortiManager Device deletes the specified Managed SwitchSnmp Sysinfo.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch snmp-sysinfo chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchSnmpSysinfo(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - managed-switch snmp-sysinfo
	return
}

// ReadSwitchControllerManagedSwitchSnmpSysinfo API operation for FortiManager Device gets the Managed SwitchSnmp Sysinfo
// with the specified index value.
// Returns the requested Managed SwitchSnmp Sysinfo value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch snmp-sysinfo chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchSnmpSysinfo(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/snmp-sysinfo"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerManagedSwitchSnmpTrapThreshold API operation for FortiManager Device updates the specified Managed SwitchSnmp Trap Threshold.
// Returns the index value of the Managed SwitchSnmp Trap Threshold and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch snmp-trap-threshold chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchSnmpTrapThreshold(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/snmp-trap-threshold"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchSnmpTrapThreshold API operation for FortiManager Device deletes the specified Managed SwitchSnmp Trap Threshold.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch snmp-trap-threshold chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchSnmpTrapThreshold(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - managed-switch snmp-trap-threshold
	return
}

// ReadSwitchControllerManagedSwitchSnmpTrapThreshold API operation for FortiManager Device gets the Managed SwitchSnmp Trap Threshold
// with the specified index value.
// Returns the requested Managed SwitchSnmp Trap Threshold value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch snmp-trap-threshold chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchSnmpTrapThreshold(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/snmp-trap-threshold"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerManagedSwitchSnmpUser API operation for FortiManager Device creates a new Managed SwitchSnmp User.
// Returns the index value of the Managed SwitchSnmp User and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch snmp-user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerManagedSwitchSnmpUser(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/snmp-user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerManagedSwitchSnmpUser API operation for FortiManager Device updates the specified Managed SwitchSnmp User.
// Returns the index value of the Managed SwitchSnmp User and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch snmp-user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchSnmpUser(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/snmp-user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchSnmpUser API operation for FortiManager Device deletes the specified Managed SwitchSnmp User.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch snmp-user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchSnmpUser(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/snmp-user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerManagedSwitchSnmpUser API operation for FortiManager Device gets the Managed SwitchSnmp User
// with the specified index value.
// Returns the requested Managed SwitchSnmp User value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch snmp-user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchSnmpUser(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/snmp-user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerManagedSwitchStaticMac API operation for FortiManager Device creates a new Managed SwitchStatic Mac.
// Returns the index value of the Managed SwitchStatic Mac and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch static-mac chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerManagedSwitchStaticMac(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/static-mac"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerManagedSwitchStaticMac API operation for FortiManager Device updates the specified Managed SwitchStatic Mac.
// Returns the index value of the Managed SwitchStatic Mac and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch static-mac chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchStaticMac(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/static-mac"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchStaticMac API operation for FortiManager Device deletes the specified Managed SwitchStatic Mac.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch static-mac chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchStaticMac(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/static-mac"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerManagedSwitchStaticMac API operation for FortiManager Device gets the Managed SwitchStatic Mac
// with the specified index value.
// Returns the requested Managed SwitchStatic Mac value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch static-mac chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchStaticMac(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/static-mac"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerManagedSwitchStormControl API operation for FortiManager Device updates the specified Managed SwitchStorm Control.
// Returns the index value of the Managed SwitchStorm Control and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch storm-control chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchStormControl(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/storm-control"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchStormControl API operation for FortiManager Device deletes the specified Managed SwitchStorm Control.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch storm-control chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchStormControl(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - managed-switch storm-control
	return
}

// ReadSwitchControllerManagedSwitchStormControl API operation for FortiManager Device gets the Managed SwitchStorm Control
// with the specified index value.
// Returns the requested Managed SwitchStorm Control value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch storm-control chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchStormControl(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/storm-control"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerManagedSwitchStpInstance API operation for FortiManager Device creates a new Managed SwitchStp Instance.
// Returns the index value of the Managed SwitchStp Instance and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch stp-instance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerManagedSwitchStpInstance(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/stp-instance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerManagedSwitchStpInstance API operation for FortiManager Device updates the specified Managed SwitchStp Instance.
// Returns the index value of the Managed SwitchStp Instance and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch stp-instance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchStpInstance(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/stp-instance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchStpInstance API operation for FortiManager Device deletes the specified Managed SwitchStp Instance.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch stp-instance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchStpInstance(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/stp-instance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerManagedSwitchStpInstance API operation for FortiManager Device gets the Managed SwitchStp Instance
// with the specified index value.
// Returns the requested Managed SwitchStp Instance value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch stp-instance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchStpInstance(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/stp-instance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerManagedSwitchStpSettings API operation for FortiManager Device updates the specified Managed SwitchStp Settings.
// Returns the index value of the Managed SwitchStp Settings and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch stp-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchStpSettings(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/stp-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchStpSettings API operation for FortiManager Device deletes the specified Managed SwitchStp Settings.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch stp-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchStpSettings(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - managed-switch stp-settings
	return
}

// ReadSwitchControllerManagedSwitchStpSettings API operation for FortiManager Device gets the Managed SwitchStp Settings
// with the specified index value.
// Returns the requested Managed SwitchStp Settings value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch stp-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchStpSettings(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/stp-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerManagedSwitchSwitchLog API operation for FortiManager Device updates the specified Managed SwitchSwitch Log.
// Returns the index value of the Managed SwitchSwitch Log and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch switch-log chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchSwitchLog(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/switch-log"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchSwitchLog API operation for FortiManager Device deletes the specified Managed SwitchSwitch Log.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch switch-log chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchSwitchLog(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - managed-switch switch-log
	return
}

// ReadSwitchControllerManagedSwitchSwitchLog API operation for FortiManager Device gets the Managed SwitchSwitch Log
// with the specified index value.
// Returns the requested Managed SwitchSwitch Log value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch switch-log chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchSwitchLog(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/switch-log"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerManagedSwitchVlan API operation for FortiManager Device creates a new Managed SwitchVlan.
// Returns the index value of the Managed SwitchVlan and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch vlan chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerManagedSwitchVlan(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/vlan"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerManagedSwitchVlan API operation for FortiManager Device updates the specified Managed SwitchVlan.
// Returns the index value of the Managed SwitchVlan and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch vlan chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerManagedSwitchVlan(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/vlan"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerManagedSwitchVlan API operation for FortiManager Device deletes the specified Managed SwitchVlan.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch vlan chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerManagedSwitchVlan(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/vlan"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerManagedSwitchVlan API operation for FortiManager Device gets the Managed SwitchVlan
// with the specified index value.
// Returns the requested Managed SwitchVlan value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller managed-switch vlan chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerManagedSwitchVlan(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/managed-switch/{managed-switch}/vlan"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerNetworkMonitorSettings API operation for FortiManager Device updates the specified Network Monitor Settings.
// Returns the index value of the Network Monitor Settings and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller network-monitor-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerNetworkMonitorSettings(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/network-monitor-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerNetworkMonitorSettings API operation for FortiManager Device deletes the specified Network Monitor Settings.
// Returns error for service API and SDK errors.
// See the device - switch-controller network-monitor-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerNetworkMonitorSettings(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - network-monitor-settings
	return
}

// ReadSwitchControllerNetworkMonitorSettings API operation for FortiManager Device gets the Network Monitor Settings
// with the specified index value.
// Returns the requested Network Monitor Settings value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller network-monitor-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerNetworkMonitorSettings(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/network-monitor-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerPtpInterfacePolicy API operation for FortiManager Device creates a new PtpInterface Policy.
// Returns the index value of the PtpInterface Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller ptp interface-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerPtpInterfacePolicy(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/ptp/interface-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerPtpInterfacePolicy API operation for FortiManager Device updates the specified PtpInterface Policy.
// Returns the index value of the PtpInterface Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller ptp interface-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerPtpInterfacePolicy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/ptp/interface-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerPtpInterfacePolicy API operation for FortiManager Device deletes the specified PtpInterface Policy.
// Returns error for service API and SDK errors.
// See the device - switch-controller ptp interface-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerPtpInterfacePolicy(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/ptp/interface-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerPtpInterfacePolicy API operation for FortiManager Device gets the PtpInterface Policy
// with the specified index value.
// Returns the requested PtpInterface Policy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller ptp interface-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerPtpInterfacePolicy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/ptp/interface-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerPtpPolicy API operation for FortiManager Device creates a new PtpPolicy.
// Returns the index value of the PtpPolicy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller ptp policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerPtpPolicy(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/ptp/policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerPtpPolicy API operation for FortiManager Device updates the specified PtpPolicy.
// Returns the index value of the PtpPolicy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller ptp policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerPtpPolicy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/ptp/policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerPtpPolicy API operation for FortiManager Device deletes the specified PtpPolicy.
// Returns error for service API and SDK errors.
// See the device - switch-controller ptp policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerPtpPolicy(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/ptp/policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerPtpPolicy API operation for FortiManager Device gets the PtpPolicy
// with the specified index value.
// Returns the requested PtpPolicy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller ptp policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerPtpPolicy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/ptp/policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerPtpProfile API operation for FortiManager Device creates a new PtpProfile.
// Returns the index value of the PtpProfile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller ptp profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerPtpProfile(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/ptp/profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerPtpProfile API operation for FortiManager Device updates the specified PtpProfile.
// Returns the index value of the PtpProfile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller ptp profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerPtpProfile(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/ptp/profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerPtpProfile API operation for FortiManager Device deletes the specified PtpProfile.
// Returns error for service API and SDK errors.
// See the device - switch-controller ptp profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerPtpProfile(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/ptp/profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerPtpProfile API operation for FortiManager Device gets the PtpProfile
// with the specified index value.
// Returns the requested PtpProfile value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller ptp profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerPtpProfile(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/ptp/profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerPtpSettings API operation for FortiManager Device updates the specified PtpSettings.
// Returns the index value of the PtpSettings and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller ptp settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerPtpSettings(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/ptp/settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerPtpSettings API operation for FortiManager Device deletes the specified PtpSettings.
// Returns error for service API and SDK errors.
// See the device - switch-controller ptp settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerPtpSettings(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - ptp settings
	return
}

// ReadSwitchControllerPtpSettings API operation for FortiManager Device gets the PtpSettings
// with the specified index value.
// Returns the requested PtpSettings value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller ptp settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerPtpSettings(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/ptp/settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerQosDot1PMap API operation for FortiManager Device creates a new QosDot1P Map.
// Returns the index value of the QosDot1P Map and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos dot1p-map chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerQosDot1PMap(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/dot1p-map"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerQosDot1PMap API operation for FortiManager Device updates the specified QosDot1P Map.
// Returns the index value of the QosDot1P Map and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos dot1p-map chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerQosDot1PMap(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/dot1p-map"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerQosDot1PMap API operation for FortiManager Device deletes the specified QosDot1P Map.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos dot1p-map chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerQosDot1PMap(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/dot1p-map"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerQosDot1PMap API operation for FortiManager Device gets the QosDot1P Map
// with the specified index value.
// Returns the requested QosDot1P Map value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos dot1p-map chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerQosDot1PMap(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/dot1p-map"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerQosIpDscpMap API operation for FortiManager Device creates a new QosIp Dscp Map.
// Returns the index value of the QosIp Dscp Map and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos ip-dscp-map chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerQosIpDscpMap(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/ip-dscp-map"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerQosIpDscpMap API operation for FortiManager Device updates the specified QosIp Dscp Map.
// Returns the index value of the QosIp Dscp Map and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos ip-dscp-map chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerQosIpDscpMap(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/ip-dscp-map"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerQosIpDscpMap API operation for FortiManager Device deletes the specified QosIp Dscp Map.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos ip-dscp-map chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerQosIpDscpMap(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/ip-dscp-map"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerQosIpDscpMap API operation for FortiManager Device gets the QosIp Dscp Map
// with the specified index value.
// Returns the requested QosIp Dscp Map value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos ip-dscp-map chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerQosIpDscpMap(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/ip-dscp-map"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerQosIpDscpMapMap API operation for FortiManager Device creates a new QosIp Dscp MapMap.
// Returns the index value of the QosIp Dscp MapMap and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos ip-dscp-map map chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerQosIpDscpMapMap(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/ip-dscp-map/{ip-dscp-map}/map"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerQosIpDscpMapMap API operation for FortiManager Device updates the specified QosIp Dscp MapMap.
// Returns the index value of the QosIp Dscp MapMap and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos ip-dscp-map map chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerQosIpDscpMapMap(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/ip-dscp-map/{ip-dscp-map}/map"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerQosIpDscpMapMap API operation for FortiManager Device deletes the specified QosIp Dscp MapMap.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos ip-dscp-map map chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerQosIpDscpMapMap(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/ip-dscp-map/{ip-dscp-map}/map"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerQosIpDscpMapMap API operation for FortiManager Device gets the QosIp Dscp MapMap
// with the specified index value.
// Returns the requested QosIp Dscp MapMap value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos ip-dscp-map map chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerQosIpDscpMapMap(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/ip-dscp-map/{ip-dscp-map}/map"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerQosQosPolicy API operation for FortiManager Device creates a new QosQos Policy.
// Returns the index value of the QosQos Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos qos-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerQosQosPolicy(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/qos-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerQosQosPolicy API operation for FortiManager Device updates the specified QosQos Policy.
// Returns the index value of the QosQos Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos qos-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerQosQosPolicy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/qos-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerQosQosPolicy API operation for FortiManager Device deletes the specified QosQos Policy.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos qos-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerQosQosPolicy(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/qos-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerQosQosPolicy API operation for FortiManager Device gets the QosQos Policy
// with the specified index value.
// Returns the requested QosQos Policy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos qos-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerQosQosPolicy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/qos-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerQosQueuePolicy API operation for FortiManager Device creates a new QosQueue Policy.
// Returns the index value of the QosQueue Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos queue-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerQosQueuePolicy(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/queue-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerQosQueuePolicy API operation for FortiManager Device updates the specified QosQueue Policy.
// Returns the index value of the QosQueue Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos queue-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerQosQueuePolicy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/queue-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerQosQueuePolicy API operation for FortiManager Device deletes the specified QosQueue Policy.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos queue-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerQosQueuePolicy(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/queue-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerQosQueuePolicy API operation for FortiManager Device gets the QosQueue Policy
// with the specified index value.
// Returns the requested QosQueue Policy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller qos queue-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerQosQueuePolicy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/qos/queue-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerRemoteLog API operation for FortiManager Device creates a new Remote Log.
// Returns the index value of the Remote Log and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller remote-log chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerRemoteLog(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/remote-log"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerRemoteLog API operation for FortiManager Device updates the specified Remote Log.
// Returns the index value of the Remote Log and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller remote-log chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerRemoteLog(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/remote-log"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerRemoteLog API operation for FortiManager Device deletes the specified Remote Log.
// Returns error for service API and SDK errors.
// See the device - switch-controller remote-log chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerRemoteLog(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/remote-log"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerRemoteLog API operation for FortiManager Device gets the Remote Log
// with the specified index value.
// Returns the requested Remote Log value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller remote-log chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerRemoteLog(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/remote-log"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerSecurityPolicy8021X API operation for FortiManager Device creates a new Security Policy802 1X.
// Returns the index value of the Security Policy802 1X and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller security-policy 802-1X chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerSecurityPolicy8021X(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/security-policy/802-1X"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerSecurityPolicy8021X API operation for FortiManager Device updates the specified Security Policy802 1X.
// Returns the index value of the Security Policy802 1X and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller security-policy 802-1X chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerSecurityPolicy8021X(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/security-policy/802-1X"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerSecurityPolicy8021X API operation for FortiManager Device deletes the specified Security Policy802 1X.
// Returns error for service API and SDK errors.
// See the device - switch-controller security-policy 802-1X chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerSecurityPolicy8021X(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/security-policy/802-1X"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerSecurityPolicy8021X API operation for FortiManager Device gets the Security Policy802 1X
// with the specified index value.
// Returns the requested Security Policy802 1X value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller security-policy 802-1X chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerSecurityPolicy8021X(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/security-policy/802-1X"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerSecurityPolicyLocalAccess API operation for FortiManager Device creates a new Security PolicyLocal Access.
// Returns the index value of the Security PolicyLocal Access and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller security-policy local-access chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerSecurityPolicyLocalAccess(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/security-policy/local-access"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerSecurityPolicyLocalAccess API operation for FortiManager Device updates the specified Security PolicyLocal Access.
// Returns the index value of the Security PolicyLocal Access and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller security-policy local-access chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerSecurityPolicyLocalAccess(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/security-policy/local-access"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerSecurityPolicyLocalAccess API operation for FortiManager Device deletes the specified Security PolicyLocal Access.
// Returns error for service API and SDK errors.
// See the device - switch-controller security-policy local-access chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerSecurityPolicyLocalAccess(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/security-policy/local-access"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerSecurityPolicyLocalAccess API operation for FortiManager Device gets the Security PolicyLocal Access
// with the specified index value.
// Returns the requested Security PolicyLocal Access value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller security-policy local-access chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerSecurityPolicyLocalAccess(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/security-policy/local-access"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerSflow API operation for FortiManager Device updates the specified Sflow.
// Returns the index value of the Sflow and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller sflow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerSflow(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/sflow"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerSflow API operation for FortiManager Device deletes the specified Sflow.
// Returns error for service API and SDK errors.
// See the device - switch-controller sflow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerSflow(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - sflow
	return
}

// ReadSwitchControllerSflow API operation for FortiManager Device gets the Sflow
// with the specified index value.
// Returns the requested Sflow value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller sflow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerSflow(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/sflow"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerSnmpCommunity API operation for FortiManager Device creates a new Snmp Community.
// Returns the index value of the Snmp Community and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller snmp-community chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerSnmpCommunity(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/snmp-community"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerSnmpCommunity API operation for FortiManager Device updates the specified Snmp Community.
// Returns the index value of the Snmp Community and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller snmp-community chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerSnmpCommunity(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/snmp-community"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerSnmpCommunity API operation for FortiManager Device deletes the specified Snmp Community.
// Returns error for service API and SDK errors.
// See the device - switch-controller snmp-community chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerSnmpCommunity(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/snmp-community"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerSnmpCommunity API operation for FortiManager Device gets the Snmp Community
// with the specified index value.
// Returns the requested Snmp Community value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller snmp-community chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerSnmpCommunity(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/snmp-community"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerSnmpCommunityHosts API operation for FortiManager Device creates a new Snmp CommunityHosts.
// Returns the index value of the Snmp CommunityHosts and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller snmp-community hosts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerSnmpCommunityHosts(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/snmp-community/{snmp-community}/hosts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerSnmpCommunityHosts API operation for FortiManager Device updates the specified Snmp CommunityHosts.
// Returns the index value of the Snmp CommunityHosts and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller snmp-community hosts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerSnmpCommunityHosts(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/snmp-community/{snmp-community}/hosts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerSnmpCommunityHosts API operation for FortiManager Device deletes the specified Snmp CommunityHosts.
// Returns error for service API and SDK errors.
// See the device - switch-controller snmp-community hosts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerSnmpCommunityHosts(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/snmp-community/{snmp-community}/hosts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerSnmpCommunityHosts API operation for FortiManager Device gets the Snmp CommunityHosts
// with the specified index value.
// Returns the requested Snmp CommunityHosts value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller snmp-community hosts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerSnmpCommunityHosts(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/snmp-community/{snmp-community}/hosts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerSnmpSysinfo API operation for FortiManager Device updates the specified Snmp Sysinfo.
// Returns the index value of the Snmp Sysinfo and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller snmp-sysinfo chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerSnmpSysinfo(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/snmp-sysinfo"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerSnmpSysinfo API operation for FortiManager Device deletes the specified Snmp Sysinfo.
// Returns error for service API and SDK errors.
// See the device - switch-controller snmp-sysinfo chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerSnmpSysinfo(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - snmp-sysinfo
	return
}

// ReadSwitchControllerSnmpSysinfo API operation for FortiManager Device gets the Snmp Sysinfo
// with the specified index value.
// Returns the requested Snmp Sysinfo value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller snmp-sysinfo chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerSnmpSysinfo(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/snmp-sysinfo"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerSnmpTrapThreshold API operation for FortiManager Device updates the specified Snmp Trap Threshold.
// Returns the index value of the Snmp Trap Threshold and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller snmp-trap-threshold chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerSnmpTrapThreshold(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/snmp-trap-threshold"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerSnmpTrapThreshold API operation for FortiManager Device deletes the specified Snmp Trap Threshold.
// Returns error for service API and SDK errors.
// See the device - switch-controller snmp-trap-threshold chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerSnmpTrapThreshold(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - snmp-trap-threshold
	return
}

// ReadSwitchControllerSnmpTrapThreshold API operation for FortiManager Device gets the Snmp Trap Threshold
// with the specified index value.
// Returns the requested Snmp Trap Threshold value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller snmp-trap-threshold chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerSnmpTrapThreshold(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/snmp-trap-threshold"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerSnmpUser API operation for FortiManager Device creates a new Snmp User.
// Returns the index value of the Snmp User and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller snmp-user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerSnmpUser(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/snmp-user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerSnmpUser API operation for FortiManager Device updates the specified Snmp User.
// Returns the index value of the Snmp User and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller snmp-user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerSnmpUser(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/snmp-user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerSnmpUser API operation for FortiManager Device deletes the specified Snmp User.
// Returns error for service API and SDK errors.
// See the device - switch-controller snmp-user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerSnmpUser(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/snmp-user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerSnmpUser API operation for FortiManager Device gets the Snmp User
// with the specified index value.
// Returns the requested Snmp User value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller snmp-user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerSnmpUser(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/snmp-user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerStormControl API operation for FortiManager Device updates the specified Storm Control.
// Returns the index value of the Storm Control and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller storm-control chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerStormControl(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/storm-control"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerStormControl API operation for FortiManager Device deletes the specified Storm Control.
// Returns error for service API and SDK errors.
// See the device - switch-controller storm-control chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerStormControl(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - storm-control
	return
}

// ReadSwitchControllerStormControl API operation for FortiManager Device gets the Storm Control
// with the specified index value.
// Returns the requested Storm Control value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller storm-control chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerStormControl(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/storm-control"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerStormControlPolicy API operation for FortiManager Device creates a new Storm Control Policy.
// Returns the index value of the Storm Control Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller storm-control-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerStormControlPolicy(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/storm-control-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerStormControlPolicy API operation for FortiManager Device updates the specified Storm Control Policy.
// Returns the index value of the Storm Control Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller storm-control-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerStormControlPolicy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/storm-control-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerStormControlPolicy API operation for FortiManager Device deletes the specified Storm Control Policy.
// Returns error for service API and SDK errors.
// See the device - switch-controller storm-control-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerStormControlPolicy(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/storm-control-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerStormControlPolicy API operation for FortiManager Device gets the Storm Control Policy
// with the specified index value.
// Returns the requested Storm Control Policy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller storm-control-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerStormControlPolicy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/storm-control-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerStpInstance API operation for FortiManager Device creates a new Stp Instance.
// Returns the index value of the Stp Instance and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller stp-instance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerStpInstance(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/stp-instance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerStpInstance API operation for FortiManager Device updates the specified Stp Instance.
// Returns the index value of the Stp Instance and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller stp-instance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerStpInstance(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/stp-instance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerStpInstance API operation for FortiManager Device deletes the specified Stp Instance.
// Returns error for service API and SDK errors.
// See the device - switch-controller stp-instance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerStpInstance(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/stp-instance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerStpInstance API operation for FortiManager Device gets the Stp Instance
// with the specified index value.
// Returns the requested Stp Instance value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller stp-instance chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerStpInstance(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/stp-instance"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerStpSettings API operation for FortiManager Device updates the specified Stp Settings.
// Returns the index value of the Stp Settings and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller stp-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerStpSettings(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/stp-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerStpSettings API operation for FortiManager Device deletes the specified Stp Settings.
// Returns error for service API and SDK errors.
// See the device - switch-controller stp-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerStpSettings(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - stp-settings
	return
}

// ReadSwitchControllerStpSettings API operation for FortiManager Device gets the Stp Settings
// with the specified index value.
// Returns the requested Stp Settings value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller stp-settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerStpSettings(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/stp-settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerSwitchGroup API operation for FortiManager Device creates a new Switch Group.
// Returns the index value of the Switch Group and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller switch-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerSwitchGroup(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/switch-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerSwitchGroup API operation for FortiManager Device updates the specified Switch Group.
// Returns the index value of the Switch Group and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller switch-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerSwitchGroup(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/switch-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerSwitchGroup API operation for FortiManager Device deletes the specified Switch Group.
// Returns error for service API and SDK errors.
// See the device - switch-controller switch-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerSwitchGroup(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/switch-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerSwitchGroup API operation for FortiManager Device gets the Switch Group
// with the specified index value.
// Returns the requested Switch Group value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller switch-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerSwitchGroup(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/switch-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerSwitchInterfaceTag API operation for FortiManager Device creates a new Switch Interface Tag.
// Returns the index value of the Switch Interface Tag and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller switch-interface-tag chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerSwitchInterfaceTag(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/switch-interface-tag"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerSwitchInterfaceTag API operation for FortiManager Device updates the specified Switch Interface Tag.
// Returns the index value of the Switch Interface Tag and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller switch-interface-tag chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerSwitchInterfaceTag(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/switch-interface-tag"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerSwitchInterfaceTag API operation for FortiManager Device deletes the specified Switch Interface Tag.
// Returns error for service API and SDK errors.
// See the device - switch-controller switch-interface-tag chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerSwitchInterfaceTag(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/switch-interface-tag"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerSwitchInterfaceTag API operation for FortiManager Device gets the Switch Interface Tag
// with the specified index value.
// Returns the requested Switch Interface Tag value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller switch-interface-tag chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerSwitchInterfaceTag(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/switch-interface-tag"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerSwitchLog API operation for FortiManager Device updates the specified Switch Log.
// Returns the index value of the Switch Log and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller switch-log chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerSwitchLog(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/switch-log"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerSwitchLog API operation for FortiManager Device deletes the specified Switch Log.
// Returns error for service API and SDK errors.
// See the device - switch-controller switch-log chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerSwitchLog(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - switch-log
	return
}

// ReadSwitchControllerSwitchLog API operation for FortiManager Device gets the Switch Log
// with the specified index value.
// Returns the requested Switch Log value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller switch-log chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerSwitchLog(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/switch-log"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerSwitchProfile API operation for FortiManager Device creates a new Switch Profile.
// Returns the index value of the Switch Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller switch-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerSwitchProfile(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/switch-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerSwitchProfile API operation for FortiManager Device updates the specified Switch Profile.
// Returns the index value of the Switch Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller switch-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerSwitchProfile(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/switch-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerSwitchProfile API operation for FortiManager Device deletes the specified Switch Profile.
// Returns error for service API and SDK errors.
// See the device - switch-controller switch-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerSwitchProfile(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/switch-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerSwitchProfile API operation for FortiManager Device gets the Switch Profile
// with the specified index value.
// Returns the requested Switch Profile value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller switch-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerSwitchProfile(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/switch-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerSystem API operation for FortiManager Device updates the specified System.
// Returns the index value of the System and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller system chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerSystem(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/switch-controller/system"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerSystem API operation for FortiManager Device deletes the specified System.
// Returns error for service API and SDK errors.
// See the device - switch-controller system chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerSystem(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - system
	return
}

// ReadSwitchControllerSystem API operation for FortiManager Device gets the System
// with the specified index value.
// Returns the requested System value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller system chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerSystem(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/switch-controller/system"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerTrafficPolicy API operation for FortiManager Device creates a new Traffic Policy.
// Returns the index value of the Traffic Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerTrafficPolicy(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/traffic-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerTrafficPolicy API operation for FortiManager Device updates the specified Traffic Policy.
// Returns the index value of the Traffic Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerTrafficPolicy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/traffic-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerTrafficPolicy API operation for FortiManager Device deletes the specified Traffic Policy.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerTrafficPolicy(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/traffic-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerTrafficPolicy API operation for FortiManager Device gets the Traffic Policy
// with the specified index value.
// Returns the requested Traffic Policy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerTrafficPolicy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/traffic-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSwitchControllerTrafficSniffer API operation for FortiManager Device updates the specified Traffic Sniffer.
// Returns the index value of the Traffic Sniffer and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-sniffer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerTrafficSniffer(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/traffic-sniffer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerTrafficSniffer API operation for FortiManager Device deletes the specified Traffic Sniffer.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-sniffer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerTrafficSniffer(mkey string, paradict map[string]string) (err error) {

	//No unset API for switch-controller - traffic-sniffer
	return
}

// ReadSwitchControllerTrafficSniffer API operation for FortiManager Device gets the Traffic Sniffer
// with the specified index value.
// Returns the requested Traffic Sniffer value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-sniffer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerTrafficSniffer(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/traffic-sniffer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerTrafficSnifferTargetIp API operation for FortiManager Device creates a new Traffic SnifferTarget Ip.
// Returns the index value of the Traffic SnifferTarget Ip and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-sniffer target-ip chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerTrafficSnifferTargetIp(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/traffic-sniffer/target-ip"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerTrafficSnifferTargetIp API operation for FortiManager Device updates the specified Traffic SnifferTarget Ip.
// Returns the index value of the Traffic SnifferTarget Ip and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-sniffer target-ip chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerTrafficSnifferTargetIp(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/traffic-sniffer/target-ip"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerTrafficSnifferTargetIp API operation for FortiManager Device deletes the specified Traffic SnifferTarget Ip.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-sniffer target-ip chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerTrafficSnifferTargetIp(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/traffic-sniffer/target-ip"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerTrafficSnifferTargetIp API operation for FortiManager Device gets the Traffic SnifferTarget Ip
// with the specified index value.
// Returns the requested Traffic SnifferTarget Ip value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-sniffer target-ip chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerTrafficSnifferTargetIp(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/traffic-sniffer/target-ip"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerTrafficSnifferTargetMac API operation for FortiManager Device creates a new Traffic SnifferTarget Mac.
// Returns the index value of the Traffic SnifferTarget Mac and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-sniffer target-mac chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerTrafficSnifferTargetMac(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/traffic-sniffer/target-mac"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerTrafficSnifferTargetMac API operation for FortiManager Device updates the specified Traffic SnifferTarget Mac.
// Returns the index value of the Traffic SnifferTarget Mac and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-sniffer target-mac chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerTrafficSnifferTargetMac(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/traffic-sniffer/target-mac"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerTrafficSnifferTargetMac API operation for FortiManager Device deletes the specified Traffic SnifferTarget Mac.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-sniffer target-mac chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerTrafficSnifferTargetMac(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/traffic-sniffer/target-mac"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerTrafficSnifferTargetMac API operation for FortiManager Device gets the Traffic SnifferTarget Mac
// with the specified index value.
// Returns the requested Traffic SnifferTarget Mac value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-sniffer target-mac chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerTrafficSnifferTargetMac(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/traffic-sniffer/target-mac"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerTrafficSnifferTargetPort API operation for FortiManager Device creates a new Traffic SnifferTarget Port.
// Returns the index value of the Traffic SnifferTarget Port and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-sniffer target-port chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerTrafficSnifferTargetPort(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/traffic-sniffer/target-port"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerTrafficSnifferTargetPort API operation for FortiManager Device updates the specified Traffic SnifferTarget Port.
// Returns the index value of the Traffic SnifferTarget Port and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-sniffer target-port chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerTrafficSnifferTargetPort(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/traffic-sniffer/target-port"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerTrafficSnifferTargetPort API operation for FortiManager Device deletes the specified Traffic SnifferTarget Port.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-sniffer target-port chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerTrafficSnifferTargetPort(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/traffic-sniffer/target-port"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerTrafficSnifferTargetPort API operation for FortiManager Device gets the Traffic SnifferTarget Port
// with the specified index value.
// Returns the requested Traffic SnifferTarget Port value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller traffic-sniffer target-port chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerTrafficSnifferTargetPort(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/traffic-sniffer/target-port"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerVirtualPortPool API operation for FortiManager Device creates a new Virtual Port Pool.
// Returns the index value of the Virtual Port Pool and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller virtual-port-pool chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerVirtualPortPool(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/virtual-port-pool"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerVirtualPortPool API operation for FortiManager Device updates the specified Virtual Port Pool.
// Returns the index value of the Virtual Port Pool and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller virtual-port-pool chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerVirtualPortPool(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/virtual-port-pool"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerVirtualPortPool API operation for FortiManager Device deletes the specified Virtual Port Pool.
// Returns error for service API and SDK errors.
// See the device - switch-controller virtual-port-pool chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerVirtualPortPool(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/virtual-port-pool"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerVirtualPortPool API operation for FortiManager Device gets the Virtual Port Pool
// with the specified index value.
// Returns the requested Virtual Port Pool value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller virtual-port-pool chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerVirtualPortPool(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/virtual-port-pool"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSwitchControllerVlanPolicy API operation for FortiManager Device creates a new Vlan Policy.
// Returns the index value of the Vlan Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller vlan-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSwitchControllerVlanPolicy(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/vlan-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSwitchControllerVlanPolicy API operation for FortiManager Device updates the specified Vlan Policy.
// Returns the index value of the Vlan Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller vlan-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSwitchControllerVlanPolicy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/vlan-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSwitchControllerVlanPolicy API operation for FortiManager Device deletes the specified Vlan Policy.
// Returns error for service API and SDK errors.
// See the device - switch-controller vlan-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSwitchControllerVlanPolicy(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/vlan-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSwitchControllerVlanPolicy API operation for FortiManager Device gets the Vlan Policy
// with the specified index value.
// Returns the requested Vlan Policy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - switch-controller vlan-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSwitchControllerVlanPolicy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/switch-controller/vlan-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystem5GModemModem1 API operation for FortiManager Device updates the specified 5G ModemModem1.
// Returns the index value of the 5G ModemModem1 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system 5g-modem modem1 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystem5GModemModem1(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/5g-modem/modem1"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystem5GModemModem1 API operation for FortiManager Device deletes the specified 5G ModemModem1.
// Returns error for service API and SDK errors.
// See the device - system 5g-modem modem1 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystem5GModemModem1(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - 5g-modem modem1
	return
}

// ReadSystem5GModemModem1 API operation for FortiManager Device gets the 5G ModemModem1
// with the specified index value.
// Returns the requested 5G ModemModem1 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system 5g-modem modem1 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystem5GModemModem1(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/5g-modem/modem1"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemAccprofile API operation for FortiManager Device creates a new Accprofile.
// Returns the index value of the Accprofile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system accprofile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemAccprofile(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/accprofile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemAccprofile API operation for FortiManager Device updates the specified Accprofile.
// Returns the index value of the Accprofile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system accprofile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAccprofile(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/accprofile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemAccprofile API operation for FortiManager Device deletes the specified Accprofile.
// Returns error for service API and SDK errors.
// See the device - system accprofile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemAccprofile(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/accprofile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemAccprofile API operation for FortiManager Device gets the Accprofile
// with the specified index value.
// Returns the requested Accprofile value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system accprofile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAccprofile(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/accprofile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemAcme API operation for FortiManager Device updates the specified Acme.
// Returns the index value of the Acme and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system acme chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAcme(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/acme"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemAcme API operation for FortiManager Device deletes the specified Acme.
// Returns error for service API and SDK errors.
// See the device - system acme chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemAcme(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - acme
	return
}

// ReadSystemAcme API operation for FortiManager Device gets the Acme
// with the specified index value.
// Returns the requested Acme value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system acme chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAcme(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/acme"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemAcmeAccounts API operation for FortiManager Device creates a new AcmeAccounts.
// Returns the index value of the AcmeAccounts and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system acme accounts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemAcmeAccounts(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/acme/accounts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemAcmeAccounts API operation for FortiManager Device updates the specified AcmeAccounts.
// Returns the index value of the AcmeAccounts and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system acme accounts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAcmeAccounts(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/acme/accounts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemAcmeAccounts API operation for FortiManager Device deletes the specified AcmeAccounts.
// Returns error for service API and SDK errors.
// See the device - system acme accounts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemAcmeAccounts(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/acme/accounts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemAcmeAccounts API operation for FortiManager Device gets the AcmeAccounts
// with the specified index value.
// Returns the requested AcmeAccounts value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system acme accounts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAcmeAccounts(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/acme/accounts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemAdmin API operation for FortiManager Device creates a new Admin.
// Returns the index value of the Admin and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemAdmin(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemAdmin API operation for FortiManager Device updates the specified Admin.
// Returns the index value of the Admin and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAdmin(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemAdmin API operation for FortiManager Device deletes the specified Admin.
// Returns error for service API and SDK errors.
// See the device - system admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemAdmin(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemAdmin API operation for FortiManager Device gets the Admin
// with the specified index value.
// Returns the requested Admin value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAdmin(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemAffinityInterrupt API operation for FortiManager Device creates a new Affinity Interrupt.
// Returns the index value of the Affinity Interrupt and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system affinity-interrupt chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemAffinityInterrupt(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/affinity-interrupt"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemAffinityInterrupt API operation for FortiManager Device updates the specified Affinity Interrupt.
// Returns the index value of the Affinity Interrupt and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system affinity-interrupt chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAffinityInterrupt(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/affinity-interrupt"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemAffinityInterrupt API operation for FortiManager Device deletes the specified Affinity Interrupt.
// Returns error for service API and SDK errors.
// See the device - system affinity-interrupt chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemAffinityInterrupt(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/affinity-interrupt"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemAffinityInterrupt API operation for FortiManager Device gets the Affinity Interrupt
// with the specified index value.
// Returns the requested Affinity Interrupt value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system affinity-interrupt chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAffinityInterrupt(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/affinity-interrupt"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemAffinityPacketRedistribution API operation for FortiManager Device creates a new Affinity Packet Redistribution.
// Returns the index value of the Affinity Packet Redistribution and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system affinity-packet-redistribution chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemAffinityPacketRedistribution(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/affinity-packet-redistribution"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemAffinityPacketRedistribution API operation for FortiManager Device updates the specified Affinity Packet Redistribution.
// Returns the index value of the Affinity Packet Redistribution and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system affinity-packet-redistribution chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAffinityPacketRedistribution(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/affinity-packet-redistribution"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemAffinityPacketRedistribution API operation for FortiManager Device deletes the specified Affinity Packet Redistribution.
// Returns error for service API and SDK errors.
// See the device - system affinity-packet-redistribution chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemAffinityPacketRedistribution(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/affinity-packet-redistribution"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemAffinityPacketRedistribution API operation for FortiManager Device gets the Affinity Packet Redistribution
// with the specified index value.
// Returns the requested Affinity Packet Redistribution value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system affinity-packet-redistribution chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAffinityPacketRedistribution(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/affinity-packet-redistribution"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemAlias API operation for FortiManager Device creates a new Alias.
// Returns the index value of the Alias and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system alias chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemAlias(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/alias"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemAlias API operation for FortiManager Device updates the specified Alias.
// Returns the index value of the Alias and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system alias chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAlias(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/alias"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemAlias API operation for FortiManager Device deletes the specified Alias.
// Returns error for service API and SDK errors.
// See the device - system alias chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemAlias(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/alias"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemAlias API operation for FortiManager Device gets the Alias
// with the specified index value.
// Returns the requested Alias value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system alias chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAlias(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/alias"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemApiUser API operation for FortiManager Device creates a new Api User.
// Returns the index value of the Api User and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system api-user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemApiUser(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/api-user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemApiUser API operation for FortiManager Device updates the specified Api User.
// Returns the index value of the Api User and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system api-user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemApiUser(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/api-user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemApiUser API operation for FortiManager Device deletes the specified Api User.
// Returns error for service API and SDK errors.
// See the device - system api-user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemApiUser(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/api-user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemApiUser API operation for FortiManager Device gets the Api User
// with the specified index value.
// Returns the requested Api User value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system api-user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemApiUser(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/api-user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemApiUserTrusthost API operation for FortiManager Device creates a new Api UserTrusthost.
// Returns the index value of the Api UserTrusthost and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system api-user trusthost chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemApiUserTrusthost(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/api-user/{api-user}/trusthost"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemApiUserTrusthost API operation for FortiManager Device updates the specified Api UserTrusthost.
// Returns the index value of the Api UserTrusthost and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system api-user trusthost chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemApiUserTrusthost(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/api-user/{api-user}/trusthost"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemApiUserTrusthost API operation for FortiManager Device deletes the specified Api UserTrusthost.
// Returns error for service API and SDK errors.
// See the device - system api-user trusthost chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemApiUserTrusthost(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/api-user/{api-user}/trusthost"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemApiUserTrusthost API operation for FortiManager Device gets the Api UserTrusthost
// with the specified index value.
// Returns the requested Api UserTrusthost value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system api-user trusthost chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemApiUserTrusthost(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/api-user/{api-user}/trusthost"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemArpTable API operation for FortiManager Device creates a new Arp Table.
// Returns the index value of the Arp Table and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system arp-table chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemArpTable(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/arp-table"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemArpTable API operation for FortiManager Device updates the specified Arp Table.
// Returns the index value of the Arp Table and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system arp-table chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemArpTable(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/arp-table"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemArpTable API operation for FortiManager Device deletes the specified Arp Table.
// Returns error for service API and SDK errors.
// See the device - system arp-table chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemArpTable(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/arp-table"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemArpTable API operation for FortiManager Device gets the Arp Table
// with the specified index value.
// Returns the requested Arp Table value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system arp-table chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemArpTable(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/arp-table"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemAutoInstall API operation for FortiManager Device updates the specified Auto Install.
// Returns the index value of the Auto Install and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system auto-install chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAutoInstall(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/auto-install"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemAutoInstall API operation for FortiManager Device deletes the specified Auto Install.
// Returns error for service API and SDK errors.
// See the device - system auto-install chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemAutoInstall(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - auto-install
	return
}

// ReadSystemAutoInstall API operation for FortiManager Device gets the Auto Install
// with the specified index value.
// Returns the requested Auto Install value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system auto-install chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAutoInstall(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/auto-install"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemAutoScript API operation for FortiManager Device creates a new Auto Script.
// Returns the index value of the Auto Script and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system auto-script chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemAutoScript(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/auto-script"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemAutoScript API operation for FortiManager Device updates the specified Auto Script.
// Returns the index value of the Auto Script and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system auto-script chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAutoScript(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/auto-script"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemAutoScript API operation for FortiManager Device deletes the specified Auto Script.
// Returns error for service API and SDK errors.
// See the device - system auto-script chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemAutoScript(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/auto-script"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemAutoScript API operation for FortiManager Device gets the Auto Script
// with the specified index value.
// Returns the requested Auto Script value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system auto-script chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAutoScript(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/auto-script"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemAutomationAction API operation for FortiManager Device creates a new Automation Action.
// Returns the index value of the Automation Action and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-action chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemAutomationAction(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-action"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemAutomationAction API operation for FortiManager Device updates the specified Automation Action.
// Returns the index value of the Automation Action and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-action chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAutomationAction(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-action"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemAutomationAction API operation for FortiManager Device deletes the specified Automation Action.
// Returns error for service API and SDK errors.
// See the device - system automation-action chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemAutomationAction(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/automation-action"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemAutomationAction API operation for FortiManager Device gets the Automation Action
// with the specified index value.
// Returns the requested Automation Action value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-action chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAutomationAction(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-action"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemAutomationActionHttpHeaders API operation for FortiManager Device creates a new Automation ActionHttp Headers.
// Returns the index value of the Automation ActionHttp Headers and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-action http-headers chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemAutomationActionHttpHeaders(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-action/{automation-action}/http-headers"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemAutomationActionHttpHeaders API operation for FortiManager Device updates the specified Automation ActionHttp Headers.
// Returns the index value of the Automation ActionHttp Headers and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-action http-headers chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAutomationActionHttpHeaders(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-action/{automation-action}/http-headers"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemAutomationActionHttpHeaders API operation for FortiManager Device deletes the specified Automation ActionHttp Headers.
// Returns error for service API and SDK errors.
// See the device - system automation-action http-headers chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemAutomationActionHttpHeaders(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/automation-action/{automation-action}/http-headers"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemAutomationActionHttpHeaders API operation for FortiManager Device gets the Automation ActionHttp Headers
// with the specified index value.
// Returns the requested Automation ActionHttp Headers value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-action http-headers chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAutomationActionHttpHeaders(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-action/{automation-action}/http-headers"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemAutomationDestination API operation for FortiManager Device creates a new Automation Destination.
// Returns the index value of the Automation Destination and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-destination chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemAutomationDestination(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-destination"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemAutomationDestination API operation for FortiManager Device updates the specified Automation Destination.
// Returns the index value of the Automation Destination and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-destination chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAutomationDestination(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-destination"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemAutomationDestination API operation for FortiManager Device deletes the specified Automation Destination.
// Returns error for service API and SDK errors.
// See the device - system automation-destination chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemAutomationDestination(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/automation-destination"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemAutomationDestination API operation for FortiManager Device gets the Automation Destination
// with the specified index value.
// Returns the requested Automation Destination value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-destination chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAutomationDestination(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-destination"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemAutomationStitch API operation for FortiManager Device creates a new Automation Stitch.
// Returns the index value of the Automation Stitch and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-stitch chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemAutomationStitch(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-stitch"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemAutomationStitch API operation for FortiManager Device updates the specified Automation Stitch.
// Returns the index value of the Automation Stitch and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-stitch chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAutomationStitch(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-stitch"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemAutomationStitch API operation for FortiManager Device deletes the specified Automation Stitch.
// Returns error for service API and SDK errors.
// See the device - system automation-stitch chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemAutomationStitch(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/automation-stitch"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemAutomationStitch API operation for FortiManager Device gets the Automation Stitch
// with the specified index value.
// Returns the requested Automation Stitch value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-stitch chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAutomationStitch(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-stitch"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemAutomationStitchActions API operation for FortiManager Device creates a new Automation StitchActions.
// Returns the index value of the Automation StitchActions and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-stitch actions chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemAutomationStitchActions(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-stitch/{automation-stitch}/actions"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemAutomationStitchActions API operation for FortiManager Device updates the specified Automation StitchActions.
// Returns the index value of the Automation StitchActions and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-stitch actions chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAutomationStitchActions(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-stitch/{automation-stitch}/actions"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemAutomationStitchActions API operation for FortiManager Device deletes the specified Automation StitchActions.
// Returns error for service API and SDK errors.
// See the device - system automation-stitch actions chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemAutomationStitchActions(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/automation-stitch/{automation-stitch}/actions"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemAutomationStitchActions API operation for FortiManager Device gets the Automation StitchActions
// with the specified index value.
// Returns the requested Automation StitchActions value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-stitch actions chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAutomationStitchActions(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-stitch/{automation-stitch}/actions"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemAutomationStitchActionsMove API operation for FortiManager Device updates the specified Automation StitchActionsMove.
// Returns the index value of the Automation StitchActionsMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-stitch actions move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAutomationStitchActionsMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-stitch/{automation-stitch}/actions/{actions}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadSystemAutomationStitchActionsMove API operation for FortiManager Device gets the Automation StitchActionsMove
// with the specified index value.
// Returns the requested Automation StitchActionsMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-stitch actions move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAutomationStitchActionsMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-stitch/{automation-stitch}/actions"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"id"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// CreateSystemAutomationTrigger API operation for FortiManager Device creates a new Automation Trigger.
// Returns the index value of the Automation Trigger and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-trigger chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemAutomationTrigger(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-trigger"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemAutomationTrigger API operation for FortiManager Device updates the specified Automation Trigger.
// Returns the index value of the Automation Trigger and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-trigger chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAutomationTrigger(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-trigger"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemAutomationTrigger API operation for FortiManager Device deletes the specified Automation Trigger.
// Returns error for service API and SDK errors.
// See the device - system automation-trigger chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemAutomationTrigger(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/automation-trigger"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemAutomationTrigger API operation for FortiManager Device gets the Automation Trigger
// with the specified index value.
// Returns the requested Automation Trigger value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-trigger chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAutomationTrigger(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-trigger"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemAutomationTriggerFields API operation for FortiManager Device creates a new Automation TriggerFields.
// Returns the index value of the Automation TriggerFields and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-trigger fields chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemAutomationTriggerFields(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-trigger/{automation-trigger}/fields"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemAutomationTriggerFields API operation for FortiManager Device updates the specified Automation TriggerFields.
// Returns the index value of the Automation TriggerFields and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-trigger fields chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAutomationTriggerFields(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-trigger/{automation-trigger}/fields"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemAutomationTriggerFields API operation for FortiManager Device deletes the specified Automation TriggerFields.
// Returns error for service API and SDK errors.
// See the device - system automation-trigger fields chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemAutomationTriggerFields(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/automation-trigger/{automation-trigger}/fields"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemAutomationTriggerFields API operation for FortiManager Device gets the Automation TriggerFields
// with the specified index value.
// Returns the requested Automation TriggerFields value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system automation-trigger fields chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAutomationTriggerFields(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/automation-trigger/{automation-trigger}/fields"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemAutoupdateSchedule API operation for FortiManager Device updates the specified AutoupdateSchedule.
// Returns the index value of the AutoupdateSchedule and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system autoupdate schedule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAutoupdateSchedule(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/autoupdate/schedule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemAutoupdateSchedule API operation for FortiManager Device deletes the specified AutoupdateSchedule.
// Returns error for service API and SDK errors.
// See the device - system autoupdate schedule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemAutoupdateSchedule(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - autoupdate schedule
	return
}

// ReadSystemAutoupdateSchedule API operation for FortiManager Device gets the AutoupdateSchedule
// with the specified index value.
// Returns the requested AutoupdateSchedule value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system autoupdate schedule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAutoupdateSchedule(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/autoupdate/schedule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemAutoupdateTunneling API operation for FortiManager Device updates the specified AutoupdateTunneling.
// Returns the index value of the AutoupdateTunneling and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system autoupdate tunneling chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemAutoupdateTunneling(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/autoupdate/tunneling"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemAutoupdateTunneling API operation for FortiManager Device deletes the specified AutoupdateTunneling.
// Returns error for service API and SDK errors.
// See the device - system autoupdate tunneling chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemAutoupdateTunneling(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - autoupdate tunneling
	return
}

// ReadSystemAutoupdateTunneling API operation for FortiManager Device gets the AutoupdateTunneling
// with the specified index value.
// Returns the requested AutoupdateTunneling value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system autoupdate tunneling chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemAutoupdateTunneling(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/autoupdate/tunneling"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemCentralManagement API operation for FortiManager Device updates the specified Central Management.
// Returns the index value of the Central Management and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system central-management chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemCentralManagement(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/central-management"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemCentralManagement API operation for FortiManager Device deletes the specified Central Management.
// Returns error for service API and SDK errors.
// See the device - system central-management chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemCentralManagement(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - central-management
	return
}

// ReadSystemCentralManagement API operation for FortiManager Device gets the Central Management
// with the specified index value.
// Returns the requested Central Management value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system central-management chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemCentralManagement(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/central-management"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemCentralManagementServerList API operation for FortiManager Device creates a new Central ManagementServer List.
// Returns the index value of the Central ManagementServer List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system central-management server-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemCentralManagementServerList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/central-management/server-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemCentralManagementServerList API operation for FortiManager Device updates the specified Central ManagementServer List.
// Returns the index value of the Central ManagementServer List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system central-management server-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemCentralManagementServerList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/central-management/server-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemCentralManagementServerList API operation for FortiManager Device deletes the specified Central ManagementServer List.
// Returns error for service API and SDK errors.
// See the device - system central-management server-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemCentralManagementServerList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/central-management/server-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemCentralManagementServerList API operation for FortiManager Device gets the Central ManagementServer List
// with the specified index value.
// Returns the requested Central ManagementServer List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system central-management server-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemCentralManagementServerList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/central-management/server-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemClusterSync API operation for FortiManager Device creates a new Cluster Sync.
// Returns the index value of the Cluster Sync and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system cluster-sync chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemClusterSync(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/cluster-sync"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemClusterSync API operation for FortiManager Device updates the specified Cluster Sync.
// Returns the index value of the Cluster Sync and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system cluster-sync chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemClusterSync(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/cluster-sync"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemClusterSync API operation for FortiManager Device deletes the specified Cluster Sync.
// Returns error for service API and SDK errors.
// See the device - system cluster-sync chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemClusterSync(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/cluster-sync"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemClusterSync API operation for FortiManager Device gets the Cluster Sync
// with the specified index value.
// Returns the requested Cluster Sync value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system cluster-sync chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemClusterSync(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/cluster-sync"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemClusterSyncSessionSyncFilter API operation for FortiManager Device updates the specified Cluster SyncSession Sync Filter.
// Returns the index value of the Cluster SyncSession Sync Filter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system cluster-sync session-sync-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemClusterSyncSessionSyncFilter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/cluster-sync/{cluster-sync}/session-sync-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemClusterSyncSessionSyncFilter API operation for FortiManager Device deletes the specified Cluster SyncSession Sync Filter.
// Returns error for service API and SDK errors.
// See the device - system cluster-sync session-sync-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemClusterSyncSessionSyncFilter(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - cluster-sync session-sync-filter
	return
}

// ReadSystemClusterSyncSessionSyncFilter API operation for FortiManager Device gets the Cluster SyncSession Sync Filter
// with the specified index value.
// Returns the requested Cluster SyncSession Sync Filter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system cluster-sync session-sync-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemClusterSyncSessionSyncFilter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/cluster-sync/{cluster-sync}/session-sync-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemClusterSyncSessionSyncFilterCustomService API operation for FortiManager Device creates a new Cluster SyncSession Sync FilterCustom Service.
// Returns the index value of the Cluster SyncSession Sync FilterCustom Service and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system cluster-sync session-sync-filter custom-service chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemClusterSyncSessionSyncFilterCustomService(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/cluster-sync/{cluster-sync}/session-sync-filter/custom-service"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemClusterSyncSessionSyncFilterCustomService API operation for FortiManager Device updates the specified Cluster SyncSession Sync FilterCustom Service.
// Returns the index value of the Cluster SyncSession Sync FilterCustom Service and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system cluster-sync session-sync-filter custom-service chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemClusterSyncSessionSyncFilterCustomService(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/cluster-sync/{cluster-sync}/session-sync-filter/custom-service"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemClusterSyncSessionSyncFilterCustomService API operation for FortiManager Device deletes the specified Cluster SyncSession Sync FilterCustom Service.
// Returns error for service API and SDK errors.
// See the device - system cluster-sync session-sync-filter custom-service chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemClusterSyncSessionSyncFilterCustomService(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/cluster-sync/{cluster-sync}/session-sync-filter/custom-service"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemClusterSyncSessionSyncFilterCustomService API operation for FortiManager Device gets the Cluster SyncSession Sync FilterCustom Service
// with the specified index value.
// Returns the requested Cluster SyncSession Sync FilterCustom Service value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system cluster-sync session-sync-filter custom-service chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemClusterSyncSessionSyncFilterCustomService(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/cluster-sync/{cluster-sync}/session-sync-filter/custom-service"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemConsole API operation for FortiManager Device updates the specified Console.
// Returns the index value of the Console and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system console chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemConsole(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/console"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemConsole API operation for FortiManager Device deletes the specified Console.
// Returns error for service API and SDK errors.
// See the device - system console chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemConsole(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - console
	return
}

// ReadSystemConsole API operation for FortiManager Device gets the Console
// with the specified index value.
// Returns the requested Console value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system console chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemConsole(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/console"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemConsoleServerEntries API operation for FortiManager Device creates a new Console ServerEntries.
// Returns the index value of the Console ServerEntries and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system console-server entries chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemConsoleServerEntries(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/console-server/entries"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemConsoleServerEntries API operation for FortiManager Device updates the specified Console ServerEntries.
// Returns the index value of the Console ServerEntries and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system console-server entries chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemConsoleServerEntries(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/console-server/entries"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemConsoleServerEntries API operation for FortiManager Device deletes the specified Console ServerEntries.
// Returns error for service API and SDK errors.
// See the device - system console-server entries chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemConsoleServerEntries(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/console-server/entries"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemConsoleServerEntries API operation for FortiManager Device gets the Console ServerEntries
// with the specified index value.
// Returns the requested Console ServerEntries value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system console-server entries chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemConsoleServerEntries(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/console-server/entries"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemCsf API operation for FortiManager Device updates the specified Csf.
// Returns the index value of the Csf and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system csf chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemCsf(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/csf"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemCsf API operation for FortiManager Device deletes the specified Csf.
// Returns error for service API and SDK errors.
// See the device - system csf chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemCsf(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - csf
	return
}

// ReadSystemCsf API operation for FortiManager Device gets the Csf
// with the specified index value.
// Returns the requested Csf value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system csf chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemCsf(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/csf"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemCsfFabricConnector API operation for FortiManager Device creates a new CsfFabric Connector.
// Returns the index value of the CsfFabric Connector and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system csf fabric-connector chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemCsfFabricConnector(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/csf/fabric-connector"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemCsfFabricConnector API operation for FortiManager Device updates the specified CsfFabric Connector.
// Returns the index value of the CsfFabric Connector and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system csf fabric-connector chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemCsfFabricConnector(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/csf/fabric-connector"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemCsfFabricConnector API operation for FortiManager Device deletes the specified CsfFabric Connector.
// Returns error for service API and SDK errors.
// See the device - system csf fabric-connector chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemCsfFabricConnector(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/csf/fabric-connector"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemCsfFabricConnector API operation for FortiManager Device gets the CsfFabric Connector
// with the specified index value.
// Returns the requested CsfFabric Connector value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system csf fabric-connector chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemCsfFabricConnector(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/csf/fabric-connector"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemCsfFabricDevice API operation for FortiManager Device creates a new CsfFabric Device.
// Returns the index value of the CsfFabric Device and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system csf fabric-device chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemCsfFabricDevice(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/csf/fabric-device"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemCsfFabricDevice API operation for FortiManager Device updates the specified CsfFabric Device.
// Returns the index value of the CsfFabric Device and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system csf fabric-device chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemCsfFabricDevice(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/csf/fabric-device"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemCsfFabricDevice API operation for FortiManager Device deletes the specified CsfFabric Device.
// Returns error for service API and SDK errors.
// See the device - system csf fabric-device chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemCsfFabricDevice(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/csf/fabric-device"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemCsfFabricDevice API operation for FortiManager Device gets the CsfFabric Device
// with the specified index value.
// Returns the requested CsfFabric Device value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system csf fabric-device chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemCsfFabricDevice(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/csf/fabric-device"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemDdns API operation for FortiManager Device creates a new Ddns.
// Returns the index value of the Ddns and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ddns chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemDdns(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ddns"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemDdns API operation for FortiManager Device updates the specified Ddns.
// Returns the index value of the Ddns and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ddns chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemDdns(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ddns"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemDdns API operation for FortiManager Device deletes the specified Ddns.
// Returns error for service API and SDK errors.
// See the device - system ddns chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemDdns(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/ddns"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemDdns API operation for FortiManager Device gets the Ddns
// with the specified index value.
// Returns the requested Ddns value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ddns chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemDdns(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ddns"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemDedicatedMgmt API operation for FortiManager Device updates the specified Dedicated Mgmt.
// Returns the index value of the Dedicated Mgmt and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dedicated-mgmt chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemDedicatedMgmt(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/dedicated-mgmt"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemDedicatedMgmt API operation for FortiManager Device deletes the specified Dedicated Mgmt.
// Returns error for service API and SDK errors.
// See the device - system dedicated-mgmt chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemDedicatedMgmt(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - dedicated-mgmt
	return
}

// ReadSystemDedicatedMgmt API operation for FortiManager Device gets the Dedicated Mgmt
// with the specified index value.
// Returns the requested Dedicated Mgmt value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dedicated-mgmt chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemDedicatedMgmt(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/dedicated-mgmt"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemDeviceUpgrade API operation for FortiManager Device creates a new Device Upgrade.
// Returns the index value of the Device Upgrade and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system device-upgrade chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemDeviceUpgrade(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/device-upgrade"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemDeviceUpgrade API operation for FortiManager Device updates the specified Device Upgrade.
// Returns the index value of the Device Upgrade and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system device-upgrade chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemDeviceUpgrade(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/device-upgrade"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemDeviceUpgrade API operation for FortiManager Device deletes the specified Device Upgrade.
// Returns error for service API and SDK errors.
// See the device - system device-upgrade chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemDeviceUpgrade(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/device-upgrade"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemDeviceUpgrade API operation for FortiManager Device gets the Device Upgrade
// with the specified index value.
// Returns the requested Device Upgrade value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system device-upgrade chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemDeviceUpgrade(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/device-upgrade"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemDeviceUpgradeKnownHaMembers API operation for FortiManager Device creates a new Device UpgradeKnown Ha Members.
// Returns the index value of the Device UpgradeKnown Ha Members and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system device-upgrade known-ha-members chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemDeviceUpgradeKnownHaMembers(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/device-upgrade/{device-upgrade}/known-ha-members"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemDeviceUpgradeKnownHaMembers API operation for FortiManager Device updates the specified Device UpgradeKnown Ha Members.
// Returns the index value of the Device UpgradeKnown Ha Members and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system device-upgrade known-ha-members chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemDeviceUpgradeKnownHaMembers(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/device-upgrade/{device-upgrade}/known-ha-members"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemDeviceUpgradeKnownHaMembers API operation for FortiManager Device deletes the specified Device UpgradeKnown Ha Members.
// Returns error for service API and SDK errors.
// See the device - system device-upgrade known-ha-members chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemDeviceUpgradeKnownHaMembers(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/device-upgrade/{device-upgrade}/known-ha-members"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemDeviceUpgradeKnownHaMembers API operation for FortiManager Device gets the Device UpgradeKnown Ha Members
// with the specified index value.
// Returns the requested Device UpgradeKnown Ha Members value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system device-upgrade known-ha-members chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemDeviceUpgradeKnownHaMembers(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/device-upgrade/{device-upgrade}/known-ha-members"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemDhcp6Server API operation for FortiManager Device creates a new Dhcp6Server.
// Returns the index value of the Dhcp6Server and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dhcp6 server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemDhcp6Server(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/dhcp6/server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemDhcp6Server API operation for FortiManager Device updates the specified Dhcp6Server.
// Returns the index value of the Dhcp6Server and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dhcp6 server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemDhcp6Server(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/dhcp6/server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemDhcp6Server API operation for FortiManager Device deletes the specified Dhcp6Server.
// Returns error for service API and SDK errors.
// See the device - system dhcp6 server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemDhcp6Server(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/dhcp6/server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemDhcp6Server API operation for FortiManager Device gets the Dhcp6Server
// with the specified index value.
// Returns the requested Dhcp6Server value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dhcp6 server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemDhcp6Server(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/dhcp6/server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemDhcp6ServerIpRange API operation for FortiManager Device creates a new Dhcp6ServerIp Range.
// Returns the index value of the Dhcp6ServerIp Range and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dhcp6 server ip-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemDhcp6ServerIpRange(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/dhcp6/server/{server}/ip-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemDhcp6ServerIpRange API operation for FortiManager Device updates the specified Dhcp6ServerIp Range.
// Returns the index value of the Dhcp6ServerIp Range and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dhcp6 server ip-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemDhcp6ServerIpRange(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/dhcp6/server/{server}/ip-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemDhcp6ServerIpRange API operation for FortiManager Device deletes the specified Dhcp6ServerIp Range.
// Returns error for service API and SDK errors.
// See the device - system dhcp6 server ip-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemDhcp6ServerIpRange(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/dhcp6/server/{server}/ip-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemDhcp6ServerIpRange API operation for FortiManager Device gets the Dhcp6ServerIp Range
// with the specified index value.
// Returns the requested Dhcp6ServerIp Range value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dhcp6 server ip-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemDhcp6ServerIpRange(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/dhcp6/server/{server}/ip-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemDhcp6ServerPrefixRange API operation for FortiManager Device creates a new Dhcp6ServerPrefix Range.
// Returns the index value of the Dhcp6ServerPrefix Range and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dhcp6 server prefix-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemDhcp6ServerPrefixRange(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/dhcp6/server/{server}/prefix-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemDhcp6ServerPrefixRange API operation for FortiManager Device updates the specified Dhcp6ServerPrefix Range.
// Returns the index value of the Dhcp6ServerPrefix Range and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dhcp6 server prefix-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemDhcp6ServerPrefixRange(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/dhcp6/server/{server}/prefix-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemDhcp6ServerPrefixRange API operation for FortiManager Device deletes the specified Dhcp6ServerPrefix Range.
// Returns error for service API and SDK errors.
// See the device - system dhcp6 server prefix-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemDhcp6ServerPrefixRange(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/dhcp6/server/{server}/prefix-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemDhcp6ServerPrefixRange API operation for FortiManager Device gets the Dhcp6ServerPrefix Range
// with the specified index value.
// Returns the requested Dhcp6ServerPrefix Range value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dhcp6 server prefix-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemDhcp6ServerPrefixRange(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/dhcp6/server/{server}/prefix-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemDns API operation for FortiManager Device updates the specified Dns.
// Returns the index value of the Dns and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dns chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemDns(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/dns"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemDns API operation for FortiManager Device deletes the specified Dns.
// Returns error for service API and SDK errors.
// See the device - system dns chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemDns(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - dns
	return
}

// ReadSystemDns API operation for FortiManager Device gets the Dns
// with the specified index value.
// Returns the requested Dns value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dns chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemDns(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/dns"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemDnsServer API operation for FortiManager Device creates a new Dns Server.
// Returns the index value of the Dns Server and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dns-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemDnsServer(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/dns-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemDnsServer API operation for FortiManager Device updates the specified Dns Server.
// Returns the index value of the Dns Server and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dns-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemDnsServer(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/dns-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemDnsServer API operation for FortiManager Device deletes the specified Dns Server.
// Returns error for service API and SDK errors.
// See the device - system dns-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemDnsServer(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/dns-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemDnsServer API operation for FortiManager Device gets the Dns Server
// with the specified index value.
// Returns the requested Dns Server value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dns-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemDnsServer(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/dns-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemDns64 API operation for FortiManager Device updates the specified Dns64.
// Returns the index value of the Dns64 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dns64 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemDns64(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/dns64"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemDns64 API operation for FortiManager Device deletes the specified Dns64.
// Returns error for service API and SDK errors.
// See the device - system dns64 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemDns64(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - dns64
	return
}

// ReadSystemDns64 API operation for FortiManager Device gets the Dns64
// with the specified index value.
// Returns the requested Dns64 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dns64 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemDns64(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/dns64"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemDscpBasedPriority API operation for FortiManager Device creates a new Dscp Based Priority.
// Returns the index value of the Dscp Based Priority and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dscp-based-priority chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemDscpBasedPriority(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/dscp-based-priority"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemDscpBasedPriority API operation for FortiManager Device updates the specified Dscp Based Priority.
// Returns the index value of the Dscp Based Priority and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dscp-based-priority chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemDscpBasedPriority(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/dscp-based-priority"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemDscpBasedPriority API operation for FortiManager Device deletes the specified Dscp Based Priority.
// Returns error for service API and SDK errors.
// See the device - system dscp-based-priority chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemDscpBasedPriority(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/dscp-based-priority"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemDscpBasedPriority API operation for FortiManager Device gets the Dscp Based Priority
// with the specified index value.
// Returns the requested Dscp Based Priority value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system dscp-based-priority chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemDscpBasedPriority(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/dscp-based-priority"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemEmailServer API operation for FortiManager Device updates the specified Email Server.
// Returns the index value of the Email Server and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system email-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemEmailServer(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/email-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemEmailServer API operation for FortiManager Device deletes the specified Email Server.
// Returns error for service API and SDK errors.
// See the device - system email-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemEmailServer(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - email-server
	return
}

// ReadSystemEmailServer API operation for FortiManager Device gets the Email Server
// with the specified index value.
// Returns the requested Email Server value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system email-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemEmailServer(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/email-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemEvpn API operation for FortiManager Device creates a new Evpn.
// Returns the index value of the Evpn and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system evpn chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemEvpn(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/evpn"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemEvpn API operation for FortiManager Device updates the specified Evpn.
// Returns the index value of the Evpn and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system evpn chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemEvpn(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/evpn"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemEvpn API operation for FortiManager Device deletes the specified Evpn.
// Returns error for service API and SDK errors.
// See the device - system evpn chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemEvpn(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/evpn"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemEvpn API operation for FortiManager Device gets the Evpn
// with the specified index value.
// Returns the requested Evpn value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system evpn chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemEvpn(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/evpn"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemFabricVpn API operation for FortiManager Device updates the specified Fabric Vpn.
// Returns the index value of the Fabric Vpn and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system fabric-vpn chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemFabricVpn(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/fabric-vpn"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemFabricVpn API operation for FortiManager Device deletes the specified Fabric Vpn.
// Returns error for service API and SDK errors.
// See the device - system fabric-vpn chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemFabricVpn(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - fabric-vpn
	return
}

// ReadSystemFabricVpn API operation for FortiManager Device gets the Fabric Vpn
// with the specified index value.
// Returns the requested Fabric Vpn value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system fabric-vpn chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemFabricVpn(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/fabric-vpn"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemFabricVpnAdvertisedSubnets API operation for FortiManager Device creates a new Fabric VpnAdvertised Subnets.
// Returns the index value of the Fabric VpnAdvertised Subnets and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system fabric-vpn advertised-subnets chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemFabricVpnAdvertisedSubnets(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/fabric-vpn/advertised-subnets"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemFabricVpnAdvertisedSubnets API operation for FortiManager Device updates the specified Fabric VpnAdvertised Subnets.
// Returns the index value of the Fabric VpnAdvertised Subnets and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system fabric-vpn advertised-subnets chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemFabricVpnAdvertisedSubnets(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/fabric-vpn/advertised-subnets"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemFabricVpnAdvertisedSubnets API operation for FortiManager Device deletes the specified Fabric VpnAdvertised Subnets.
// Returns error for service API and SDK errors.
// See the device - system fabric-vpn advertised-subnets chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemFabricVpnAdvertisedSubnets(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/fabric-vpn/advertised-subnets"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemFabricVpnAdvertisedSubnets API operation for FortiManager Device gets the Fabric VpnAdvertised Subnets
// with the specified index value.
// Returns the requested Fabric VpnAdvertised Subnets value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system fabric-vpn advertised-subnets chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemFabricVpnAdvertisedSubnets(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/fabric-vpn/advertised-subnets"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemFabricVpnOverlays API operation for FortiManager Device creates a new Fabric VpnOverlays.
// Returns the index value of the Fabric VpnOverlays and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system fabric-vpn overlays chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemFabricVpnOverlays(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/fabric-vpn/overlays"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemFabricVpnOverlays API operation for FortiManager Device updates the specified Fabric VpnOverlays.
// Returns the index value of the Fabric VpnOverlays and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system fabric-vpn overlays chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemFabricVpnOverlays(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/fabric-vpn/overlays"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemFabricVpnOverlays API operation for FortiManager Device deletes the specified Fabric VpnOverlays.
// Returns error for service API and SDK errors.
// See the device - system fabric-vpn overlays chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemFabricVpnOverlays(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/fabric-vpn/overlays"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemFabricVpnOverlays API operation for FortiManager Device gets the Fabric VpnOverlays
// with the specified index value.
// Returns the requested Fabric VpnOverlays value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system fabric-vpn overlays chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemFabricVpnOverlays(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/fabric-vpn/overlays"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemFederatedUpgrade API operation for FortiManager Device updates the specified Federated Upgrade.
// Returns the index value of the Federated Upgrade and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system federated-upgrade chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemFederatedUpgrade(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/federated-upgrade"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemFederatedUpgrade API operation for FortiManager Device deletes the specified Federated Upgrade.
// Returns error for service API and SDK errors.
// See the device - system federated-upgrade chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemFederatedUpgrade(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - federated-upgrade
	return
}

// ReadSystemFederatedUpgrade API operation for FortiManager Device gets the Federated Upgrade
// with the specified index value.
// Returns the requested Federated Upgrade value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system federated-upgrade chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemFederatedUpgrade(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/federated-upgrade"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemFederatedUpgradeKnownHaMembers API operation for FortiManager Device creates a new Federated UpgradeKnown Ha Members.
// Returns the index value of the Federated UpgradeKnown Ha Members and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system federated-upgrade known-ha-members chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemFederatedUpgradeKnownHaMembers(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/federated-upgrade/known-ha-members"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemFederatedUpgradeKnownHaMembers API operation for FortiManager Device updates the specified Federated UpgradeKnown Ha Members.
// Returns the index value of the Federated UpgradeKnown Ha Members and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system federated-upgrade known-ha-members chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemFederatedUpgradeKnownHaMembers(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/federated-upgrade/known-ha-members"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemFederatedUpgradeKnownHaMembers API operation for FortiManager Device deletes the specified Federated UpgradeKnown Ha Members.
// Returns error for service API and SDK errors.
// See the device - system federated-upgrade known-ha-members chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemFederatedUpgradeKnownHaMembers(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/federated-upgrade/known-ha-members"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemFederatedUpgradeKnownHaMembers API operation for FortiManager Device gets the Federated UpgradeKnown Ha Members
// with the specified index value.
// Returns the requested Federated UpgradeKnown Ha Members value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system federated-upgrade known-ha-members chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemFederatedUpgradeKnownHaMembers(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/federated-upgrade/known-ha-members"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemFederatedUpgradeNodeList API operation for FortiManager Device creates a new Federated UpgradeNode List.
// Returns the index value of the Federated UpgradeNode List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system federated-upgrade node-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemFederatedUpgradeNodeList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/federated-upgrade/node-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemFederatedUpgradeNodeList API operation for FortiManager Device updates the specified Federated UpgradeNode List.
// Returns the index value of the Federated UpgradeNode List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system federated-upgrade node-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemFederatedUpgradeNodeList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/federated-upgrade/node-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemFederatedUpgradeNodeList API operation for FortiManager Device deletes the specified Federated UpgradeNode List.
// Returns error for service API and SDK errors.
// See the device - system federated-upgrade node-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemFederatedUpgradeNodeList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/federated-upgrade/node-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemFederatedUpgradeNodeList API operation for FortiManager Device gets the Federated UpgradeNode List
// with the specified index value.
// Returns the requested Federated UpgradeNode List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system federated-upgrade node-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemFederatedUpgradeNodeList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/federated-upgrade/node-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemFipsCc API operation for FortiManager Device updates the specified Fips Cc.
// Returns the index value of the Fips Cc and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system fips-cc chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemFipsCc(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/fips-cc"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemFipsCc API operation for FortiManager Device deletes the specified Fips Cc.
// Returns error for service API and SDK errors.
// See the device - system fips-cc chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemFipsCc(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - fips-cc
	return
}

// ReadSystemFipsCc API operation for FortiManager Device gets the Fips Cc
// with the specified index value.
// Returns the requested Fips Cc value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system fips-cc chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemFipsCc(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/fips-cc"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemFortindr API operation for FortiManager Device updates the specified Fortindr.
// Returns the index value of the Fortindr and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system fortindr chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemFortindr(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/fortindr"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemFortindr API operation for FortiManager Device deletes the specified Fortindr.
// Returns error for service API and SDK errors.
// See the device - system fortindr chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemFortindr(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - fortindr
	return
}

// ReadSystemFortindr API operation for FortiManager Device gets the Fortindr
// with the specified index value.
// Returns the requested Fortindr value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system fortindr chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemFortindr(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/fortindr"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemFortisandbox API operation for FortiManager Device updates the specified Fortisandbox.
// Returns the index value of the Fortisandbox and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system fortisandbox chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemFortisandbox(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/fortisandbox"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemFortisandbox API operation for FortiManager Device deletes the specified Fortisandbox.
// Returns error for service API and SDK errors.
// See the device - system fortisandbox chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemFortisandbox(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - fortisandbox
	return
}

// ReadSystemFortisandbox API operation for FortiManager Device gets the Fortisandbox
// with the specified index value.
// Returns the requested Fortisandbox value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system fortisandbox chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemFortisandbox(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/fortisandbox"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemFssoPolling API operation for FortiManager Device updates the specified Fsso Polling.
// Returns the index value of the Fsso Polling and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system fsso-polling chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemFssoPolling(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/fsso-polling"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemFssoPolling API operation for FortiManager Device deletes the specified Fsso Polling.
// Returns error for service API and SDK errors.
// See the device - system fsso-polling chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemFssoPolling(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - fsso-polling
	return
}

// ReadSystemFssoPolling API operation for FortiManager Device gets the Fsso Polling
// with the specified index value.
// Returns the requested Fsso Polling value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system fsso-polling chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemFssoPolling(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/fsso-polling"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemFtmPush API operation for FortiManager Device updates the specified Ftm Push.
// Returns the index value of the Ftm Push and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ftm-push chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemFtmPush(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ftm-push"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemFtmPush API operation for FortiManager Device deletes the specified Ftm Push.
// Returns error for service API and SDK errors.
// See the device - system ftm-push chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemFtmPush(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ftm-push
	return
}

// ReadSystemFtmPush API operation for FortiManager Device gets the Ftm Push
// with the specified index value.
// Returns the requested Ftm Push value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ftm-push chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemFtmPush(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ftm-push"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemGeneve API operation for FortiManager Device creates a new Geneve.
// Returns the index value of the Geneve and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system geneve chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemGeneve(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/geneve"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemGeneve API operation for FortiManager Device updates the specified Geneve.
// Returns the index value of the Geneve and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system geneve chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemGeneve(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/geneve"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemGeneve API operation for FortiManager Device deletes the specified Geneve.
// Returns error for service API and SDK errors.
// See the device - system geneve chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemGeneve(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/geneve"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemGeneve API operation for FortiManager Device gets the Geneve
// with the specified index value.
// Returns the requested Geneve value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system geneve chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemGeneve(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/geneve"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemGlobal API operation for FortiManager Device updates the specified Global.
// Returns the index value of the Global and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemGlobal(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/global"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemGlobal API operation for FortiManager Device deletes the specified Global.
// Returns error for service API and SDK errors.
// See the device - system global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemGlobal(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - global
	return
}

// ReadSystemGlobal API operation for FortiManager Device gets the Global
// with the specified index value.
// Returns the requested Global value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemGlobal(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/global"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemGreTunnel API operation for FortiManager Device creates a new Gre Tunnel.
// Returns the index value of the Gre Tunnel and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system gre-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemGreTunnel(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/gre-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemGreTunnel API operation for FortiManager Device updates the specified Gre Tunnel.
// Returns the index value of the Gre Tunnel and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system gre-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemGreTunnel(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/gre-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemGreTunnel API operation for FortiManager Device deletes the specified Gre Tunnel.
// Returns error for service API and SDK errors.
// See the device - system gre-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemGreTunnel(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/gre-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemGreTunnel API operation for FortiManager Device gets the Gre Tunnel
// with the specified index value.
// Returns the requested Gre Tunnel value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system gre-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemGreTunnel(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/gre-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemHa API operation for FortiManager Device updates the specified Ha.
// Returns the index value of the Ha and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ha chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemHa(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ha"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemHa API operation for FortiManager Device deletes the specified Ha.
// Returns error for service API and SDK errors.
// See the device - system ha chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemHa(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ha
	return
}

// ReadSystemHa API operation for FortiManager Device gets the Ha
// with the specified index value.
// Returns the requested Ha value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ha chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemHa(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ha"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemHaMonitor API operation for FortiManager Device updates the specified Ha Monitor.
// Returns the index value of the Ha Monitor and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ha-monitor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemHaMonitor(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ha-monitor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemHaMonitor API operation for FortiManager Device deletes the specified Ha Monitor.
// Returns error for service API and SDK errors.
// See the device - system ha-monitor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemHaMonitor(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ha-monitor
	return
}

// ReadSystemHaMonitor API operation for FortiManager Device gets the Ha Monitor
// with the specified index value.
// Returns the requested Ha Monitor value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ha-monitor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemHaMonitor(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ha-monitor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemHaHaMgmtInterfaces API operation for FortiManager Device creates a new HaHa Mgmt Interfaces.
// Returns the index value of the HaHa Mgmt Interfaces and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ha ha-mgmt-interfaces chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemHaHaMgmtInterfaces(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ha/ha-mgmt-interfaces"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemHaHaMgmtInterfaces API operation for FortiManager Device updates the specified HaHa Mgmt Interfaces.
// Returns the index value of the HaHa Mgmt Interfaces and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ha ha-mgmt-interfaces chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemHaHaMgmtInterfaces(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ha/ha-mgmt-interfaces"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemHaHaMgmtInterfaces API operation for FortiManager Device deletes the specified HaHa Mgmt Interfaces.
// Returns error for service API and SDK errors.
// See the device - system ha ha-mgmt-interfaces chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemHaHaMgmtInterfaces(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/ha/ha-mgmt-interfaces"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemHaHaMgmtInterfaces API operation for FortiManager Device gets the HaHa Mgmt Interfaces
// with the specified index value.
// Returns the requested HaHa Mgmt Interfaces value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ha ha-mgmt-interfaces chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemHaHaMgmtInterfaces(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ha/ha-mgmt-interfaces"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemHaUnicastPeers API operation for FortiManager Device creates a new HaUnicast Peers.
// Returns the index value of the HaUnicast Peers and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ha unicast-peers chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemHaUnicastPeers(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ha/unicast-peers"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemHaUnicastPeers API operation for FortiManager Device updates the specified HaUnicast Peers.
// Returns the index value of the HaUnicast Peers and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ha unicast-peers chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemHaUnicastPeers(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ha/unicast-peers"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemHaUnicastPeers API operation for FortiManager Device deletes the specified HaUnicast Peers.
// Returns error for service API and SDK errors.
// See the device - system ha unicast-peers chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemHaUnicastPeers(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/ha/unicast-peers"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemHaUnicastPeers API operation for FortiManager Device gets the HaUnicast Peers
// with the specified index value.
// Returns the requested HaUnicast Peers value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ha unicast-peers chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemHaUnicastPeers(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ha/unicast-peers"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemHaVcluster API operation for FortiManager Device creates a new HaVcluster.
// Returns the index value of the HaVcluster and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ha vcluster chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemHaVcluster(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ha/vcluster"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemHaVcluster API operation for FortiManager Device updates the specified HaVcluster.
// Returns the index value of the HaVcluster and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ha vcluster chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemHaVcluster(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ha/vcluster"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemHaVcluster API operation for FortiManager Device deletes the specified HaVcluster.
// Returns error for service API and SDK errors.
// See the device - system ha vcluster chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemHaVcluster(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/ha/vcluster"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemHaVcluster API operation for FortiManager Device gets the HaVcluster
// with the specified index value.
// Returns the requested HaVcluster value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ha vcluster chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemHaVcluster(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ha/vcluster"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIke API operation for FortiManager Device updates the specified Ike.
// Returns the index value of the Ike and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIke(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIke API operation for FortiManager Device deletes the specified Ike.
// Returns error for service API and SDK errors.
// See the device - system ike chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIke(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ike
	return
}

// ReadSystemIke API operation for FortiManager Device gets the Ike
// with the specified index value.
// Returns the requested Ike value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIke(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIkeDhGroup1 API operation for FortiManager Device updates the specified IkeDh Group 1.
// Returns the index value of the IkeDh Group 1 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-1 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIkeDhGroup1(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-1"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIkeDhGroup1 API operation for FortiManager Device deletes the specified IkeDh Group 1.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-1 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIkeDhGroup1(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ike dh-group-1
	return
}

// ReadSystemIkeDhGroup1 API operation for FortiManager Device gets the IkeDh Group 1
// with the specified index value.
// Returns the requested IkeDh Group 1 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-1 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIkeDhGroup1(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-1"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIkeDhGroup14 API operation for FortiManager Device updates the specified IkeDh Group 14.
// Returns the index value of the IkeDh Group 14 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-14 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIkeDhGroup14(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-14"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIkeDhGroup14 API operation for FortiManager Device deletes the specified IkeDh Group 14.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-14 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIkeDhGroup14(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ike dh-group-14
	return
}

// ReadSystemIkeDhGroup14 API operation for FortiManager Device gets the IkeDh Group 14
// with the specified index value.
// Returns the requested IkeDh Group 14 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-14 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIkeDhGroup14(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-14"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIkeDhGroup15 API operation for FortiManager Device updates the specified IkeDh Group 15.
// Returns the index value of the IkeDh Group 15 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-15 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIkeDhGroup15(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-15"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIkeDhGroup15 API operation for FortiManager Device deletes the specified IkeDh Group 15.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-15 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIkeDhGroup15(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ike dh-group-15
	return
}

// ReadSystemIkeDhGroup15 API operation for FortiManager Device gets the IkeDh Group 15
// with the specified index value.
// Returns the requested IkeDh Group 15 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-15 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIkeDhGroup15(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-15"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIkeDhGroup16 API operation for FortiManager Device updates the specified IkeDh Group 16.
// Returns the index value of the IkeDh Group 16 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-16 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIkeDhGroup16(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-16"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIkeDhGroup16 API operation for FortiManager Device deletes the specified IkeDh Group 16.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-16 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIkeDhGroup16(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ike dh-group-16
	return
}

// ReadSystemIkeDhGroup16 API operation for FortiManager Device gets the IkeDh Group 16
// with the specified index value.
// Returns the requested IkeDh Group 16 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-16 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIkeDhGroup16(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-16"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIkeDhGroup17 API operation for FortiManager Device updates the specified IkeDh Group 17.
// Returns the index value of the IkeDh Group 17 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-17 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIkeDhGroup17(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-17"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIkeDhGroup17 API operation for FortiManager Device deletes the specified IkeDh Group 17.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-17 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIkeDhGroup17(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ike dh-group-17
	return
}

// ReadSystemIkeDhGroup17 API operation for FortiManager Device gets the IkeDh Group 17
// with the specified index value.
// Returns the requested IkeDh Group 17 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-17 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIkeDhGroup17(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-17"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIkeDhGroup18 API operation for FortiManager Device updates the specified IkeDh Group 18.
// Returns the index value of the IkeDh Group 18 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-18 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIkeDhGroup18(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-18"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIkeDhGroup18 API operation for FortiManager Device deletes the specified IkeDh Group 18.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-18 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIkeDhGroup18(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ike dh-group-18
	return
}

// ReadSystemIkeDhGroup18 API operation for FortiManager Device gets the IkeDh Group 18
// with the specified index value.
// Returns the requested IkeDh Group 18 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-18 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIkeDhGroup18(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-18"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIkeDhGroup19 API operation for FortiManager Device updates the specified IkeDh Group 19.
// Returns the index value of the IkeDh Group 19 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-19 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIkeDhGroup19(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-19"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIkeDhGroup19 API operation for FortiManager Device deletes the specified IkeDh Group 19.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-19 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIkeDhGroup19(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ike dh-group-19
	return
}

// ReadSystemIkeDhGroup19 API operation for FortiManager Device gets the IkeDh Group 19
// with the specified index value.
// Returns the requested IkeDh Group 19 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-19 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIkeDhGroup19(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-19"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIkeDhGroup2 API operation for FortiManager Device updates the specified IkeDh Group 2.
// Returns the index value of the IkeDh Group 2 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-2 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIkeDhGroup2(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-2"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIkeDhGroup2 API operation for FortiManager Device deletes the specified IkeDh Group 2.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-2 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIkeDhGroup2(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ike dh-group-2
	return
}

// ReadSystemIkeDhGroup2 API operation for FortiManager Device gets the IkeDh Group 2
// with the specified index value.
// Returns the requested IkeDh Group 2 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-2 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIkeDhGroup2(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-2"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIkeDhGroup20 API operation for FortiManager Device updates the specified IkeDh Group 20.
// Returns the index value of the IkeDh Group 20 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-20 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIkeDhGroup20(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-20"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIkeDhGroup20 API operation for FortiManager Device deletes the specified IkeDh Group 20.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-20 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIkeDhGroup20(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ike dh-group-20
	return
}

// ReadSystemIkeDhGroup20 API operation for FortiManager Device gets the IkeDh Group 20
// with the specified index value.
// Returns the requested IkeDh Group 20 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-20 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIkeDhGroup20(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-20"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIkeDhGroup21 API operation for FortiManager Device updates the specified IkeDh Group 21.
// Returns the index value of the IkeDh Group 21 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-21 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIkeDhGroup21(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-21"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIkeDhGroup21 API operation for FortiManager Device deletes the specified IkeDh Group 21.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-21 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIkeDhGroup21(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ike dh-group-21
	return
}

// ReadSystemIkeDhGroup21 API operation for FortiManager Device gets the IkeDh Group 21
// with the specified index value.
// Returns the requested IkeDh Group 21 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-21 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIkeDhGroup21(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-21"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIkeDhGroup27 API operation for FortiManager Device updates the specified IkeDh Group 27.
// Returns the index value of the IkeDh Group 27 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-27 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIkeDhGroup27(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-27"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIkeDhGroup27 API operation for FortiManager Device deletes the specified IkeDh Group 27.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-27 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIkeDhGroup27(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ike dh-group-27
	return
}

// ReadSystemIkeDhGroup27 API operation for FortiManager Device gets the IkeDh Group 27
// with the specified index value.
// Returns the requested IkeDh Group 27 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-27 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIkeDhGroup27(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-27"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIkeDhGroup28 API operation for FortiManager Device updates the specified IkeDh Group 28.
// Returns the index value of the IkeDh Group 28 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-28 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIkeDhGroup28(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-28"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIkeDhGroup28 API operation for FortiManager Device deletes the specified IkeDh Group 28.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-28 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIkeDhGroup28(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ike dh-group-28
	return
}

// ReadSystemIkeDhGroup28 API operation for FortiManager Device gets the IkeDh Group 28
// with the specified index value.
// Returns the requested IkeDh Group 28 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-28 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIkeDhGroup28(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-28"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIkeDhGroup29 API operation for FortiManager Device updates the specified IkeDh Group 29.
// Returns the index value of the IkeDh Group 29 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-29 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIkeDhGroup29(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-29"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIkeDhGroup29 API operation for FortiManager Device deletes the specified IkeDh Group 29.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-29 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIkeDhGroup29(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ike dh-group-29
	return
}

// ReadSystemIkeDhGroup29 API operation for FortiManager Device gets the IkeDh Group 29
// with the specified index value.
// Returns the requested IkeDh Group 29 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-29 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIkeDhGroup29(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-29"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIkeDhGroup30 API operation for FortiManager Device updates the specified IkeDh Group 30.
// Returns the index value of the IkeDh Group 30 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-30 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIkeDhGroup30(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-30"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIkeDhGroup30 API operation for FortiManager Device deletes the specified IkeDh Group 30.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-30 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIkeDhGroup30(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ike dh-group-30
	return
}

// ReadSystemIkeDhGroup30 API operation for FortiManager Device gets the IkeDh Group 30
// with the specified index value.
// Returns the requested IkeDh Group 30 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-30 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIkeDhGroup30(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-30"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIkeDhGroup31 API operation for FortiManager Device updates the specified IkeDh Group 31.
// Returns the index value of the IkeDh Group 31 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-31 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIkeDhGroup31(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-31"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIkeDhGroup31 API operation for FortiManager Device deletes the specified IkeDh Group 31.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-31 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIkeDhGroup31(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ike dh-group-31
	return
}

// ReadSystemIkeDhGroup31 API operation for FortiManager Device gets the IkeDh Group 31
// with the specified index value.
// Returns the requested IkeDh Group 31 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-31 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIkeDhGroup31(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-31"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIkeDhGroup32 API operation for FortiManager Device updates the specified IkeDh Group 32.
// Returns the index value of the IkeDh Group 32 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-32 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIkeDhGroup32(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-32"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIkeDhGroup32 API operation for FortiManager Device deletes the specified IkeDh Group 32.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-32 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIkeDhGroup32(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ike dh-group-32
	return
}

// ReadSystemIkeDhGroup32 API operation for FortiManager Device gets the IkeDh Group 32
// with the specified index value.
// Returns the requested IkeDh Group 32 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-32 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIkeDhGroup32(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-32"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIkeDhGroup5 API operation for FortiManager Device updates the specified IkeDh Group 5.
// Returns the index value of the IkeDh Group 5 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-5 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIkeDhGroup5(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-5"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIkeDhGroup5 API operation for FortiManager Device deletes the specified IkeDh Group 5.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-5 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIkeDhGroup5(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ike dh-group-5
	return
}

// ReadSystemIkeDhGroup5 API operation for FortiManager Device gets the IkeDh Group 5
// with the specified index value.
// Returns the requested IkeDh Group 5 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ike dh-group-5 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIkeDhGroup5(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ike/dh-group-5"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemInterface API operation for FortiManager Device creates a new Interface.
// Returns the index value of the Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemInterface(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemInterface API operation for FortiManager Device updates the specified Interface.
// Returns the index value of the Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemInterface(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemInterface API operation for FortiManager Device deletes the specified Interface.
// Returns error for service API and SDK errors.
// See the device - system interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemInterface(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemInterface API operation for FortiManager Device gets the Interface
// with the specified index value.
// Returns the requested Interface value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemInterface(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemInterfaceClientOptions API operation for FortiManager Device creates a new InterfaceClient Options.
// Returns the index value of the InterfaceClient Options and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface client-options chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemInterfaceClientOptions(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/client-options"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemInterfaceClientOptions API operation for FortiManager Device updates the specified InterfaceClient Options.
// Returns the index value of the InterfaceClient Options and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface client-options chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemInterfaceClientOptions(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/client-options"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemInterfaceClientOptions API operation for FortiManager Device deletes the specified InterfaceClient Options.
// Returns error for service API and SDK errors.
// See the device - system interface client-options chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemInterfaceClientOptions(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/client-options"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemInterfaceClientOptions API operation for FortiManager Device gets the InterfaceClient Options
// with the specified index value.
// Returns the requested InterfaceClient Options value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface client-options chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemInterfaceClientOptions(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/client-options"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemInterfaceDhcpSnoopingServerList API operation for FortiManager Device creates a new InterfaceDhcp Snooping Server List.
// Returns the index value of the InterfaceDhcp Snooping Server List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface dhcp-snooping-server-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemInterfaceDhcpSnoopingServerList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/dhcp-snooping-server-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemInterfaceDhcpSnoopingServerList API operation for FortiManager Device updates the specified InterfaceDhcp Snooping Server List.
// Returns the index value of the InterfaceDhcp Snooping Server List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface dhcp-snooping-server-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemInterfaceDhcpSnoopingServerList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/dhcp-snooping-server-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemInterfaceDhcpSnoopingServerList API operation for FortiManager Device deletes the specified InterfaceDhcp Snooping Server List.
// Returns error for service API and SDK errors.
// See the device - system interface dhcp-snooping-server-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemInterfaceDhcpSnoopingServerList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/dhcp-snooping-server-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemInterfaceDhcpSnoopingServerList API operation for FortiManager Device gets the InterfaceDhcp Snooping Server List
// with the specified index value.
// Returns the requested InterfaceDhcp Snooping Server List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface dhcp-snooping-server-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemInterfaceDhcpSnoopingServerList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/dhcp-snooping-server-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemInterfaceIpv6 API operation for FortiManager Device updates the specified InterfaceIpv6.
// Returns the index value of the InterfaceIpv6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface ipv6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemInterfaceIpv6(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/ipv6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemInterfaceIpv6 API operation for FortiManager Device deletes the specified InterfaceIpv6.
// Returns error for service API and SDK errors.
// See the device - system interface ipv6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemInterfaceIpv6(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - interface ipv6
	return
}

// ReadSystemInterfaceIpv6 API operation for FortiManager Device gets the InterfaceIpv6
// with the specified index value.
// Returns the requested InterfaceIpv6 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface ipv6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemInterfaceIpv6(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/ipv6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemInterfaceIpv6Dhcp6IapdList API operation for FortiManager Device creates a new InterfaceIpv6Dhcp6 Iapd List.
// Returns the index value of the InterfaceIpv6Dhcp6 Iapd List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface ipv6 dhcp6-iapd-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemInterfaceIpv6Dhcp6IapdList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/ipv6/dhcp6-iapd-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemInterfaceIpv6Dhcp6IapdList API operation for FortiManager Device updates the specified InterfaceIpv6Dhcp6 Iapd List.
// Returns the index value of the InterfaceIpv6Dhcp6 Iapd List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface ipv6 dhcp6-iapd-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemInterfaceIpv6Dhcp6IapdList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/ipv6/dhcp6-iapd-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemInterfaceIpv6Dhcp6IapdList API operation for FortiManager Device deletes the specified InterfaceIpv6Dhcp6 Iapd List.
// Returns error for service API and SDK errors.
// See the device - system interface ipv6 dhcp6-iapd-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemInterfaceIpv6Dhcp6IapdList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/ipv6/dhcp6-iapd-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemInterfaceIpv6Dhcp6IapdList API operation for FortiManager Device gets the InterfaceIpv6Dhcp6 Iapd List
// with the specified index value.
// Returns the requested InterfaceIpv6Dhcp6 Iapd List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface ipv6 dhcp6-iapd-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemInterfaceIpv6Dhcp6IapdList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/ipv6/dhcp6-iapd-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemInterfaceIpv6Vrrp6 API operation for FortiManager Device creates a new InterfaceIpv6Vrrp6.
// Returns the index value of the InterfaceIpv6Vrrp6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface ipv6 vrrp6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemInterfaceIpv6Vrrp6(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/ipv6/vrrp6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemInterfaceIpv6Vrrp6 API operation for FortiManager Device updates the specified InterfaceIpv6Vrrp6.
// Returns the index value of the InterfaceIpv6Vrrp6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface ipv6 vrrp6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemInterfaceIpv6Vrrp6(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/ipv6/vrrp6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemInterfaceIpv6Vrrp6 API operation for FortiManager Device deletes the specified InterfaceIpv6Vrrp6.
// Returns error for service API and SDK errors.
// See the device - system interface ipv6 vrrp6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemInterfaceIpv6Vrrp6(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/ipv6/vrrp6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemInterfaceIpv6Vrrp6 API operation for FortiManager Device gets the InterfaceIpv6Vrrp6
// with the specified index value.
// Returns the requested InterfaceIpv6Vrrp6 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface ipv6 vrrp6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemInterfaceIpv6Vrrp6(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/ipv6/vrrp6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemInterfaceTagging API operation for FortiManager Device creates a new InterfaceTagging.
// Returns the index value of the InterfaceTagging and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface tagging chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemInterfaceTagging(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/tagging"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemInterfaceTagging API operation for FortiManager Device updates the specified InterfaceTagging.
// Returns the index value of the InterfaceTagging and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface tagging chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemInterfaceTagging(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/tagging"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemInterfaceTagging API operation for FortiManager Device deletes the specified InterfaceTagging.
// Returns error for service API and SDK errors.
// See the device - system interface tagging chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemInterfaceTagging(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/tagging"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemInterfaceTagging API operation for FortiManager Device gets the InterfaceTagging
// with the specified index value.
// Returns the requested InterfaceTagging value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface tagging chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemInterfaceTagging(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/tagging"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemInterfaceVrrp API operation for FortiManager Device creates a new InterfaceVrrp.
// Returns the index value of the InterfaceVrrp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface vrrp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemInterfaceVrrp(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/vrrp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemInterfaceVrrp API operation for FortiManager Device updates the specified InterfaceVrrp.
// Returns the index value of the InterfaceVrrp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface vrrp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemInterfaceVrrp(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/vrrp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemInterfaceVrrp API operation for FortiManager Device deletes the specified InterfaceVrrp.
// Returns error for service API and SDK errors.
// See the device - system interface vrrp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemInterfaceVrrp(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/vrrp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemInterfaceVrrp API operation for FortiManager Device gets the InterfaceVrrp
// with the specified index value.
// Returns the requested InterfaceVrrp value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface vrrp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemInterfaceVrrp(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/vrrp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemInterfaceVrrpProxyArp API operation for FortiManager Device creates a new InterfaceVrrpProxy Arp.
// Returns the index value of the InterfaceVrrpProxy Arp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface vrrp proxy-arp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemInterfaceVrrpProxyArp(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/vrrp/{vrrp}/proxy-arp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemInterfaceVrrpProxyArp API operation for FortiManager Device updates the specified InterfaceVrrpProxy Arp.
// Returns the index value of the InterfaceVrrpProxy Arp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface vrrp proxy-arp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemInterfaceVrrpProxyArp(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/vrrp/{vrrp}/proxy-arp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemInterfaceVrrpProxyArp API operation for FortiManager Device deletes the specified InterfaceVrrpProxy Arp.
// Returns error for service API and SDK errors.
// See the device - system interface vrrp proxy-arp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemInterfaceVrrpProxyArp(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/vrrp/{vrrp}/proxy-arp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemInterfaceVrrpProxyArp API operation for FortiManager Device gets the InterfaceVrrpProxy Arp
// with the specified index value.
// Returns the requested InterfaceVrrpProxy Arp value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system interface vrrp proxy-arp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemInterfaceVrrpProxyArp(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/interface/{interface}/vrrp/{vrrp}/proxy-arp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIpam API operation for FortiManager Device updates the specified Ipam.
// Returns the index value of the Ipam and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipam chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIpam(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ipam"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIpam API operation for FortiManager Device deletes the specified Ipam.
// Returns error for service API and SDK errors.
// See the device - system ipam chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIpam(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ipam
	return
}

// ReadSystemIpam API operation for FortiManager Device gets the Ipam
// with the specified index value.
// Returns the requested Ipam value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipam chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIpam(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ipam"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemIpamPools API operation for FortiManager Device creates a new IpamPools.
// Returns the index value of the IpamPools and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipam pools chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemIpamPools(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ipam/pools"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemIpamPools API operation for FortiManager Device updates the specified IpamPools.
// Returns the index value of the IpamPools and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipam pools chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIpamPools(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ipam/pools"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIpamPools API operation for FortiManager Device deletes the specified IpamPools.
// Returns error for service API and SDK errors.
// See the device - system ipam pools chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIpamPools(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/ipam/pools"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemIpamPools API operation for FortiManager Device gets the IpamPools
// with the specified index value.
// Returns the requested IpamPools value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipam pools chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIpamPools(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ipam/pools"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemIpamPoolsExclude API operation for FortiManager Device creates a new IpamPoolsExclude.
// Returns the index value of the IpamPoolsExclude and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipam pools exclude chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemIpamPoolsExclude(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ipam/pools/{pools}/exclude"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemIpamPoolsExclude API operation for FortiManager Device updates the specified IpamPoolsExclude.
// Returns the index value of the IpamPoolsExclude and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipam pools exclude chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIpamPoolsExclude(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ipam/pools/{pools}/exclude"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIpamPoolsExclude API operation for FortiManager Device deletes the specified IpamPoolsExclude.
// Returns error for service API and SDK errors.
// See the device - system ipam pools exclude chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIpamPoolsExclude(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/ipam/pools/{pools}/exclude"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemIpamPoolsExclude API operation for FortiManager Device gets the IpamPoolsExclude
// with the specified index value.
// Returns the requested IpamPoolsExclude value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipam pools exclude chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIpamPoolsExclude(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ipam/pools/{pools}/exclude"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemIpamRules API operation for FortiManager Device creates a new IpamRules.
// Returns the index value of the IpamRules and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipam rules chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemIpamRules(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ipam/rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemIpamRules API operation for FortiManager Device updates the specified IpamRules.
// Returns the index value of the IpamRules and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipam rules chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIpamRules(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ipam/rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIpamRules API operation for FortiManager Device deletes the specified IpamRules.
// Returns error for service API and SDK errors.
// See the device - system ipam rules chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIpamRules(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/ipam/rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemIpamRules API operation for FortiManager Device gets the IpamRules
// with the specified index value.
// Returns the requested IpamRules value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipam rules chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIpamRules(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ipam/rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIpamRulesMove API operation for FortiManager Device updates the specified IpamRulesMove.
// Returns the index value of the IpamRulesMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipam rules move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIpamRulesMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ipam/rules/{rules}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadSystemIpamRulesMove API operation for FortiManager Device gets the IpamRulesMove
// with the specified index value.
// Returns the requested IpamRulesMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipam rules move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIpamRulesMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ipam/rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"name"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// CreateSystemIpipTunnel API operation for FortiManager Device creates a new Ipip Tunnel.
// Returns the index value of the Ipip Tunnel and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipip-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemIpipTunnel(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/ipip-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemIpipTunnel API operation for FortiManager Device updates the specified Ipip Tunnel.
// Returns the index value of the Ipip Tunnel and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipip-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIpipTunnel(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/ipip-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIpipTunnel API operation for FortiManager Device deletes the specified Ipip Tunnel.
// Returns error for service API and SDK errors.
// See the device - system ipip-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIpipTunnel(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/ipip-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemIpipTunnel API operation for FortiManager Device gets the Ipip Tunnel
// with the specified index value.
// Returns the requested Ipip Tunnel value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipip-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIpipTunnel(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/ipip-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemIps API operation for FortiManager Device updates the specified Ips.
// Returns the index value of the Ips and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ips chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIps(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/ips"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIps API operation for FortiManager Device deletes the specified Ips.
// Returns error for service API and SDK errors.
// See the device - system ips chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIps(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ips
	return
}

// ReadSystemIps API operation for FortiManager Device gets the Ips
// with the specified index value.
// Returns the requested Ips value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ips chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIps(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/ips"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemIpsUrlfilterDns API operation for FortiManager Device creates a new Ips Urlfilter Dns.
// Returns the index value of the Ips Urlfilter Dns and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ips-urlfilter-dns chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemIpsUrlfilterDns(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ips-urlfilter-dns"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemIpsUrlfilterDns API operation for FortiManager Device updates the specified Ips Urlfilter Dns.
// Returns the index value of the Ips Urlfilter Dns and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ips-urlfilter-dns chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIpsUrlfilterDns(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ips-urlfilter-dns"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIpsUrlfilterDns API operation for FortiManager Device deletes the specified Ips Urlfilter Dns.
// Returns error for service API and SDK errors.
// See the device - system ips-urlfilter-dns chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIpsUrlfilterDns(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/ips-urlfilter-dns"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemIpsUrlfilterDns API operation for FortiManager Device gets the Ips Urlfilter Dns
// with the specified index value.
// Returns the requested Ips Urlfilter Dns value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ips-urlfilter-dns chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIpsUrlfilterDns(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ips-urlfilter-dns"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemIpsUrlfilterDns6 API operation for FortiManager Device creates a new Ips Urlfilter Dns6.
// Returns the index value of the Ips Urlfilter Dns6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ips-urlfilter-dns6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemIpsUrlfilterDns6(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ips-urlfilter-dns6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemIpsUrlfilterDns6 API operation for FortiManager Device updates the specified Ips Urlfilter Dns6.
// Returns the index value of the Ips Urlfilter Dns6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ips-urlfilter-dns6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIpsUrlfilterDns6(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ips-urlfilter-dns6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIpsUrlfilterDns6 API operation for FortiManager Device deletes the specified Ips Urlfilter Dns6.
// Returns error for service API and SDK errors.
// See the device - system ips-urlfilter-dns6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIpsUrlfilterDns6(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/ips-urlfilter-dns6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemIpsUrlfilterDns6 API operation for FortiManager Device gets the Ips Urlfilter Dns6
// with the specified index value.
// Returns the requested Ips Urlfilter Dns6 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ips-urlfilter-dns6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIpsUrlfilterDns6(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ips-urlfilter-dns6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemIpsecAggregate API operation for FortiManager Device creates a new Ipsec Aggregate.
// Returns the index value of the Ipsec Aggregate and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipsec-aggregate chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemIpsecAggregate(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/ipsec-aggregate"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemIpsecAggregate API operation for FortiManager Device updates the specified Ipsec Aggregate.
// Returns the index value of the Ipsec Aggregate and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipsec-aggregate chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIpsecAggregate(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/ipsec-aggregate"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIpsecAggregate API operation for FortiManager Device deletes the specified Ipsec Aggregate.
// Returns error for service API and SDK errors.
// See the device - system ipsec-aggregate chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIpsecAggregate(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/ipsec-aggregate"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemIpsecAggregate API operation for FortiManager Device gets the Ipsec Aggregate
// with the specified index value.
// Returns the requested Ipsec Aggregate value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipsec-aggregate chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIpsecAggregate(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/ipsec-aggregate"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemIpv6NeighborCache API operation for FortiManager Device creates a new Ipv6 Neighbor Cache.
// Returns the index value of the Ipv6 Neighbor Cache and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipv6-neighbor-cache chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemIpv6NeighborCache(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/ipv6-neighbor-cache"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemIpv6NeighborCache API operation for FortiManager Device updates the specified Ipv6 Neighbor Cache.
// Returns the index value of the Ipv6 Neighbor Cache and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipv6-neighbor-cache chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIpv6NeighborCache(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/ipv6-neighbor-cache"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIpv6NeighborCache API operation for FortiManager Device deletes the specified Ipv6 Neighbor Cache.
// Returns error for service API and SDK errors.
// See the device - system ipv6-neighbor-cache chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIpv6NeighborCache(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/ipv6-neighbor-cache"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemIpv6NeighborCache API operation for FortiManager Device gets the Ipv6 Neighbor Cache
// with the specified index value.
// Returns the requested Ipv6 Neighbor Cache value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipv6-neighbor-cache chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIpv6NeighborCache(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/ipv6-neighbor-cache"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemIpv6Tunnel API operation for FortiManager Device creates a new Ipv6 Tunnel.
// Returns the index value of the Ipv6 Tunnel and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipv6-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemIpv6Tunnel(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/ipv6-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemIpv6Tunnel API operation for FortiManager Device updates the specified Ipv6 Tunnel.
// Returns the index value of the Ipv6 Tunnel and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipv6-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemIpv6Tunnel(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/ipv6-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemIpv6Tunnel API operation for FortiManager Device deletes the specified Ipv6 Tunnel.
// Returns error for service API and SDK errors.
// See the device - system ipv6-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemIpv6Tunnel(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/ipv6-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemIpv6Tunnel API operation for FortiManager Device gets the Ipv6 Tunnel
// with the specified index value.
// Returns the requested Ipv6 Tunnel value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ipv6-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemIpv6Tunnel(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/ipv6-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemLinkMonitor API operation for FortiManager Device creates a new Link Monitor.
// Returns the index value of the Link Monitor and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system link-monitor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemLinkMonitor(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/link-monitor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemLinkMonitor API operation for FortiManager Device updates the specified Link Monitor.
// Returns the index value of the Link Monitor and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system link-monitor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemLinkMonitor(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/link-monitor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemLinkMonitor API operation for FortiManager Device deletes the specified Link Monitor.
// Returns error for service API and SDK errors.
// See the device - system link-monitor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemLinkMonitor(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/link-monitor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemLinkMonitor API operation for FortiManager Device gets the Link Monitor
// with the specified index value.
// Returns the requested Link Monitor value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system link-monitor chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemLinkMonitor(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/link-monitor"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemLinkMonitorServerList API operation for FortiManager Device creates a new Link MonitorServer List.
// Returns the index value of the Link MonitorServer List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system link-monitor server-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemLinkMonitorServerList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/link-monitor/{link-monitor}/server-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemLinkMonitorServerList API operation for FortiManager Device updates the specified Link MonitorServer List.
// Returns the index value of the Link MonitorServer List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system link-monitor server-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemLinkMonitorServerList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/link-monitor/{link-monitor}/server-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemLinkMonitorServerList API operation for FortiManager Device deletes the specified Link MonitorServer List.
// Returns error for service API and SDK errors.
// See the device - system link-monitor server-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemLinkMonitorServerList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/link-monitor/{link-monitor}/server-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemLinkMonitorServerList API operation for FortiManager Device gets the Link MonitorServer List
// with the specified index value.
// Returns the requested Link MonitorServer List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system link-monitor server-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemLinkMonitorServerList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/link-monitor/{link-monitor}/server-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemLldpNetworkPolicy API operation for FortiManager Device creates a new LldpNetwork Policy.
// Returns the index value of the LldpNetwork Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemLldpNetworkPolicy(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemLldpNetworkPolicy API operation for FortiManager Device updates the specified LldpNetwork Policy.
// Returns the index value of the LldpNetwork Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemLldpNetworkPolicy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemLldpNetworkPolicy API operation for FortiManager Device deletes the specified LldpNetwork Policy.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemLldpNetworkPolicy(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemLldpNetworkPolicy API operation for FortiManager Device gets the LldpNetwork Policy
// with the specified index value.
// Returns the requested LldpNetwork Policy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemLldpNetworkPolicy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemLldpNetworkPolicyGuest API operation for FortiManager Device updates the specified LldpNetwork PolicyGuest.
// Returns the index value of the LldpNetwork PolicyGuest and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy guest chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemLldpNetworkPolicyGuest(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy/{network-policy}/guest"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemLldpNetworkPolicyGuest API operation for FortiManager Device deletes the specified LldpNetwork PolicyGuest.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy guest chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemLldpNetworkPolicyGuest(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - lldp network-policy guest
	return
}

// ReadSystemLldpNetworkPolicyGuest API operation for FortiManager Device gets the LldpNetwork PolicyGuest
// with the specified index value.
// Returns the requested LldpNetwork PolicyGuest value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy guest chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemLldpNetworkPolicyGuest(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy/{network-policy}/guest"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemLldpNetworkPolicyGuestVoiceSignaling API operation for FortiManager Device updates the specified LldpNetwork PolicyGuest Voice Signaling.
// Returns the index value of the LldpNetwork PolicyGuest Voice Signaling and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy guest-voice-signaling chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemLldpNetworkPolicyGuestVoiceSignaling(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy/{network-policy}/guest-voice-signaling"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemLldpNetworkPolicyGuestVoiceSignaling API operation for FortiManager Device deletes the specified LldpNetwork PolicyGuest Voice Signaling.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy guest-voice-signaling chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemLldpNetworkPolicyGuestVoiceSignaling(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - lldp network-policy guest-voice-signaling
	return
}

// ReadSystemLldpNetworkPolicyGuestVoiceSignaling API operation for FortiManager Device gets the LldpNetwork PolicyGuest Voice Signaling
// with the specified index value.
// Returns the requested LldpNetwork PolicyGuest Voice Signaling value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy guest-voice-signaling chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemLldpNetworkPolicyGuestVoiceSignaling(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy/{network-policy}/guest-voice-signaling"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemLldpNetworkPolicySoftphone API operation for FortiManager Device updates the specified LldpNetwork PolicySoftphone.
// Returns the index value of the LldpNetwork PolicySoftphone and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy softphone chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemLldpNetworkPolicySoftphone(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy/{network-policy}/softphone"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemLldpNetworkPolicySoftphone API operation for FortiManager Device deletes the specified LldpNetwork PolicySoftphone.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy softphone chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemLldpNetworkPolicySoftphone(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - lldp network-policy softphone
	return
}

// ReadSystemLldpNetworkPolicySoftphone API operation for FortiManager Device gets the LldpNetwork PolicySoftphone
// with the specified index value.
// Returns the requested LldpNetwork PolicySoftphone value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy softphone chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemLldpNetworkPolicySoftphone(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy/{network-policy}/softphone"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemLldpNetworkPolicyStreamingVideo API operation for FortiManager Device updates the specified LldpNetwork PolicyStreaming Video.
// Returns the index value of the LldpNetwork PolicyStreaming Video and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy streaming-video chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemLldpNetworkPolicyStreamingVideo(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy/{network-policy}/streaming-video"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemLldpNetworkPolicyStreamingVideo API operation for FortiManager Device deletes the specified LldpNetwork PolicyStreaming Video.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy streaming-video chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemLldpNetworkPolicyStreamingVideo(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - lldp network-policy streaming-video
	return
}

// ReadSystemLldpNetworkPolicyStreamingVideo API operation for FortiManager Device gets the LldpNetwork PolicyStreaming Video
// with the specified index value.
// Returns the requested LldpNetwork PolicyStreaming Video value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy streaming-video chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemLldpNetworkPolicyStreamingVideo(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy/{network-policy}/streaming-video"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemLldpNetworkPolicyVideoConferencing API operation for FortiManager Device updates the specified LldpNetwork PolicyVideo Conferencing.
// Returns the index value of the LldpNetwork PolicyVideo Conferencing and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy video-conferencing chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemLldpNetworkPolicyVideoConferencing(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy/{network-policy}/video-conferencing"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemLldpNetworkPolicyVideoConferencing API operation for FortiManager Device deletes the specified LldpNetwork PolicyVideo Conferencing.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy video-conferencing chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemLldpNetworkPolicyVideoConferencing(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - lldp network-policy video-conferencing
	return
}

// ReadSystemLldpNetworkPolicyVideoConferencing API operation for FortiManager Device gets the LldpNetwork PolicyVideo Conferencing
// with the specified index value.
// Returns the requested LldpNetwork PolicyVideo Conferencing value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy video-conferencing chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemLldpNetworkPolicyVideoConferencing(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy/{network-policy}/video-conferencing"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemLldpNetworkPolicyVideoSignaling API operation for FortiManager Device updates the specified LldpNetwork PolicyVideo Signaling.
// Returns the index value of the LldpNetwork PolicyVideo Signaling and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy video-signaling chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemLldpNetworkPolicyVideoSignaling(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy/{network-policy}/video-signaling"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemLldpNetworkPolicyVideoSignaling API operation for FortiManager Device deletes the specified LldpNetwork PolicyVideo Signaling.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy video-signaling chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemLldpNetworkPolicyVideoSignaling(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - lldp network-policy video-signaling
	return
}

// ReadSystemLldpNetworkPolicyVideoSignaling API operation for FortiManager Device gets the LldpNetwork PolicyVideo Signaling
// with the specified index value.
// Returns the requested LldpNetwork PolicyVideo Signaling value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy video-signaling chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemLldpNetworkPolicyVideoSignaling(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy/{network-policy}/video-signaling"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemLldpNetworkPolicyVoice API operation for FortiManager Device updates the specified LldpNetwork PolicyVoice.
// Returns the index value of the LldpNetwork PolicyVoice and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy voice chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemLldpNetworkPolicyVoice(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy/{network-policy}/voice"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemLldpNetworkPolicyVoice API operation for FortiManager Device deletes the specified LldpNetwork PolicyVoice.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy voice chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemLldpNetworkPolicyVoice(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - lldp network-policy voice
	return
}

// ReadSystemLldpNetworkPolicyVoice API operation for FortiManager Device gets the LldpNetwork PolicyVoice
// with the specified index value.
// Returns the requested LldpNetwork PolicyVoice value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy voice chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemLldpNetworkPolicyVoice(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy/{network-policy}/voice"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemLldpNetworkPolicyVoiceSignaling API operation for FortiManager Device updates the specified LldpNetwork PolicyVoice Signaling.
// Returns the index value of the LldpNetwork PolicyVoice Signaling and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy voice-signaling chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemLldpNetworkPolicyVoiceSignaling(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy/{network-policy}/voice-signaling"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemLldpNetworkPolicyVoiceSignaling API operation for FortiManager Device deletes the specified LldpNetwork PolicyVoice Signaling.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy voice-signaling chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemLldpNetworkPolicyVoiceSignaling(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - lldp network-policy voice-signaling
	return
}

// ReadSystemLldpNetworkPolicyVoiceSignaling API operation for FortiManager Device gets the LldpNetwork PolicyVoice Signaling
// with the specified index value.
// Returns the requested LldpNetwork PolicyVoice Signaling value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system lldp network-policy voice-signaling chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemLldpNetworkPolicyVoiceSignaling(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/lldp/network-policy/{network-policy}/voice-signaling"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemMobileTunnel API operation for FortiManager Device creates a new Mobile Tunnel.
// Returns the index value of the Mobile Tunnel and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system mobile-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemMobileTunnel(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/mobile-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemMobileTunnel API operation for FortiManager Device updates the specified Mobile Tunnel.
// Returns the index value of the Mobile Tunnel and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system mobile-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemMobileTunnel(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/mobile-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemMobileTunnel API operation for FortiManager Device deletes the specified Mobile Tunnel.
// Returns error for service API and SDK errors.
// See the device - system mobile-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemMobileTunnel(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/mobile-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemMobileTunnel API operation for FortiManager Device gets the Mobile Tunnel
// with the specified index value.
// Returns the requested Mobile Tunnel value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system mobile-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemMobileTunnel(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/mobile-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemMobileTunnelNetwork API operation for FortiManager Device creates a new Mobile TunnelNetwork.
// Returns the index value of the Mobile TunnelNetwork and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system mobile-tunnel network chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemMobileTunnelNetwork(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/mobile-tunnel/{mobile-tunnel}/network"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemMobileTunnelNetwork API operation for FortiManager Device updates the specified Mobile TunnelNetwork.
// Returns the index value of the Mobile TunnelNetwork and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system mobile-tunnel network chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemMobileTunnelNetwork(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/mobile-tunnel/{mobile-tunnel}/network"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemMobileTunnelNetwork API operation for FortiManager Device deletes the specified Mobile TunnelNetwork.
// Returns error for service API and SDK errors.
// See the device - system mobile-tunnel network chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemMobileTunnelNetwork(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/mobile-tunnel/{mobile-tunnel}/network"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemMobileTunnelNetwork API operation for FortiManager Device gets the Mobile TunnelNetwork
// with the specified index value.
// Returns the requested Mobile TunnelNetwork value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system mobile-tunnel network chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemMobileTunnelNetwork(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/mobile-tunnel/{mobile-tunnel}/network"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemNat64SecondaryPrefix API operation for FortiManager Device creates a new Nat64Secondary Prefix.
// Returns the index value of the Nat64Secondary Prefix and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system nat64 secondary-prefix chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemNat64SecondaryPrefix(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/nat64/secondary-prefix"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemNat64SecondaryPrefix API operation for FortiManager Device updates the specified Nat64Secondary Prefix.
// Returns the index value of the Nat64Secondary Prefix and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system nat64 secondary-prefix chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemNat64SecondaryPrefix(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/nat64/secondary-prefix"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemNat64SecondaryPrefix API operation for FortiManager Device deletes the specified Nat64Secondary Prefix.
// Returns error for service API and SDK errors.
// See the device - system nat64 secondary-prefix chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemNat64SecondaryPrefix(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/nat64/secondary-prefix"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemNat64SecondaryPrefix API operation for FortiManager Device gets the Nat64Secondary Prefix
// with the specified index value.
// Returns the requested Nat64Secondary Prefix value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system nat64 secondary-prefix chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemNat64SecondaryPrefix(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/nat64/secondary-prefix"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemNdProxy API operation for FortiManager Device updates the specified Nd Proxy.
// Returns the index value of the Nd Proxy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system nd-proxy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemNdProxy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/nd-proxy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemNdProxy API operation for FortiManager Device deletes the specified Nd Proxy.
// Returns error for service API and SDK errors.
// See the device - system nd-proxy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemNdProxy(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - nd-proxy
	return
}

// ReadSystemNdProxy API operation for FortiManager Device gets the Nd Proxy
// with the specified index value.
// Returns the requested Nd Proxy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system nd-proxy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemNdProxy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/nd-proxy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemNetflow API operation for FortiManager Device updates the specified Netflow.
// Returns the index value of the Netflow and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system netflow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemNetflow(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/netflow"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemNetflow API operation for FortiManager Device deletes the specified Netflow.
// Returns error for service API and SDK errors.
// See the device - system netflow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemNetflow(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - netflow
	return
}

// ReadSystemNetflow API operation for FortiManager Device gets the Netflow
// with the specified index value.
// Returns the requested Netflow value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system netflow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemNetflow(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/netflow"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemNetflowCollectors API operation for FortiManager Device creates a new NetflowCollectors.
// Returns the index value of the NetflowCollectors and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system netflow collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemNetflowCollectors(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/netflow/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemNetflowCollectors API operation for FortiManager Device updates the specified NetflowCollectors.
// Returns the index value of the NetflowCollectors and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system netflow collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemNetflowCollectors(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/netflow/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemNetflowCollectors API operation for FortiManager Device deletes the specified NetflowCollectors.
// Returns error for service API and SDK errors.
// See the device - system netflow collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemNetflowCollectors(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/netflow/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemNetflowCollectors API operation for FortiManager Device gets the NetflowCollectors
// with the specified index value.
// Returns the requested NetflowCollectors value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system netflow collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemNetflowCollectors(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/netflow/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemNetworkVisibility API operation for FortiManager Device updates the specified Network Visibility.
// Returns the index value of the Network Visibility and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system network-visibility chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemNetworkVisibility(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/network-visibility"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemNetworkVisibility API operation for FortiManager Device deletes the specified Network Visibility.
// Returns error for service API and SDK errors.
// See the device - system network-visibility chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemNetworkVisibility(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - network-visibility
	return
}

// ReadSystemNetworkVisibility API operation for FortiManager Device gets the Network Visibility
// with the specified index value.
// Returns the requested Network Visibility value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system network-visibility chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemNetworkVisibility(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/network-visibility"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemNtp API operation for FortiManager Device updates the specified Ntp.
// Returns the index value of the Ntp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ntp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemNtp(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ntp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemNtp API operation for FortiManager Device deletes the specified Ntp.
// Returns error for service API and SDK errors.
// See the device - system ntp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemNtp(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ntp
	return
}

// ReadSystemNtp API operation for FortiManager Device gets the Ntp
// with the specified index value.
// Returns the requested Ntp value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ntp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemNtp(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ntp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemNtpNtpserver API operation for FortiManager Device creates a new NtpNtpserver.
// Returns the index value of the NtpNtpserver and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ntp ntpserver chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemNtpNtpserver(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ntp/ntpserver"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemNtpNtpserver API operation for FortiManager Device updates the specified NtpNtpserver.
// Returns the index value of the NtpNtpserver and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ntp ntpserver chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemNtpNtpserver(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ntp/ntpserver"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemNtpNtpserver API operation for FortiManager Device deletes the specified NtpNtpserver.
// Returns error for service API and SDK errors.
// See the device - system ntp ntpserver chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemNtpNtpserver(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/ntp/ntpserver"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemNtpNtpserver API operation for FortiManager Device gets the NtpNtpserver
// with the specified index value.
// Returns the requested NtpNtpserver value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ntp ntpserver chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemNtpNtpserver(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ntp/ntpserver"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemPasswordPolicy API operation for FortiManager Device updates the specified Password Policy.
// Returns the index value of the Password Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system password-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemPasswordPolicy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/password-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemPasswordPolicy API operation for FortiManager Device deletes the specified Password Policy.
// Returns error for service API and SDK errors.
// See the device - system password-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemPasswordPolicy(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - password-policy
	return
}

// ReadSystemPasswordPolicy API operation for FortiManager Device gets the Password Policy
// with the specified index value.
// Returns the requested Password Policy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system password-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemPasswordPolicy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/password-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemPasswordPolicyGuestAdmin API operation for FortiManager Device updates the specified Password Policy Guest Admin.
// Returns the index value of the Password Policy Guest Admin and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system password-policy-guest-admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemPasswordPolicyGuestAdmin(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/password-policy-guest-admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemPasswordPolicyGuestAdmin API operation for FortiManager Device deletes the specified Password Policy Guest Admin.
// Returns error for service API and SDK errors.
// See the device - system password-policy-guest-admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemPasswordPolicyGuestAdmin(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - password-policy-guest-admin
	return
}

// ReadSystemPasswordPolicyGuestAdmin API operation for FortiManager Device gets the Password Policy Guest Admin
// with the specified index value.
// Returns the requested Password Policy Guest Admin value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system password-policy-guest-admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemPasswordPolicyGuestAdmin(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/password-policy-guest-admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemPcpServer API operation for FortiManager Device updates the specified Pcp Server.
// Returns the index value of the Pcp Server and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system pcp-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemPcpServer(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/pcp-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemPcpServer API operation for FortiManager Device deletes the specified Pcp Server.
// Returns error for service API and SDK errors.
// See the device - system pcp-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemPcpServer(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - pcp-server
	return
}

// ReadSystemPcpServer API operation for FortiManager Device gets the Pcp Server
// with the specified index value.
// Returns the requested Pcp Server value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system pcp-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemPcpServer(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/pcp-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemPcpServerPools API operation for FortiManager Device creates a new Pcp ServerPools.
// Returns the index value of the Pcp ServerPools and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system pcp-server pools chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemPcpServerPools(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/pcp-server/pools"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemPcpServerPools API operation for FortiManager Device updates the specified Pcp ServerPools.
// Returns the index value of the Pcp ServerPools and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system pcp-server pools chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemPcpServerPools(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/pcp-server/pools"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemPcpServerPools API operation for FortiManager Device deletes the specified Pcp ServerPools.
// Returns error for service API and SDK errors.
// See the device - system pcp-server pools chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemPcpServerPools(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/pcp-server/pools"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemPcpServerPools API operation for FortiManager Device gets the Pcp ServerPools
// with the specified index value.
// Returns the requested Pcp ServerPools value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system pcp-server pools chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemPcpServerPools(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/pcp-server/pools"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemPppoeInterface API operation for FortiManager Device creates a new Pppoe Interface.
// Returns the index value of the Pppoe Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system pppoe-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemPppoeInterface(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/pppoe-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemPppoeInterface API operation for FortiManager Device updates the specified Pppoe Interface.
// Returns the index value of the Pppoe Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system pppoe-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemPppoeInterface(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/pppoe-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemPppoeInterface API operation for FortiManager Device deletes the specified Pppoe Interface.
// Returns error for service API and SDK errors.
// See the device - system pppoe-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemPppoeInterface(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/pppoe-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemPppoeInterface API operation for FortiManager Device gets the Pppoe Interface
// with the specified index value.
// Returns the requested Pppoe Interface value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system pppoe-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemPppoeInterface(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/pppoe-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemProbeResponse API operation for FortiManager Device updates the specified Probe Response.
// Returns the index value of the Probe Response and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system probe-response chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemProbeResponse(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/probe-response"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemProbeResponse API operation for FortiManager Device deletes the specified Probe Response.
// Returns error for service API and SDK errors.
// See the device - system probe-response chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemProbeResponse(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - probe-response
	return
}

// ReadSystemProbeResponse API operation for FortiManager Device gets the Probe Response
// with the specified index value.
// Returns the requested Probe Response value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system probe-response chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemProbeResponse(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/probe-response"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemProxyArp API operation for FortiManager Device creates a new Proxy Arp.
// Returns the index value of the Proxy Arp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system proxy-arp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemProxyArp(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/proxy-arp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemProxyArp API operation for FortiManager Device updates the specified Proxy Arp.
// Returns the index value of the Proxy Arp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system proxy-arp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemProxyArp(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/proxy-arp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemProxyArp API operation for FortiManager Device deletes the specified Proxy Arp.
// Returns error for service API and SDK errors.
// See the device - system proxy-arp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemProxyArp(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/proxy-arp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemProxyArp API operation for FortiManager Device gets the Proxy Arp
// with the specified index value.
// Returns the requested Proxy Arp value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system proxy-arp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemProxyArp(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/proxy-arp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemPtp API operation for FortiManager Device updates the specified Ptp.
// Returns the index value of the Ptp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ptp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemPtp(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ptp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemPtp API operation for FortiManager Device deletes the specified Ptp.
// Returns error for service API and SDK errors.
// See the device - system ptp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemPtp(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ptp
	return
}

// ReadSystemPtp API operation for FortiManager Device gets the Ptp
// with the specified index value.
// Returns the requested Ptp value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ptp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemPtp(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ptp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemPtpServerInterface API operation for FortiManager Device creates a new PtpServer Interface.
// Returns the index value of the PtpServer Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ptp server-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemPtpServerInterface(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ptp/server-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemPtpServerInterface API operation for FortiManager Device updates the specified PtpServer Interface.
// Returns the index value of the PtpServer Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ptp server-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemPtpServerInterface(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ptp/server-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemPtpServerInterface API operation for FortiManager Device deletes the specified PtpServer Interface.
// Returns error for service API and SDK errors.
// See the device - system ptp server-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemPtpServerInterface(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/ptp/server-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemPtpServerInterface API operation for FortiManager Device gets the PtpServer Interface
// with the specified index value.
// Returns the requested PtpServer Interface value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ptp server-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemPtpServerInterface(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ptp/server-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemReplacemsgAdmin API operation for FortiManager Device updates the specified ReplacemsgAdmin.
// Returns the index value of the ReplacemsgAdmin and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemReplacemsgAdmin(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemReplacemsgAdmin API operation for FortiManager Device deletes the specified ReplacemsgAdmin.
// Returns error for service API and SDK errors.
// See the device - system replacemsg admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemReplacemsgAdmin(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - replacemsg admin
	return
}

// ReadSystemReplacemsgAdmin API operation for FortiManager Device gets the ReplacemsgAdmin
// with the specified index value.
// Returns the requested ReplacemsgAdmin value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemReplacemsgAdmin(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemReplacemsgAlertmail API operation for FortiManager Device updates the specified ReplacemsgAlertmail.
// Returns the index value of the ReplacemsgAlertmail and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg alertmail chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemReplacemsgAlertmail(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/alertmail"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemReplacemsgAlertmail API operation for FortiManager Device deletes the specified ReplacemsgAlertmail.
// Returns error for service API and SDK errors.
// See the device - system replacemsg alertmail chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemReplacemsgAlertmail(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - replacemsg alertmail
	return
}

// ReadSystemReplacemsgAlertmail API operation for FortiManager Device gets the ReplacemsgAlertmail
// with the specified index value.
// Returns the requested ReplacemsgAlertmail value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg alertmail chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemReplacemsgAlertmail(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/alertmail"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemReplacemsgAuth API operation for FortiManager Device updates the specified ReplacemsgAuth.
// Returns the index value of the ReplacemsgAuth and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg auth chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemReplacemsgAuth(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/auth"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemReplacemsgAuth API operation for FortiManager Device deletes the specified ReplacemsgAuth.
// Returns error for service API and SDK errors.
// See the device - system replacemsg auth chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemReplacemsgAuth(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - replacemsg auth
	return
}

// ReadSystemReplacemsgAuth API operation for FortiManager Device gets the ReplacemsgAuth
// with the specified index value.
// Returns the requested ReplacemsgAuth value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg auth chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemReplacemsgAuth(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/auth"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemReplacemsgAutomation API operation for FortiManager Device updates the specified ReplacemsgAutomation.
// Returns the index value of the ReplacemsgAutomation and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg automation chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemReplacemsgAutomation(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/automation"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemReplacemsgAutomation API operation for FortiManager Device deletes the specified ReplacemsgAutomation.
// Returns error for service API and SDK errors.
// See the device - system replacemsg automation chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemReplacemsgAutomation(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - replacemsg automation
	return
}

// ReadSystemReplacemsgAutomation API operation for FortiManager Device gets the ReplacemsgAutomation
// with the specified index value.
// Returns the requested ReplacemsgAutomation value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg automation chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemReplacemsgAutomation(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/automation"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemReplacemsgCustomMessage API operation for FortiManager Device updates the specified ReplacemsgCustom Message.
// Returns the index value of the ReplacemsgCustom Message and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg custom-message chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemReplacemsgCustomMessage(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/custom-message"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemReplacemsgCustomMessage API operation for FortiManager Device deletes the specified ReplacemsgCustom Message.
// Returns error for service API and SDK errors.
// See the device - system replacemsg custom-message chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemReplacemsgCustomMessage(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - replacemsg custom-message
	return
}

// ReadSystemReplacemsgCustomMessage API operation for FortiManager Device gets the ReplacemsgCustom Message
// with the specified index value.
// Returns the requested ReplacemsgCustom Message value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg custom-message chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemReplacemsgCustomMessage(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/custom-message"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemReplacemsgFortiguardWf API operation for FortiManager Device updates the specified ReplacemsgFortiguard Wf.
// Returns the index value of the ReplacemsgFortiguard Wf and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg fortiguard-wf chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemReplacemsgFortiguardWf(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/fortiguard-wf"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemReplacemsgFortiguardWf API operation for FortiManager Device deletes the specified ReplacemsgFortiguard Wf.
// Returns error for service API and SDK errors.
// See the device - system replacemsg fortiguard-wf chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemReplacemsgFortiguardWf(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - replacemsg fortiguard-wf
	return
}

// ReadSystemReplacemsgFortiguardWf API operation for FortiManager Device gets the ReplacemsgFortiguard Wf
// with the specified index value.
// Returns the requested ReplacemsgFortiguard Wf value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg fortiguard-wf chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemReplacemsgFortiguardWf(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/fortiguard-wf"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemReplacemsgFtp API operation for FortiManager Device updates the specified ReplacemsgFtp.
// Returns the index value of the ReplacemsgFtp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg ftp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemReplacemsgFtp(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/ftp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemReplacemsgFtp API operation for FortiManager Device deletes the specified ReplacemsgFtp.
// Returns error for service API and SDK errors.
// See the device - system replacemsg ftp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemReplacemsgFtp(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - replacemsg ftp
	return
}

// ReadSystemReplacemsgFtp API operation for FortiManager Device gets the ReplacemsgFtp
// with the specified index value.
// Returns the requested ReplacemsgFtp value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg ftp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemReplacemsgFtp(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/ftp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemReplacemsgHttp API operation for FortiManager Device updates the specified ReplacemsgHttp.
// Returns the index value of the ReplacemsgHttp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg http chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemReplacemsgHttp(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/http"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemReplacemsgHttp API operation for FortiManager Device deletes the specified ReplacemsgHttp.
// Returns error for service API and SDK errors.
// See the device - system replacemsg http chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemReplacemsgHttp(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - replacemsg http
	return
}

// ReadSystemReplacemsgHttp API operation for FortiManager Device gets the ReplacemsgHttp
// with the specified index value.
// Returns the requested ReplacemsgHttp value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg http chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemReplacemsgHttp(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/http"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemReplacemsgIcap API operation for FortiManager Device updates the specified ReplacemsgIcap.
// Returns the index value of the ReplacemsgIcap and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg icap chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemReplacemsgIcap(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/icap"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemReplacemsgIcap API operation for FortiManager Device deletes the specified ReplacemsgIcap.
// Returns error for service API and SDK errors.
// See the device - system replacemsg icap chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemReplacemsgIcap(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - replacemsg icap
	return
}

// ReadSystemReplacemsgIcap API operation for FortiManager Device gets the ReplacemsgIcap
// with the specified index value.
// Returns the requested ReplacemsgIcap value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg icap chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemReplacemsgIcap(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/icap"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemReplacemsgMail API operation for FortiManager Device updates the specified ReplacemsgMail.
// Returns the index value of the ReplacemsgMail and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg mail chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemReplacemsgMail(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/mail"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemReplacemsgMail API operation for FortiManager Device deletes the specified ReplacemsgMail.
// Returns error for service API and SDK errors.
// See the device - system replacemsg mail chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemReplacemsgMail(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - replacemsg mail
	return
}

// ReadSystemReplacemsgMail API operation for FortiManager Device gets the ReplacemsgMail
// with the specified index value.
// Returns the requested ReplacemsgMail value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg mail chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemReplacemsgMail(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/mail"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemReplacemsgNacQuar API operation for FortiManager Device updates the specified ReplacemsgNac Quar.
// Returns the index value of the ReplacemsgNac Quar and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg nac-quar chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemReplacemsgNacQuar(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/nac-quar"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemReplacemsgNacQuar API operation for FortiManager Device deletes the specified ReplacemsgNac Quar.
// Returns error for service API and SDK errors.
// See the device - system replacemsg nac-quar chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemReplacemsgNacQuar(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - replacemsg nac-quar
	return
}

// ReadSystemReplacemsgNacQuar API operation for FortiManager Device gets the ReplacemsgNac Quar
// with the specified index value.
// Returns the requested ReplacemsgNac Quar value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg nac-quar chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemReplacemsgNacQuar(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/nac-quar"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemReplacemsgSpam API operation for FortiManager Device updates the specified ReplacemsgSpam.
// Returns the index value of the ReplacemsgSpam and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg spam chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemReplacemsgSpam(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/spam"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemReplacemsgSpam API operation for FortiManager Device deletes the specified ReplacemsgSpam.
// Returns error for service API and SDK errors.
// See the device - system replacemsg spam chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemReplacemsgSpam(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - replacemsg spam
	return
}

// ReadSystemReplacemsgSpam API operation for FortiManager Device gets the ReplacemsgSpam
// with the specified index value.
// Returns the requested ReplacemsgSpam value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg spam chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemReplacemsgSpam(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/spam"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemReplacemsgSslvpn API operation for FortiManager Device updates the specified ReplacemsgSslvpn.
// Returns the index value of the ReplacemsgSslvpn and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg sslvpn chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemReplacemsgSslvpn(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/sslvpn"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemReplacemsgSslvpn API operation for FortiManager Device deletes the specified ReplacemsgSslvpn.
// Returns error for service API and SDK errors.
// See the device - system replacemsg sslvpn chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemReplacemsgSslvpn(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - replacemsg sslvpn
	return
}

// ReadSystemReplacemsgSslvpn API operation for FortiManager Device gets the ReplacemsgSslvpn
// with the specified index value.
// Returns the requested ReplacemsgSslvpn value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg sslvpn chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemReplacemsgSslvpn(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/sslvpn"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemReplacemsgTrafficQuota API operation for FortiManager Device updates the specified ReplacemsgTraffic Quota.
// Returns the index value of the ReplacemsgTraffic Quota and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg traffic-quota chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemReplacemsgTrafficQuota(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/traffic-quota"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemReplacemsgTrafficQuota API operation for FortiManager Device deletes the specified ReplacemsgTraffic Quota.
// Returns error for service API and SDK errors.
// See the device - system replacemsg traffic-quota chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemReplacemsgTrafficQuota(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - replacemsg traffic-quota
	return
}

// ReadSystemReplacemsgTrafficQuota API operation for FortiManager Device gets the ReplacemsgTraffic Quota
// with the specified index value.
// Returns the requested ReplacemsgTraffic Quota value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg traffic-quota chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemReplacemsgTrafficQuota(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/traffic-quota"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemReplacemsgUtm API operation for FortiManager Device updates the specified ReplacemsgUtm.
// Returns the index value of the ReplacemsgUtm and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg utm chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemReplacemsgUtm(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/utm"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemReplacemsgUtm API operation for FortiManager Device deletes the specified ReplacemsgUtm.
// Returns error for service API and SDK errors.
// See the device - system replacemsg utm chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemReplacemsgUtm(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - replacemsg utm
	return
}

// ReadSystemReplacemsgUtm API operation for FortiManager Device gets the ReplacemsgUtm
// with the specified index value.
// Returns the requested ReplacemsgUtm value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg utm chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemReplacemsgUtm(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/utm"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemReplacemsgWebproxy API operation for FortiManager Device updates the specified ReplacemsgWebproxy.
// Returns the index value of the ReplacemsgWebproxy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg webproxy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemReplacemsgWebproxy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/webproxy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemReplacemsgWebproxy API operation for FortiManager Device deletes the specified ReplacemsgWebproxy.
// Returns error for service API and SDK errors.
// See the device - system replacemsg webproxy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemReplacemsgWebproxy(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - replacemsg webproxy
	return
}

// ReadSystemReplacemsgWebproxy API operation for FortiManager Device gets the ReplacemsgWebproxy
// with the specified index value.
// Returns the requested ReplacemsgWebproxy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system replacemsg webproxy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemReplacemsgWebproxy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/replacemsg/webproxy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemSaml API operation for FortiManager Device updates the specified Saml.
// Returns the index value of the Saml and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system saml chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSaml(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/saml"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSaml API operation for FortiManager Device deletes the specified Saml.
// Returns error for service API and SDK errors.
// See the device - system saml chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSaml(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - saml
	return
}

// ReadSystemSaml API operation for FortiManager Device gets the Saml
// with the specified index value.
// Returns the requested Saml value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system saml chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSaml(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/saml"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemSdwan API operation for FortiManager Device updates the specified Sdwan.
// Returns the index value of the Sdwan and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSdwan(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSdwan API operation for FortiManager Device deletes the specified Sdwan.
// Returns error for service API and SDK errors.
// See the device - system sdwan chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSdwan(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - sdwan
	return
}

// ReadSystemSdwan API operation for FortiManager Device gets the Sdwan
// with the specified index value.
// Returns the requested Sdwan value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSdwan(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSdwanDuplication API operation for FortiManager Device creates a new SdwanDuplication.
// Returns the index value of the SdwanDuplication and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan duplication chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSdwanDuplication(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/duplication"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSdwanDuplication API operation for FortiManager Device updates the specified SdwanDuplication.
// Returns the index value of the SdwanDuplication and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan duplication chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSdwanDuplication(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/duplication"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSdwanDuplication API operation for FortiManager Device deletes the specified SdwanDuplication.
// Returns error for service API and SDK errors.
// See the device - system sdwan duplication chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSdwanDuplication(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/duplication"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSdwanDuplication API operation for FortiManager Device gets the SdwanDuplication
// with the specified index value.
// Returns the requested SdwanDuplication value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan duplication chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSdwanDuplication(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/duplication"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSdwanHealthCheck API operation for FortiManager Device creates a new SdwanHealth Check.
// Returns the index value of the SdwanHealth Check and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan health-check chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSdwanHealthCheck(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/health-check"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSdwanHealthCheck API operation for FortiManager Device updates the specified SdwanHealth Check.
// Returns the index value of the SdwanHealth Check and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan health-check chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSdwanHealthCheck(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/health-check"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSdwanHealthCheck API operation for FortiManager Device deletes the specified SdwanHealth Check.
// Returns error for service API and SDK errors.
// See the device - system sdwan health-check chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSdwanHealthCheck(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/health-check"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSdwanHealthCheck API operation for FortiManager Device gets the SdwanHealth Check
// with the specified index value.
// Returns the requested SdwanHealth Check value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan health-check chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSdwanHealthCheck(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/health-check"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSdwanHealthCheckSla API operation for FortiManager Device creates a new SdwanHealth CheckSla.
// Returns the index value of the SdwanHealth CheckSla and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan health-check sla chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSdwanHealthCheckSla(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/health-check/{health-check}/sla"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSdwanHealthCheckSla API operation for FortiManager Device updates the specified SdwanHealth CheckSla.
// Returns the index value of the SdwanHealth CheckSla and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan health-check sla chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSdwanHealthCheckSla(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/health-check/{health-check}/sla"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSdwanHealthCheckSla API operation for FortiManager Device deletes the specified SdwanHealth CheckSla.
// Returns error for service API and SDK errors.
// See the device - system sdwan health-check sla chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSdwanHealthCheckSla(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/health-check/{health-check}/sla"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSdwanHealthCheckSla API operation for FortiManager Device gets the SdwanHealth CheckSla
// with the specified index value.
// Returns the requested SdwanHealth CheckSla value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan health-check sla chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSdwanHealthCheckSla(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/health-check/{health-check}/sla"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSdwanMembers API operation for FortiManager Device creates a new SdwanMembers.
// Returns the index value of the SdwanMembers and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan members chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSdwanMembers(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/members"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSdwanMembers API operation for FortiManager Device updates the specified SdwanMembers.
// Returns the index value of the SdwanMembers and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan members chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSdwanMembers(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/members"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSdwanMembers API operation for FortiManager Device deletes the specified SdwanMembers.
// Returns error for service API and SDK errors.
// See the device - system sdwan members chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSdwanMembers(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/members"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSdwanMembers API operation for FortiManager Device gets the SdwanMembers
// with the specified index value.
// Returns the requested SdwanMembers value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan members chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSdwanMembers(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/members"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemSdwanMembersMove API operation for FortiManager Device updates the specified SdwanMembersMove.
// Returns the index value of the SdwanMembersMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan members move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSdwanMembersMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/members/{members}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadSystemSdwanMembersMove API operation for FortiManager Device gets the SdwanMembersMove
// with the specified index value.
// Returns the requested SdwanMembersMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan members move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSdwanMembersMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/members"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"seq-num"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// CreateSystemSdwanService API operation for FortiManager Device creates a new SdwanService.
// Returns the index value of the SdwanService and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan service chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSdwanService(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/service"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSdwanService API operation for FortiManager Device updates the specified SdwanService.
// Returns the index value of the SdwanService and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan service chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSdwanService(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/service"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSdwanService API operation for FortiManager Device deletes the specified SdwanService.
// Returns error for service API and SDK errors.
// See the device - system sdwan service chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSdwanService(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/service"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSdwanService API operation for FortiManager Device gets the SdwanService
// with the specified index value.
// Returns the requested SdwanService value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan service chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSdwanService(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/service"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemSdwanServiceMove API operation for FortiManager Device updates the specified SdwanServiceMove.
// Returns the index value of the SdwanServiceMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan service move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSdwanServiceMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/service/{service}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadSystemSdwanServiceMove API operation for FortiManager Device gets the SdwanServiceMove
// with the specified index value.
// Returns the requested SdwanServiceMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan service move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSdwanServiceMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/service"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"id"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// CreateSystemSdwanZone API operation for FortiManager Device creates a new SdwanZone.
// Returns the index value of the SdwanZone and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan zone chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSdwanZone(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/zone"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSdwanZone API operation for FortiManager Device updates the specified SdwanZone.
// Returns the index value of the SdwanZone and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan zone chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSdwanZone(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/zone"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSdwanZone API operation for FortiManager Device deletes the specified SdwanZone.
// Returns error for service API and SDK errors.
// See the device - system sdwan zone chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSdwanZone(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/zone"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSdwanZone API operation for FortiManager Device gets the SdwanZone
// with the specified index value.
// Returns the requested SdwanZone value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan zone chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSdwanZone(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/zone"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemSdwanZoneMove API operation for FortiManager Device updates the specified SdwanZoneMove.
// Returns the index value of the SdwanZoneMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan zone move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSdwanZoneMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/zone/{zone}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadSystemSdwanZoneMove API operation for FortiManager Device gets the SdwanZoneMove
// with the specified index value.
// Returns the requested SdwanZoneMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sdwan zone move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSdwanZoneMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sdwan/zone"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"name"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// CreateSystemSessionHelper API operation for FortiManager Device creates a new Session Helper.
// Returns the index value of the Session Helper and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system session-helper chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSessionHelper(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/session-helper"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSessionHelper API operation for FortiManager Device updates the specified Session Helper.
// Returns the index value of the Session Helper and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system session-helper chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSessionHelper(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/session-helper"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSessionHelper API operation for FortiManager Device deletes the specified Session Helper.
// Returns error for service API and SDK errors.
// See the device - system session-helper chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSessionHelper(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/session-helper"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSessionHelper API operation for FortiManager Device gets the Session Helper
// with the specified index value.
// Returns the requested Session Helper value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system session-helper chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSessionHelper(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/session-helper"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemSessionTtl API operation for FortiManager Device updates the specified Session Ttl.
// Returns the index value of the Session Ttl and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system session-ttl chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSessionTtl(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/session-ttl"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSessionTtl API operation for FortiManager Device deletes the specified Session Ttl.
// Returns error for service API and SDK errors.
// See the device - system session-ttl chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSessionTtl(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - session-ttl
	return
}

// ReadSystemSessionTtl API operation for FortiManager Device gets the Session Ttl
// with the specified index value.
// Returns the requested Session Ttl value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system session-ttl chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSessionTtl(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/session-ttl"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSessionTtlPort API operation for FortiManager Device creates a new Session TtlPort.
// Returns the index value of the Session TtlPort and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system session-ttl port chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSessionTtlPort(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/session-ttl/port"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSessionTtlPort API operation for FortiManager Device updates the specified Session TtlPort.
// Returns the index value of the Session TtlPort and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system session-ttl port chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSessionTtlPort(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/session-ttl/port"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSessionTtlPort API operation for FortiManager Device deletes the specified Session TtlPort.
// Returns error for service API and SDK errors.
// See the device - system session-ttl port chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSessionTtlPort(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/session-ttl/port"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSessionTtlPort API operation for FortiManager Device gets the Session TtlPort
// with the specified index value.
// Returns the requested Session TtlPort value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system session-ttl port chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSessionTtlPort(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/session-ttl/port"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemSettings API operation for FortiManager Device updates the specified Settings.
// Returns the index value of the Settings and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSettings(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSettings API operation for FortiManager Device deletes the specified Settings.
// Returns error for service API and SDK errors.
// See the device - system settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSettings(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - settings
	return
}

// ReadSystemSettings API operation for FortiManager Device gets the Settings
// with the specified index value.
// Returns the requested Settings value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSettings(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemSflow API operation for FortiManager Device updates the specified Sflow.
// Returns the index value of the Sflow and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sflow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSflow(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/sflow"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSflow API operation for FortiManager Device deletes the specified Sflow.
// Returns error for service API and SDK errors.
// See the device - system sflow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSflow(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - sflow
	return
}

// ReadSystemSflow API operation for FortiManager Device gets the Sflow
// with the specified index value.
// Returns the requested Sflow value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sflow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSflow(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/sflow"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSflowCollectors API operation for FortiManager Device creates a new SflowCollectors.
// Returns the index value of the SflowCollectors and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sflow collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSflowCollectors(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/sflow/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSflowCollectors API operation for FortiManager Device updates the specified SflowCollectors.
// Returns the index value of the SflowCollectors and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sflow collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSflowCollectors(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/sflow/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSflowCollectors API operation for FortiManager Device deletes the specified SflowCollectors.
// Returns error for service API and SDK errors.
// See the device - system sflow collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSflowCollectors(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/sflow/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSflowCollectors API operation for FortiManager Device gets the SflowCollectors
// with the specified index value.
// Returns the requested SflowCollectors value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sflow collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSflowCollectors(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/sflow/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSitTunnel API operation for FortiManager Device creates a new Sit Tunnel.
// Returns the index value of the Sit Tunnel and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sit-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSitTunnel(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sit-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSitTunnel API operation for FortiManager Device updates the specified Sit Tunnel.
// Returns the index value of the Sit Tunnel and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sit-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSitTunnel(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sit-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSitTunnel API operation for FortiManager Device deletes the specified Sit Tunnel.
// Returns error for service API and SDK errors.
// See the device - system sit-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSitTunnel(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sit-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSitTunnel API operation for FortiManager Device gets the Sit Tunnel
// with the specified index value.
// Returns the requested Sit Tunnel value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sit-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSitTunnel(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/sit-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSmcNtpNtpserver API operation for FortiManager Device creates a new Smc NtpNtpserver.
// Returns the index value of the Smc NtpNtpserver and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system smc-ntp ntpserver chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSmcNtpNtpserver(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/smc-ntp/ntpserver"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSmcNtpNtpserver API operation for FortiManager Device updates the specified Smc NtpNtpserver.
// Returns the index value of the Smc NtpNtpserver and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system smc-ntp ntpserver chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSmcNtpNtpserver(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/smc-ntp/ntpserver"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSmcNtpNtpserver API operation for FortiManager Device deletes the specified Smc NtpNtpserver.
// Returns error for service API and SDK errors.
// See the device - system smc-ntp ntpserver chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSmcNtpNtpserver(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/smc-ntp/ntpserver"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSmcNtpNtpserver API operation for FortiManager Device gets the Smc NtpNtpserver
// with the specified index value.
// Returns the requested Smc NtpNtpserver value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system smc-ntp ntpserver chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSmcNtpNtpserver(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/smc-ntp/ntpserver"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSnmpCommunity API operation for FortiManager Device creates a new SnmpCommunity.
// Returns the index value of the SnmpCommunity and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system snmp community chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSnmpCommunity(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/snmp/community"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSnmpCommunity API operation for FortiManager Device updates the specified SnmpCommunity.
// Returns the index value of the SnmpCommunity and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system snmp community chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSnmpCommunity(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/snmp/community"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSnmpCommunity API operation for FortiManager Device deletes the specified SnmpCommunity.
// Returns error for service API and SDK errors.
// See the device - system snmp community chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSnmpCommunity(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/snmp/community"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSnmpCommunity API operation for FortiManager Device gets the SnmpCommunity
// with the specified index value.
// Returns the requested SnmpCommunity value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system snmp community chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSnmpCommunity(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/snmp/community"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSnmpCommunityHosts API operation for FortiManager Device creates a new SnmpCommunityHosts.
// Returns the index value of the SnmpCommunityHosts and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system snmp community hosts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSnmpCommunityHosts(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/snmp/community/{community}/hosts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSnmpCommunityHosts API operation for FortiManager Device updates the specified SnmpCommunityHosts.
// Returns the index value of the SnmpCommunityHosts and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system snmp community hosts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSnmpCommunityHosts(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/snmp/community/{community}/hosts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSnmpCommunityHosts API operation for FortiManager Device deletes the specified SnmpCommunityHosts.
// Returns error for service API and SDK errors.
// See the device - system snmp community hosts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSnmpCommunityHosts(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/snmp/community/{community}/hosts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSnmpCommunityHosts API operation for FortiManager Device gets the SnmpCommunityHosts
// with the specified index value.
// Returns the requested SnmpCommunityHosts value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system snmp community hosts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSnmpCommunityHosts(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/snmp/community/{community}/hosts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSnmpCommunityHosts6 API operation for FortiManager Device creates a new SnmpCommunityHosts6.
// Returns the index value of the SnmpCommunityHosts6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system snmp community hosts6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSnmpCommunityHosts6(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/snmp/community/{community}/hosts6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSnmpCommunityHosts6 API operation for FortiManager Device updates the specified SnmpCommunityHosts6.
// Returns the index value of the SnmpCommunityHosts6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system snmp community hosts6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSnmpCommunityHosts6(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/snmp/community/{community}/hosts6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSnmpCommunityHosts6 API operation for FortiManager Device deletes the specified SnmpCommunityHosts6.
// Returns error for service API and SDK errors.
// See the device - system snmp community hosts6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSnmpCommunityHosts6(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/snmp/community/{community}/hosts6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSnmpCommunityHosts6 API operation for FortiManager Device gets the SnmpCommunityHosts6
// with the specified index value.
// Returns the requested SnmpCommunityHosts6 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system snmp community hosts6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSnmpCommunityHosts6(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/snmp/community/{community}/hosts6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSnmpMibView API operation for FortiManager Device creates a new SnmpMib View.
// Returns the index value of the SnmpMib View and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system snmp mib-view chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSnmpMibView(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/snmp/mib-view"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSnmpMibView API operation for FortiManager Device updates the specified SnmpMib View.
// Returns the index value of the SnmpMib View and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system snmp mib-view chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSnmpMibView(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/snmp/mib-view"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSnmpMibView API operation for FortiManager Device deletes the specified SnmpMib View.
// Returns error for service API and SDK errors.
// See the device - system snmp mib-view chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSnmpMibView(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/snmp/mib-view"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSnmpMibView API operation for FortiManager Device gets the SnmpMib View
// with the specified index value.
// Returns the requested SnmpMib View value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system snmp mib-view chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSnmpMibView(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/snmp/mib-view"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemSnmpSysinfo API operation for FortiManager Device updates the specified SnmpSysinfo.
// Returns the index value of the SnmpSysinfo and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system snmp sysinfo chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSnmpSysinfo(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/snmp/sysinfo"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSnmpSysinfo API operation for FortiManager Device deletes the specified SnmpSysinfo.
// Returns error for service API and SDK errors.
// See the device - system snmp sysinfo chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSnmpSysinfo(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - snmp sysinfo
	return
}

// ReadSystemSnmpSysinfo API operation for FortiManager Device gets the SnmpSysinfo
// with the specified index value.
// Returns the requested SnmpSysinfo value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system snmp sysinfo chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSnmpSysinfo(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/snmp/sysinfo"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSnmpUser API operation for FortiManager Device creates a new SnmpUser.
// Returns the index value of the SnmpUser and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system snmp user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSnmpUser(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/snmp/user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSnmpUser API operation for FortiManager Device updates the specified SnmpUser.
// Returns the index value of the SnmpUser and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system snmp user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSnmpUser(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/snmp/user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSnmpUser API operation for FortiManager Device deletes the specified SnmpUser.
// Returns error for service API and SDK errors.
// See the device - system snmp user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSnmpUser(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/snmp/user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSnmpUser API operation for FortiManager Device gets the SnmpUser
// with the specified index value.
// Returns the requested SnmpUser value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system snmp user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSnmpUser(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/snmp/user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSpeedTestSchedule API operation for FortiManager Device creates a new Speed Test Schedule.
// Returns the index value of the Speed Test Schedule and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system speed-test-schedule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSpeedTestSchedule(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/speed-test-schedule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSpeedTestSchedule API operation for FortiManager Device updates the specified Speed Test Schedule.
// Returns the index value of the Speed Test Schedule and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system speed-test-schedule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSpeedTestSchedule(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/speed-test-schedule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSpeedTestSchedule API operation for FortiManager Device deletes the specified Speed Test Schedule.
// Returns error for service API and SDK errors.
// See the device - system speed-test-schedule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSpeedTestSchedule(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/speed-test-schedule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSpeedTestSchedule API operation for FortiManager Device gets the Speed Test Schedule
// with the specified index value.
// Returns the requested Speed Test Schedule value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system speed-test-schedule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSpeedTestSchedule(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/speed-test-schedule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSpeedTestServer API operation for FortiManager Device creates a new Speed Test Server.
// Returns the index value of the Speed Test Server and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system speed-test-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSpeedTestServer(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/speed-test-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSpeedTestServer API operation for FortiManager Device updates the specified Speed Test Server.
// Returns the index value of the Speed Test Server and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system speed-test-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSpeedTestServer(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/speed-test-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSpeedTestServer API operation for FortiManager Device deletes the specified Speed Test Server.
// Returns error for service API and SDK errors.
// See the device - system speed-test-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSpeedTestServer(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/speed-test-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSpeedTestServer API operation for FortiManager Device gets the Speed Test Server
// with the specified index value.
// Returns the requested Speed Test Server value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system speed-test-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSpeedTestServer(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/speed-test-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSpeedTestServerHost API operation for FortiManager Device creates a new Speed Test ServerHost.
// Returns the index value of the Speed Test ServerHost and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system speed-test-server host chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSpeedTestServerHost(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/speed-test-server/{speed-test-server}/host"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSpeedTestServerHost API operation for FortiManager Device updates the specified Speed Test ServerHost.
// Returns the index value of the Speed Test ServerHost and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system speed-test-server host chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSpeedTestServerHost(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/speed-test-server/{speed-test-server}/host"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSpeedTestServerHost API operation for FortiManager Device deletes the specified Speed Test ServerHost.
// Returns error for service API and SDK errors.
// See the device - system speed-test-server host chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSpeedTestServerHost(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/speed-test-server/{speed-test-server}/host"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSpeedTestServerHost API operation for FortiManager Device gets the Speed Test ServerHost
// with the specified index value.
// Returns the requested Speed Test ServerHost value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system speed-test-server host chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSpeedTestServerHost(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/speed-test-server/{speed-test-server}/host"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemSpeedTestSetting API operation for FortiManager Device updates the specified Speed Test Setting.
// Returns the index value of the Speed Test Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system speed-test-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSpeedTestSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/speed-test-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSpeedTestSetting API operation for FortiManager Device deletes the specified Speed Test Setting.
// Returns error for service API and SDK errors.
// See the device - system speed-test-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSpeedTestSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - speed-test-setting
	return
}

// ReadSystemSpeedTestSetting API operation for FortiManager Device gets the Speed Test Setting
// with the specified index value.
// Returns the requested Speed Test Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system speed-test-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSpeedTestSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/speed-test-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemSshConfig API operation for FortiManager Device updates the specified Ssh Config.
// Returns the index value of the Ssh Config and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ssh-config chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSshConfig(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ssh-config"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSshConfig API operation for FortiManager Device deletes the specified Ssh Config.
// Returns error for service API and SDK errors.
// See the device - system ssh-config chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSshConfig(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - ssh-config
	return
}

// ReadSystemSshConfig API operation for FortiManager Device gets the Ssh Config
// with the specified index value.
// Returns the requested Ssh Config value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system ssh-config chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSshConfig(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/ssh-config"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSsoAdmin API operation for FortiManager Device creates a new Sso Admin.
// Returns the index value of the Sso Admin and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sso-admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSsoAdmin(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/sso-admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSsoAdmin API operation for FortiManager Device updates the specified Sso Admin.
// Returns the index value of the Sso Admin and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sso-admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSsoAdmin(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/sso-admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSsoAdmin API operation for FortiManager Device deletes the specified Sso Admin.
// Returns error for service API and SDK errors.
// See the device - system sso-admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSsoAdmin(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/sso-admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSsoAdmin API operation for FortiManager Device gets the Sso Admin
// with the specified index value.
// Returns the requested Sso Admin value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sso-admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSsoAdmin(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/sso-admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSsoForticloudAdmin API operation for FortiManager Device creates a new Sso Forticloud Admin.
// Returns the index value of the Sso Forticloud Admin and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sso-forticloud-admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSsoForticloudAdmin(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/sso-forticloud-admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSsoForticloudAdmin API operation for FortiManager Device updates the specified Sso Forticloud Admin.
// Returns the index value of the Sso Forticloud Admin and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sso-forticloud-admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSsoForticloudAdmin(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/sso-forticloud-admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSsoForticloudAdmin API operation for FortiManager Device deletes the specified Sso Forticloud Admin.
// Returns error for service API and SDK errors.
// See the device - system sso-forticloud-admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSsoForticloudAdmin(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/sso-forticloud-admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSsoForticloudAdmin API operation for FortiManager Device gets the Sso Forticloud Admin
// with the specified index value.
// Returns the requested Sso Forticloud Admin value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sso-forticloud-admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSsoForticloudAdmin(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/sso-forticloud-admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSsoFortigateCloudAdmin API operation for FortiManager Device creates a new Sso Fortigate Cloud Admin.
// Returns the index value of the Sso Fortigate Cloud Admin and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sso-fortigate-cloud-admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSsoFortigateCloudAdmin(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/sso-fortigate-cloud-admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSsoFortigateCloudAdmin API operation for FortiManager Device updates the specified Sso Fortigate Cloud Admin.
// Returns the index value of the Sso Fortigate Cloud Admin and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sso-fortigate-cloud-admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSsoFortigateCloudAdmin(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/sso-fortigate-cloud-admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSsoFortigateCloudAdmin API operation for FortiManager Device deletes the specified Sso Fortigate Cloud Admin.
// Returns error for service API and SDK errors.
// See the device - system sso-fortigate-cloud-admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSsoFortigateCloudAdmin(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/sso-fortigate-cloud-admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSsoFortigateCloudAdmin API operation for FortiManager Device gets the Sso Fortigate Cloud Admin
// with the specified index value.
// Returns the requested Sso Fortigate Cloud Admin value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system sso-fortigate-cloud-admin chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSsoFortigateCloudAdmin(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/sso-fortigate-cloud-admin"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemStandaloneCluster API operation for FortiManager Device updates the specified Standalone Cluster.
// Returns the index value of the Standalone Cluster and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system standalone-cluster chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemStandaloneCluster(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/standalone-cluster"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemStandaloneCluster API operation for FortiManager Device deletes the specified Standalone Cluster.
// Returns error for service API and SDK errors.
// See the device - system standalone-cluster chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemStandaloneCluster(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - standalone-cluster
	return
}

// ReadSystemStandaloneCluster API operation for FortiManager Device gets the Standalone Cluster
// with the specified index value.
// Returns the requested Standalone Cluster value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system standalone-cluster chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemStandaloneCluster(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/standalone-cluster"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemStandaloneClusterClusterPeer API operation for FortiManager Device creates a new Standalone ClusterCluster Peer.
// Returns the index value of the Standalone ClusterCluster Peer and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system standalone-cluster cluster-peer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemStandaloneClusterClusterPeer(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/standalone-cluster/cluster-peer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemStandaloneClusterClusterPeer API operation for FortiManager Device updates the specified Standalone ClusterCluster Peer.
// Returns the index value of the Standalone ClusterCluster Peer and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system standalone-cluster cluster-peer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemStandaloneClusterClusterPeer(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/standalone-cluster/cluster-peer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemStandaloneClusterClusterPeer API operation for FortiManager Device deletes the specified Standalone ClusterCluster Peer.
// Returns error for service API and SDK errors.
// See the device - system standalone-cluster cluster-peer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemStandaloneClusterClusterPeer(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/standalone-cluster/cluster-peer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemStandaloneClusterClusterPeer API operation for FortiManager Device gets the Standalone ClusterCluster Peer
// with the specified index value.
// Returns the requested Standalone ClusterCluster Peer value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system standalone-cluster cluster-peer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemStandaloneClusterClusterPeer(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/standalone-cluster/cluster-peer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemStandaloneClusterClusterPeerSessionSyncFilter API operation for FortiManager Device updates the specified Standalone ClusterCluster PeerSession Sync Filter.
// Returns the index value of the Standalone ClusterCluster PeerSession Sync Filter and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system standalone-cluster cluster-peer session-sync-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemStandaloneClusterClusterPeerSessionSyncFilter(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/standalone-cluster/cluster-peer/{cluster-peer}/session-sync-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemStandaloneClusterClusterPeerSessionSyncFilter API operation for FortiManager Device deletes the specified Standalone ClusterCluster PeerSession Sync Filter.
// Returns error for service API and SDK errors.
// See the device - system standalone-cluster cluster-peer session-sync-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemStandaloneClusterClusterPeerSessionSyncFilter(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - standalone-cluster cluster-peer session-sync-filter
	return
}

// ReadSystemStandaloneClusterClusterPeerSessionSyncFilter API operation for FortiManager Device gets the Standalone ClusterCluster PeerSession Sync Filter
// with the specified index value.
// Returns the requested Standalone ClusterCluster PeerSession Sync Filter value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system standalone-cluster cluster-peer session-sync-filter chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemStandaloneClusterClusterPeerSessionSyncFilter(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/standalone-cluster/cluster-peer/{cluster-peer}/session-sync-filter"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemStandaloneClusterClusterPeerSessionSyncFilterCustomService API operation for FortiManager Device creates a new Standalone ClusterCluster PeerSession Sync FilterCustom Service.
// Returns the index value of the Standalone ClusterCluster PeerSession Sync FilterCustom Service and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system standalone-cluster cluster-peer session-sync-filter custom-service chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemStandaloneClusterClusterPeerSessionSyncFilterCustomService(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/standalone-cluster/cluster-peer/{cluster-peer}/session-sync-filter/custom-service"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemStandaloneClusterClusterPeerSessionSyncFilterCustomService API operation for FortiManager Device updates the specified Standalone ClusterCluster PeerSession Sync FilterCustom Service.
// Returns the index value of the Standalone ClusterCluster PeerSession Sync FilterCustom Service and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system standalone-cluster cluster-peer session-sync-filter custom-service chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemStandaloneClusterClusterPeerSessionSyncFilterCustomService(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/standalone-cluster/cluster-peer/{cluster-peer}/session-sync-filter/custom-service"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemStandaloneClusterClusterPeerSessionSyncFilterCustomService API operation for FortiManager Device deletes the specified Standalone ClusterCluster PeerSession Sync FilterCustom Service.
// Returns error for service API and SDK errors.
// See the device - system standalone-cluster cluster-peer session-sync-filter custom-service chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemStandaloneClusterClusterPeerSessionSyncFilterCustomService(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/standalone-cluster/cluster-peer/{cluster-peer}/session-sync-filter/custom-service"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemStandaloneClusterClusterPeerSessionSyncFilterCustomService API operation for FortiManager Device gets the Standalone ClusterCluster PeerSession Sync FilterCustom Service
// with the specified index value.
// Returns the requested Standalone ClusterCluster PeerSession Sync FilterCustom Service value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system standalone-cluster cluster-peer session-sync-filter custom-service chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemStandaloneClusterClusterPeerSessionSyncFilterCustomService(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/standalone-cluster/cluster-peer/{cluster-peer}/session-sync-filter/custom-service"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemStorage API operation for FortiManager Device creates a new Storage.
// Returns the index value of the Storage and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system storage chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemStorage(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/storage"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemStorage API operation for FortiManager Device updates the specified Storage.
// Returns the index value of the Storage and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system storage chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemStorage(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/storage"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemStorage API operation for FortiManager Device deletes the specified Storage.
// Returns error for service API and SDK errors.
// See the device - system storage chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemStorage(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/storage"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemStorage API operation for FortiManager Device gets the Storage
// with the specified index value.
// Returns the requested Storage value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system storage chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemStorage(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/storage"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemSwitchInterface API operation for FortiManager Device creates a new Switch Interface.
// Returns the index value of the Switch Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system switch-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemSwitchInterface(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/switch-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemSwitchInterface API operation for FortiManager Device updates the specified Switch Interface.
// Returns the index value of the Switch Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system switch-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemSwitchInterface(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/switch-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemSwitchInterface API operation for FortiManager Device deletes the specified Switch Interface.
// Returns error for service API and SDK errors.
// See the device - system switch-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemSwitchInterface(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/switch-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemSwitchInterface API operation for FortiManager Device gets the Switch Interface
// with the specified index value.
// Returns the requested Switch Interface value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system switch-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemSwitchInterface(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/switch-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemTosBasedPriority API operation for FortiManager Device creates a new Tos Based Priority.
// Returns the index value of the Tos Based Priority and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system tos-based-priority chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemTosBasedPriority(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/tos-based-priority"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemTosBasedPriority API operation for FortiManager Device updates the specified Tos Based Priority.
// Returns the index value of the Tos Based Priority and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system tos-based-priority chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemTosBasedPriority(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/tos-based-priority"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemTosBasedPriority API operation for FortiManager Device deletes the specified Tos Based Priority.
// Returns error for service API and SDK errors.
// See the device - system tos-based-priority chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemTosBasedPriority(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/tos-based-priority"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemTosBasedPriority API operation for FortiManager Device gets the Tos Based Priority
// with the specified index value.
// Returns the requested Tos Based Priority value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system tos-based-priority chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemTosBasedPriority(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/tos-based-priority"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemVdom API operation for FortiManager Device creates a new Vdom.
// Returns the index value of the Vdom and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemVdom(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/vdom"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemVdom API operation for FortiManager Device updates the specified Vdom.
// Returns the index value of the Vdom and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemVdom(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/vdom"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemVdom API operation for FortiManager Device deletes the specified Vdom.
// Returns error for service API and SDK errors.
// See the device - system vdom chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemVdom(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/vdom"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemVdom API operation for FortiManager Device gets the Vdom
// with the specified index value.
// Returns the requested Vdom value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemVdom(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/vdom"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemVdomDns API operation for FortiManager Device updates the specified Vdom Dns.
// Returns the index value of the Vdom Dns and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-dns chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemVdomDns(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vdom-dns"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemVdomDns API operation for FortiManager Device deletes the specified Vdom Dns.
// Returns error for service API and SDK errors.
// See the device - system vdom-dns chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemVdomDns(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - vdom-dns
	return
}

// ReadSystemVdomDns API operation for FortiManager Device gets the Vdom Dns
// with the specified index value.
// Returns the requested Vdom Dns value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-dns chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemVdomDns(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vdom-dns"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemVdomException API operation for FortiManager Device creates a new Vdom Exception.
// Returns the index value of the Vdom Exception and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-exception chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemVdomException(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/vdom-exception"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemVdomException API operation for FortiManager Device updates the specified Vdom Exception.
// Returns the index value of the Vdom Exception and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-exception chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemVdomException(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/vdom-exception"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemVdomException API operation for FortiManager Device deletes the specified Vdom Exception.
// Returns error for service API and SDK errors.
// See the device - system vdom-exception chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemVdomException(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/vdom-exception"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemVdomException API operation for FortiManager Device gets the Vdom Exception
// with the specified index value.
// Returns the requested Vdom Exception value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-exception chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemVdomException(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/vdom-exception"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemVdomLink API operation for FortiManager Device creates a new Vdom Link.
// Returns the index value of the Vdom Link and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-link chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemVdomLink(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/vdom-link"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemVdomLink API operation for FortiManager Device updates the specified Vdom Link.
// Returns the index value of the Vdom Link and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-link chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemVdomLink(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/vdom-link"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemVdomLink API operation for FortiManager Device deletes the specified Vdom Link.
// Returns error for service API and SDK errors.
// See the device - system vdom-link chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemVdomLink(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/vdom-link"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemVdomLink API operation for FortiManager Device gets the Vdom Link
// with the specified index value.
// Returns the requested Vdom Link value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-link chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemVdomLink(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/vdom-link"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemVdomNetflow API operation for FortiManager Device updates the specified Vdom Netflow.
// Returns the index value of the Vdom Netflow and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-netflow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemVdomNetflow(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vdom-netflow"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemVdomNetflow API operation for FortiManager Device deletes the specified Vdom Netflow.
// Returns error for service API and SDK errors.
// See the device - system vdom-netflow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemVdomNetflow(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - vdom-netflow
	return
}

// ReadSystemVdomNetflow API operation for FortiManager Device gets the Vdom Netflow
// with the specified index value.
// Returns the requested Vdom Netflow value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-netflow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemVdomNetflow(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vdom-netflow"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemVdomNetflowCollectors API operation for FortiManager Device creates a new Vdom NetflowCollectors.
// Returns the index value of the Vdom NetflowCollectors and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-netflow collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemVdomNetflowCollectors(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vdom-netflow/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemVdomNetflowCollectors API operation for FortiManager Device updates the specified Vdom NetflowCollectors.
// Returns the index value of the Vdom NetflowCollectors and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-netflow collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemVdomNetflowCollectors(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vdom-netflow/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemVdomNetflowCollectors API operation for FortiManager Device deletes the specified Vdom NetflowCollectors.
// Returns error for service API and SDK errors.
// See the device - system vdom-netflow collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemVdomNetflowCollectors(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vdom-netflow/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemVdomNetflowCollectors API operation for FortiManager Device gets the Vdom NetflowCollectors
// with the specified index value.
// Returns the requested Vdom NetflowCollectors value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-netflow collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemVdomNetflowCollectors(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vdom-netflow/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemVdomProperty API operation for FortiManager Device creates a new Vdom Property.
// Returns the index value of the Vdom Property and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-property chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemVdomProperty(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/vdom-property"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemVdomProperty API operation for FortiManager Device updates the specified Vdom Property.
// Returns the index value of the Vdom Property and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-property chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemVdomProperty(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/vdom-property"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemVdomProperty API operation for FortiManager Device deletes the specified Vdom Property.
// Returns error for service API and SDK errors.
// See the device - system vdom-property chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemVdomProperty(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/vdom-property"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemVdomProperty API operation for FortiManager Device gets the Vdom Property
// with the specified index value.
// Returns the requested Vdom Property value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-property chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemVdomProperty(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/vdom-property"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemVdomRadiusServer API operation for FortiManager Device creates a new Vdom Radius Server.
// Returns the index value of the Vdom Radius Server and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-radius-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemVdomRadiusServer(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/vdom-radius-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemVdomRadiusServer API operation for FortiManager Device updates the specified Vdom Radius Server.
// Returns the index value of the Vdom Radius Server and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-radius-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemVdomRadiusServer(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/vdom-radius-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemVdomRadiusServer API operation for FortiManager Device deletes the specified Vdom Radius Server.
// Returns error for service API and SDK errors.
// See the device - system vdom-radius-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemVdomRadiusServer(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/system/vdom-radius-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemVdomRadiusServer API operation for FortiManager Device gets the Vdom Radius Server
// with the specified index value.
// Returns the requested Vdom Radius Server value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-radius-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemVdomRadiusServer(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/system/vdom-radius-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemVdomSflow API operation for FortiManager Device updates the specified Vdom Sflow.
// Returns the index value of the Vdom Sflow and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-sflow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemVdomSflow(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vdom-sflow"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemVdomSflow API operation for FortiManager Device deletes the specified Vdom Sflow.
// Returns error for service API and SDK errors.
// See the device - system vdom-sflow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemVdomSflow(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - vdom-sflow
	return
}

// ReadSystemVdomSflow API operation for FortiManager Device gets the Vdom Sflow
// with the specified index value.
// Returns the requested Vdom Sflow value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-sflow chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemVdomSflow(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vdom-sflow"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemVdomSflowCollectors API operation for FortiManager Device creates a new Vdom SflowCollectors.
// Returns the index value of the Vdom SflowCollectors and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-sflow collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemVdomSflowCollectors(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vdom-sflow/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemVdomSflowCollectors API operation for FortiManager Device updates the specified Vdom SflowCollectors.
// Returns the index value of the Vdom SflowCollectors and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-sflow collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemVdomSflowCollectors(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vdom-sflow/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemVdomSflowCollectors API operation for FortiManager Device deletes the specified Vdom SflowCollectors.
// Returns error for service API and SDK errors.
// See the device - system vdom-sflow collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemVdomSflowCollectors(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vdom-sflow/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemVdomSflowCollectors API operation for FortiManager Device gets the Vdom SflowCollectors
// with the specified index value.
// Returns the requested Vdom SflowCollectors value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vdom-sflow collectors chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemVdomSflowCollectors(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vdom-sflow/collectors"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateSystemVneTunnel API operation for FortiManager Device updates the specified Vne Tunnel.
// Returns the index value of the Vne Tunnel and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vne-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemVneTunnel(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vne-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemVneTunnel API operation for FortiManager Device deletes the specified Vne Tunnel.
// Returns error for service API and SDK errors.
// See the device - system vne-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemVneTunnel(mkey string, paradict map[string]string) (err error) {

	//No unset API for system - vne-tunnel
	return
}

// ReadSystemVneTunnel API operation for FortiManager Device gets the Vne Tunnel
// with the specified index value.
// Returns the requested Vne Tunnel value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vne-tunnel chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemVneTunnel(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vne-tunnel"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemVxlan API operation for FortiManager Device creates a new Vxlan.
// Returns the index value of the Vxlan and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vxlan chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemVxlan(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vxlan"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemVxlan API operation for FortiManager Device updates the specified Vxlan.
// Returns the index value of the Vxlan and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vxlan chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemVxlan(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vxlan"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemVxlan API operation for FortiManager Device deletes the specified Vxlan.
// Returns error for service API and SDK errors.
// See the device - system vxlan chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemVxlan(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vxlan"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemVxlan API operation for FortiManager Device gets the Vxlan
// with the specified index value.
// Returns the requested Vxlan value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system vxlan chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemVxlan(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/vxlan"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemWccp API operation for FortiManager Device creates a new Wccp.
// Returns the index value of the Wccp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system wccp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemWccp(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/wccp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemWccp API operation for FortiManager Device updates the specified Wccp.
// Returns the index value of the Wccp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system wccp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemWccp(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/wccp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemWccp API operation for FortiManager Device deletes the specified Wccp.
// Returns error for service API and SDK errors.
// See the device - system wccp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemWccp(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/wccp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemWccp API operation for FortiManager Device gets the Wccp
// with the specified index value.
// Returns the requested Wccp value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system wccp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemWccp(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/wccp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemZone API operation for FortiManager Device creates a new Zone.
// Returns the index value of the Zone and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system zone chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemZone(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/zone"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemZone API operation for FortiManager Device updates the specified Zone.
// Returns the index value of the Zone and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system zone chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemZone(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/zone"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemZone API operation for FortiManager Device deletes the specified Zone.
// Returns error for service API and SDK errors.
// See the device - system zone chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemZone(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/zone"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemZone API operation for FortiManager Device gets the Zone
// with the specified index value.
// Returns the requested Zone value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system zone chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemZone(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/zone"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateSystemZoneTagging API operation for FortiManager Device creates a new ZoneTagging.
// Returns the index value of the ZoneTagging and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system zone tagging chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateSystemZoneTagging(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/zone/{zone}/tagging"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateSystemZoneTagging API operation for FortiManager Device updates the specified ZoneTagging.
// Returns the index value of the ZoneTagging and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system zone tagging chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateSystemZoneTagging(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/zone/{zone}/tagging"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteSystemZoneTagging API operation for FortiManager Device deletes the specified ZoneTagging.
// Returns error for service API and SDK errors.
// See the device - system zone tagging chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteSystemZoneTagging(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/zone/{zone}/tagging"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadSystemZoneTagging API operation for FortiManager Device gets the ZoneTagging
// with the specified index value.
// Returns the requested ZoneTagging value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - system zone tagging chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadSystemZoneTagging(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/system/zone/{zone}/tagging"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateUserNacPolicy API operation for FortiManager Device creates a new Nac Policy.
// Returns the index value of the Nac Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - user nac-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateUserNacPolicy(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/nac-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateUserNacPolicy API operation for FortiManager Device updates the specified Nac Policy.
// Returns the index value of the Nac Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - user nac-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateUserNacPolicy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/nac-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteUserNacPolicy API operation for FortiManager Device deletes the specified Nac Policy.
// Returns error for service API and SDK errors.
// See the device - user nac-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteUserNacPolicy(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/nac-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadUserNacPolicy API operation for FortiManager Device gets the Nac Policy
// with the specified index value.
// Returns the requested Nac Policy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - user nac-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadUserNacPolicy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/nac-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateUserNacPolicyMove API operation for FortiManager Device updates the specified Nac PolicyMove.
// Returns the index value of the Nac PolicyMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - user nac-policy move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateUserNacPolicyMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/nac-policy/{nac-policy}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadUserNacPolicyMove API operation for FortiManager Device gets the Nac PolicyMove
// with the specified index value.
// Returns the requested Nac PolicyMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - user nac-policy move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadUserNacPolicyMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/nac-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"name"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// UpdateUserQuarantine API operation for FortiManager Device updates the specified Quarantine.
// Returns the index value of the Quarantine and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - user quarantine chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateUserQuarantine(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/quarantine"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteUserQuarantine API operation for FortiManager Device deletes the specified Quarantine.
// Returns error for service API and SDK errors.
// See the device - user quarantine chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteUserQuarantine(mkey string, paradict map[string]string) (err error) {

	//No unset API for user - quarantine
	return
}

// ReadUserQuarantine API operation for FortiManager Device gets the Quarantine
// with the specified index value.
// Returns the requested Quarantine value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - user quarantine chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadUserQuarantine(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/quarantine"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateUserQuarantineTargets API operation for FortiManager Device creates a new QuarantineTargets.
// Returns the index value of the QuarantineTargets and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - user quarantine targets chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateUserQuarantineTargets(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/quarantine/targets"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateUserQuarantineTargets API operation for FortiManager Device updates the specified QuarantineTargets.
// Returns the index value of the QuarantineTargets and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - user quarantine targets chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateUserQuarantineTargets(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/quarantine/targets"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteUserQuarantineTargets API operation for FortiManager Device deletes the specified QuarantineTargets.
// Returns error for service API and SDK errors.
// See the device - user quarantine targets chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteUserQuarantineTargets(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/quarantine/targets"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadUserQuarantineTargets API operation for FortiManager Device gets the QuarantineTargets
// with the specified index value.
// Returns the requested QuarantineTargets value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - user quarantine targets chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadUserQuarantineTargets(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/quarantine/targets"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateUserQuarantineTargetsMacs API operation for FortiManager Device creates a new QuarantineTargetsMacs.
// Returns the index value of the QuarantineTargetsMacs and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - user quarantine targets macs chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateUserQuarantineTargetsMacs(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/quarantine/targets/{targets}/macs"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateUserQuarantineTargetsMacs API operation for FortiManager Device updates the specified QuarantineTargetsMacs.
// Returns the index value of the QuarantineTargetsMacs and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - user quarantine targets macs chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateUserQuarantineTargetsMacs(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/quarantine/targets/{targets}/macs"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteUserQuarantineTargetsMacs API operation for FortiManager Device deletes the specified QuarantineTargetsMacs.
// Returns error for service API and SDK errors.
// See the device - user quarantine targets macs chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteUserQuarantineTargetsMacs(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/quarantine/targets/{targets}/macs"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadUserQuarantineTargetsMacs API operation for FortiManager Device gets the QuarantineTargetsMacs
// with the specified index value.
// Returns the requested QuarantineTargetsMacs value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - user quarantine targets macs chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadUserQuarantineTargetsMacs(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/quarantine/targets/{targets}/macs"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateUserSetting API operation for FortiManager Device updates the specified Setting.
// Returns the index value of the Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - user setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateUserSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteUserSetting API operation for FortiManager Device deletes the specified Setting.
// Returns error for service API and SDK errors.
// See the device - user setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteUserSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for user - setting
	return
}

// ReadUserSetting API operation for FortiManager Device gets the Setting
// with the specified index value.
// Returns the requested Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - user setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadUserSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateUserSettingAuthPorts API operation for FortiManager Device creates a new SettingAuth Ports.
// Returns the index value of the SettingAuth Ports and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - user setting auth-ports chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateUserSettingAuthPorts(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/setting/auth-ports"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateUserSettingAuthPorts API operation for FortiManager Device updates the specified SettingAuth Ports.
// Returns the index value of the SettingAuth Ports and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - user setting auth-ports chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateUserSettingAuthPorts(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/setting/auth-ports"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteUserSettingAuthPorts API operation for FortiManager Device deletes the specified SettingAuth Ports.
// Returns error for service API and SDK errors.
// See the device - user setting auth-ports chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteUserSettingAuthPorts(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/setting/auth-ports"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadUserSettingAuthPorts API operation for FortiManager Device gets the SettingAuth Ports
// with the specified index value.
// Returns the requested SettingAuth Ports value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - user setting auth-ports chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadUserSettingAuthPorts(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/user/setting/auth-ports"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnCertificateCrl API operation for FortiManager Device creates a new CertificateCrl.
// Returns the index value of the CertificateCrl and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn certificate crl chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnCertificateCrl(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/certificate/crl"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnCertificateCrl API operation for FortiManager Device updates the specified CertificateCrl.
// Returns the index value of the CertificateCrl and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn certificate crl chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnCertificateCrl(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/certificate/crl"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnCertificateCrl API operation for FortiManager Device deletes the specified CertificateCrl.
// Returns error for service API and SDK errors.
// See the device - vpn certificate crl chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnCertificateCrl(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/certificate/crl"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnCertificateCrl API operation for FortiManager Device gets the CertificateCrl
// with the specified index value.
// Returns the requested CertificateCrl value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn certificate crl chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnCertificateCrl(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/certificate/crl"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnCertificateLocal API operation for FortiManager Device creates a new CertificateLocal.
// Returns the index value of the CertificateLocal and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn certificate local chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnCertificateLocal(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/certificate/local"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnCertificateLocal API operation for FortiManager Device updates the specified CertificateLocal.
// Returns the index value of the CertificateLocal and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn certificate local chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnCertificateLocal(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/certificate/local"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnCertificateLocal API operation for FortiManager Device deletes the specified CertificateLocal.
// Returns error for service API and SDK errors.
// See the device - vpn certificate local chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnCertificateLocal(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/certificate/local"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnCertificateLocal API operation for FortiManager Device gets the CertificateLocal
// with the specified index value.
// Returns the requested CertificateLocal value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn certificate local chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnCertificateLocal(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/certificate/local"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateVpnCertificateSetting API operation for FortiManager Device updates the specified CertificateSetting.
// Returns the index value of the CertificateSetting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn certificate setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnCertificateSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/certificate/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnCertificateSetting API operation for FortiManager Device deletes the specified CertificateSetting.
// Returns error for service API and SDK errors.
// See the device - vpn certificate setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnCertificateSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for vpn - certificate setting
	return
}

// ReadVpnCertificateSetting API operation for FortiManager Device gets the CertificateSetting
// with the specified index value.
// Returns the requested CertificateSetting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn certificate setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnCertificateSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/certificate/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateVpnCertificateSettingCrlVerification API operation for FortiManager Device updates the specified CertificateSettingCrl Verification.
// Returns the index value of the CertificateSettingCrl Verification and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn certificate setting crl-verification chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnCertificateSettingCrlVerification(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/certificate/setting/crl-verification"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnCertificateSettingCrlVerification API operation for FortiManager Device deletes the specified CertificateSettingCrl Verification.
// Returns error for service API and SDK errors.
// See the device - vpn certificate setting crl-verification chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnCertificateSettingCrlVerification(mkey string, paradict map[string]string) (err error) {

	//No unset API for vpn - certificate setting crl-verification
	return
}

// ReadVpnCertificateSettingCrlVerification API operation for FortiManager Device gets the CertificateSettingCrl Verification
// with the specified index value.
// Returns the requested CertificateSettingCrl Verification value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn certificate setting crl-verification chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnCertificateSettingCrlVerification(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/certificate/setting/crl-verification"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnIpsecConcentrator API operation for FortiManager Device creates a new IpsecConcentrator.
// Returns the index value of the IpsecConcentrator and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec concentrator chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnIpsecConcentrator(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/concentrator"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnIpsecConcentrator API operation for FortiManager Device updates the specified IpsecConcentrator.
// Returns the index value of the IpsecConcentrator and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec concentrator chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnIpsecConcentrator(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/concentrator"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnIpsecConcentrator API operation for FortiManager Device deletes the specified IpsecConcentrator.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec concentrator chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnIpsecConcentrator(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/concentrator"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnIpsecConcentrator API operation for FortiManager Device gets the IpsecConcentrator
// with the specified index value.
// Returns the requested IpsecConcentrator value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec concentrator chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnIpsecConcentrator(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/concentrator"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnIpsecForticlient API operation for FortiManager Device creates a new IpsecForticlient.
// Returns the index value of the IpsecForticlient and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec forticlient chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnIpsecForticlient(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/forticlient"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnIpsecForticlient API operation for FortiManager Device updates the specified IpsecForticlient.
// Returns the index value of the IpsecForticlient and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec forticlient chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnIpsecForticlient(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/forticlient"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnIpsecForticlient API operation for FortiManager Device deletes the specified IpsecForticlient.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec forticlient chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnIpsecForticlient(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/forticlient"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnIpsecForticlient API operation for FortiManager Device gets the IpsecForticlient
// with the specified index value.
// Returns the requested IpsecForticlient value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec forticlient chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnIpsecForticlient(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/forticlient"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnIpsecPhase1 API operation for FortiManager Device creates a new IpsecPhase1.
// Returns the index value of the IpsecPhase1 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec phase1 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnIpsecPhase1(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/phase1"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnIpsecPhase1 API operation for FortiManager Device updates the specified IpsecPhase1.
// Returns the index value of the IpsecPhase1 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec phase1 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnIpsecPhase1(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/phase1"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnIpsecPhase1 API operation for FortiManager Device deletes the specified IpsecPhase1.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec phase1 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnIpsecPhase1(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/phase1"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnIpsecPhase1 API operation for FortiManager Device gets the IpsecPhase1
// with the specified index value.
// Returns the requested IpsecPhase1 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec phase1 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnIpsecPhase1(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/phase1"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnIpsecPhase1Interface API operation for FortiManager Device creates a new IpsecPhase1 Interface.
// Returns the index value of the IpsecPhase1 Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec phase1-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnIpsecPhase1Interface(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/phase1-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnIpsecPhase1Interface API operation for FortiManager Device updates the specified IpsecPhase1 Interface.
// Returns the index value of the IpsecPhase1 Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec phase1-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnIpsecPhase1Interface(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/phase1-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnIpsecPhase1Interface API operation for FortiManager Device deletes the specified IpsecPhase1 Interface.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec phase1-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnIpsecPhase1Interface(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/phase1-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnIpsecPhase1Interface API operation for FortiManager Device gets the IpsecPhase1 Interface
// with the specified index value.
// Returns the requested IpsecPhase1 Interface value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec phase1-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnIpsecPhase1Interface(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/phase1-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnIpsecPhase2 API operation for FortiManager Device creates a new IpsecPhase2.
// Returns the index value of the IpsecPhase2 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec phase2 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnIpsecPhase2(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/phase2"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnIpsecPhase2 API operation for FortiManager Device updates the specified IpsecPhase2.
// Returns the index value of the IpsecPhase2 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec phase2 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnIpsecPhase2(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/phase2"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnIpsecPhase2 API operation for FortiManager Device deletes the specified IpsecPhase2.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec phase2 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnIpsecPhase2(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/phase2"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnIpsecPhase2 API operation for FortiManager Device gets the IpsecPhase2
// with the specified index value.
// Returns the requested IpsecPhase2 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec phase2 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnIpsecPhase2(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/phase2"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnIpsecPhase2Interface API operation for FortiManager Device creates a new IpsecPhase2 Interface.
// Returns the index value of the IpsecPhase2 Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec phase2-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnIpsecPhase2Interface(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/phase2-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnIpsecPhase2Interface API operation for FortiManager Device updates the specified IpsecPhase2 Interface.
// Returns the index value of the IpsecPhase2 Interface and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec phase2-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnIpsecPhase2Interface(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/phase2-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnIpsecPhase2Interface API operation for FortiManager Device deletes the specified IpsecPhase2 Interface.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec phase2-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnIpsecPhase2Interface(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/phase2-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnIpsecPhase2Interface API operation for FortiManager Device gets the IpsecPhase2 Interface
// with the specified index value.
// Returns the requested IpsecPhase2 Interface value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ipsec phase2-interface chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnIpsecPhase2Interface(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ipsec/phase2-interface"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnKmipServer API operation for FortiManager Device creates a new Kmip Server.
// Returns the index value of the Kmip Server and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn kmip-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnKmipServer(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/kmip-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnKmipServer API operation for FortiManager Device updates the specified Kmip Server.
// Returns the index value of the Kmip Server and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn kmip-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnKmipServer(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/kmip-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnKmipServer API operation for FortiManager Device deletes the specified Kmip Server.
// Returns error for service API and SDK errors.
// See the device - vpn kmip-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnKmipServer(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/kmip-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnKmipServer API operation for FortiManager Device gets the Kmip Server
// with the specified index value.
// Returns the requested Kmip Server value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn kmip-server chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnKmipServer(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/kmip-server"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnKmipServerServerList API operation for FortiManager Device creates a new Kmip ServerServer List.
// Returns the index value of the Kmip ServerServer List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn kmip-server server-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnKmipServerServerList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/kmip-server/{kmip-server}/server-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnKmipServerServerList API operation for FortiManager Device updates the specified Kmip ServerServer List.
// Returns the index value of the Kmip ServerServer List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn kmip-server server-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnKmipServerServerList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/kmip-server/{kmip-server}/server-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnKmipServerServerList API operation for FortiManager Device deletes the specified Kmip ServerServer List.
// Returns error for service API and SDK errors.
// See the device - vpn kmip-server server-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnKmipServerServerList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/kmip-server/{kmip-server}/server-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnKmipServerServerList API operation for FortiManager Device gets the Kmip ServerServer List
// with the specified index value.
// Returns the requested Kmip ServerServer List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn kmip-server server-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnKmipServerServerList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/kmip-server/{kmip-server}/server-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateVpnKmipServerServerListMove API operation for FortiManager Device updates the specified Kmip ServerServer ListMove.
// Returns the index value of the Kmip ServerServer ListMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn kmip-server server-list move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnKmipServerServerListMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/kmip-server/{kmip-server}/server-list/{server-list}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadVpnKmipServerServerListMove API operation for FortiManager Device gets the Kmip ServerServer ListMove
// with the specified index value.
// Returns the requested Kmip ServerServer ListMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn kmip-server server-list move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnKmipServerServerListMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/kmip-server/{kmip-server}/server-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"id"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// UpdateVpnL2Tp API operation for FortiManager Device updates the specified L2Tp.
// Returns the index value of the L2Tp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn l2tp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnL2Tp(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/l2tp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnL2Tp API operation for FortiManager Device deletes the specified L2Tp.
// Returns error for service API and SDK errors.
// See the device - vpn l2tp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnL2Tp(mkey string, paradict map[string]string) (err error) {

	//No unset API for vpn - l2tp
	return
}

// ReadVpnL2Tp API operation for FortiManager Device gets the L2Tp
// with the specified index value.
// Returns the requested L2Tp value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn l2tp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnL2Tp(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/l2tp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateVpnOcvpn API operation for FortiManager Device updates the specified Ocvpn.
// Returns the index value of the Ocvpn and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ocvpn chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnOcvpn(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ocvpn"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnOcvpn API operation for FortiManager Device deletes the specified Ocvpn.
// Returns error for service API and SDK errors.
// See the device - vpn ocvpn chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnOcvpn(mkey string, paradict map[string]string) (err error) {

	//No unset API for vpn - ocvpn
	return
}

// ReadVpnOcvpn API operation for FortiManager Device gets the Ocvpn
// with the specified index value.
// Returns the requested Ocvpn value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ocvpn chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnOcvpn(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ocvpn"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnOcvpnForticlientAccessAuthGroups API operation for FortiManager Device creates a new OcvpnForticlient AccessAuth Groups.
// Returns the index value of the OcvpnForticlient AccessAuth Groups and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ocvpn forticlient-access auth-groups chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnOcvpnForticlientAccessAuthGroups(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ocvpn/forticlient-access/auth-groups"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnOcvpnForticlientAccessAuthGroups API operation for FortiManager Device updates the specified OcvpnForticlient AccessAuth Groups.
// Returns the index value of the OcvpnForticlient AccessAuth Groups and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ocvpn forticlient-access auth-groups chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnOcvpnForticlientAccessAuthGroups(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ocvpn/forticlient-access/auth-groups"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnOcvpnForticlientAccessAuthGroups API operation for FortiManager Device deletes the specified OcvpnForticlient AccessAuth Groups.
// Returns error for service API and SDK errors.
// See the device - vpn ocvpn forticlient-access auth-groups chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnOcvpnForticlientAccessAuthGroups(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ocvpn/forticlient-access/auth-groups"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnOcvpnForticlientAccessAuthGroups API operation for FortiManager Device gets the OcvpnForticlient AccessAuth Groups
// with the specified index value.
// Returns the requested OcvpnForticlient AccessAuth Groups value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ocvpn forticlient-access auth-groups chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnOcvpnForticlientAccessAuthGroups(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ocvpn/forticlient-access/auth-groups"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnOcvpnOverlays API operation for FortiManager Device creates a new OcvpnOverlays.
// Returns the index value of the OcvpnOverlays and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ocvpn overlays chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnOcvpnOverlays(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ocvpn/overlays"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnOcvpnOverlays API operation for FortiManager Device updates the specified OcvpnOverlays.
// Returns the index value of the OcvpnOverlays and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ocvpn overlays chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnOcvpnOverlays(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ocvpn/overlays"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnOcvpnOverlays API operation for FortiManager Device deletes the specified OcvpnOverlays.
// Returns error for service API and SDK errors.
// See the device - vpn ocvpn overlays chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnOcvpnOverlays(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ocvpn/overlays"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnOcvpnOverlays API operation for FortiManager Device gets the OcvpnOverlays
// with the specified index value.
// Returns the requested OcvpnOverlays value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ocvpn overlays chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnOcvpnOverlays(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ocvpn/overlays"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnOcvpnOverlaysSubnets API operation for FortiManager Device creates a new OcvpnOverlaysSubnets.
// Returns the index value of the OcvpnOverlaysSubnets and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ocvpn overlays subnets chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnOcvpnOverlaysSubnets(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ocvpn/overlays/{overlays}/subnets"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnOcvpnOverlaysSubnets API operation for FortiManager Device updates the specified OcvpnOverlaysSubnets.
// Returns the index value of the OcvpnOverlaysSubnets and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ocvpn overlays subnets chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnOcvpnOverlaysSubnets(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ocvpn/overlays/{overlays}/subnets"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnOcvpnOverlaysSubnets API operation for FortiManager Device deletes the specified OcvpnOverlaysSubnets.
// Returns error for service API and SDK errors.
// See the device - vpn ocvpn overlays subnets chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnOcvpnOverlaysSubnets(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ocvpn/overlays/{overlays}/subnets"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnOcvpnOverlaysSubnets API operation for FortiManager Device gets the OcvpnOverlaysSubnets
// with the specified index value.
// Returns the requested OcvpnOverlaysSubnets value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ocvpn overlays subnets chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnOcvpnOverlaysSubnets(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ocvpn/overlays/{overlays}/subnets"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateVpnPptp API operation for FortiManager Device updates the specified Pptp.
// Returns the index value of the Pptp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn pptp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnPptp(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/pptp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnPptp API operation for FortiManager Device deletes the specified Pptp.
// Returns error for service API and SDK errors.
// See the device - vpn pptp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnPptp(mkey string, paradict map[string]string) (err error) {

	//No unset API for vpn - pptp
	return
}

// ReadVpnPptp API operation for FortiManager Device gets the Pptp
// with the specified index value.
// Returns the requested Pptp value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn pptp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnPptp(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/pptp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnQkd API operation for FortiManager Device creates a new Qkd.
// Returns the index value of the Qkd and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn qkd chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnQkd(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/qkd"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnQkd API operation for FortiManager Device updates the specified Qkd.
// Returns the index value of the Qkd and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn qkd chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnQkd(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/qkd"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnQkd API operation for FortiManager Device deletes the specified Qkd.
// Returns error for service API and SDK errors.
// See the device - vpn qkd chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnQkd(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/qkd"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnQkd API operation for FortiManager Device gets the Qkd
// with the specified index value.
// Returns the requested Qkd value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn qkd chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnQkd(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/qkd"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnSslClient API operation for FortiManager Device creates a new SslClient.
// Returns the index value of the SslClient and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl client chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnSslClient(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/client"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnSslClient API operation for FortiManager Device updates the specified SslClient.
// Returns the index value of the SslClient and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl client chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnSslClient(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/client"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnSslClient API operation for FortiManager Device deletes the specified SslClient.
// Returns error for service API and SDK errors.
// See the device - vpn ssl client chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnSslClient(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/client"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnSslClient API operation for FortiManager Device gets the SslClient
// with the specified index value.
// Returns the requested SslClient value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl client chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnSslClient(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/client"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateVpnSslSettings API operation for FortiManager Device updates the specified SslSettings.
// Returns the index value of the SslSettings and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnSslSettings(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnSslSettings API operation for FortiManager Device deletes the specified SslSettings.
// Returns error for service API and SDK errors.
// See the device - vpn ssl settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnSslSettings(mkey string, paradict map[string]string) (err error) {

	//No unset API for vpn - ssl settings
	return
}

// ReadVpnSslSettings API operation for FortiManager Device gets the SslSettings
// with the specified index value.
// Returns the requested SslSettings value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnSslSettings(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnSslSettingsAuthenticationRule API operation for FortiManager Device creates a new SslSettingsAuthentication Rule.
// Returns the index value of the SslSettingsAuthentication Rule and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl settings authentication-rule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnSslSettingsAuthenticationRule(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/settings/authentication-rule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnSslSettingsAuthenticationRule API operation for FortiManager Device updates the specified SslSettingsAuthentication Rule.
// Returns the index value of the SslSettingsAuthentication Rule and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl settings authentication-rule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnSslSettingsAuthenticationRule(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/settings/authentication-rule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnSslSettingsAuthenticationRule API operation for FortiManager Device deletes the specified SslSettingsAuthentication Rule.
// Returns error for service API and SDK errors.
// See the device - vpn ssl settings authentication-rule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnSslSettingsAuthenticationRule(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/settings/authentication-rule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnSslSettingsAuthenticationRule API operation for FortiManager Device gets the SslSettingsAuthentication Rule
// with the specified index value.
// Returns the requested SslSettingsAuthentication Rule value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl settings authentication-rule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnSslSettingsAuthenticationRule(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/settings/authentication-rule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateVpnSslSettingsAuthenticationRuleMove API operation for FortiManager Device updates the specified SslSettingsAuthentication RuleMove.
// Returns the index value of the SslSettingsAuthentication RuleMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl settings authentication-rule move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnSslSettingsAuthenticationRuleMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/settings/authentication-rule/{authentication-rule}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadVpnSslSettingsAuthenticationRuleMove API operation for FortiManager Device gets the SslSettingsAuthentication RuleMove
// with the specified index value.
// Returns the requested SslSettingsAuthentication RuleMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl settings authentication-rule move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnSslSettingsAuthenticationRuleMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/settings/authentication-rule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"id"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// CreateVpnSslWebUserBookmark API operation for FortiManager Device creates a new SslWebUser Bookmark.
// Returns the index value of the SslWebUser Bookmark and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-bookmark chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnSslWebUserBookmark(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-bookmark"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnSslWebUserBookmark API operation for FortiManager Device updates the specified SslWebUser Bookmark.
// Returns the index value of the SslWebUser Bookmark and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-bookmark chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnSslWebUserBookmark(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-bookmark"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnSslWebUserBookmark API operation for FortiManager Device deletes the specified SslWebUser Bookmark.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-bookmark chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnSslWebUserBookmark(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-bookmark"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnSslWebUserBookmark API operation for FortiManager Device gets the SslWebUser Bookmark
// with the specified index value.
// Returns the requested SslWebUser Bookmark value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-bookmark chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnSslWebUserBookmark(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-bookmark"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnSslWebUserBookmarkBookmarks API operation for FortiManager Device creates a new SslWebUser BookmarkBookmarks.
// Returns the index value of the SslWebUser BookmarkBookmarks and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-bookmark bookmarks chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnSslWebUserBookmarkBookmarks(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-bookmark/{user-bookmark}/bookmarks"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnSslWebUserBookmarkBookmarks API operation for FortiManager Device updates the specified SslWebUser BookmarkBookmarks.
// Returns the index value of the SslWebUser BookmarkBookmarks and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-bookmark bookmarks chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnSslWebUserBookmarkBookmarks(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-bookmark/{user-bookmark}/bookmarks"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnSslWebUserBookmarkBookmarks API operation for FortiManager Device deletes the specified SslWebUser BookmarkBookmarks.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-bookmark bookmarks chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnSslWebUserBookmarkBookmarks(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-bookmark/{user-bookmark}/bookmarks"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnSslWebUserBookmarkBookmarks API operation for FortiManager Device gets the SslWebUser BookmarkBookmarks
// with the specified index value.
// Returns the requested SslWebUser BookmarkBookmarks value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-bookmark bookmarks chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnSslWebUserBookmarkBookmarks(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-bookmark/{user-bookmark}/bookmarks"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnSslWebUserBookmarkBookmarksFormData API operation for FortiManager Device creates a new SslWebUser BookmarkBookmarksForm Data.
// Returns the index value of the SslWebUser BookmarkBookmarksForm Data and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-bookmark bookmarks form-data chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnSslWebUserBookmarkBookmarksFormData(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-bookmark/{user-bookmark}/bookmarks/{bookmarks}/form-data"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnSslWebUserBookmarkBookmarksFormData API operation for FortiManager Device updates the specified SslWebUser BookmarkBookmarksForm Data.
// Returns the index value of the SslWebUser BookmarkBookmarksForm Data and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-bookmark bookmarks form-data chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnSslWebUserBookmarkBookmarksFormData(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-bookmark/{user-bookmark}/bookmarks/{bookmarks}/form-data"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnSslWebUserBookmarkBookmarksFormData API operation for FortiManager Device deletes the specified SslWebUser BookmarkBookmarksForm Data.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-bookmark bookmarks form-data chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnSslWebUserBookmarkBookmarksFormData(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-bookmark/{user-bookmark}/bookmarks/{bookmarks}/form-data"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnSslWebUserBookmarkBookmarksFormData API operation for FortiManager Device gets the SslWebUser BookmarkBookmarksForm Data
// with the specified index value.
// Returns the requested SslWebUser BookmarkBookmarksForm Data value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-bookmark bookmarks form-data chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnSslWebUserBookmarkBookmarksFormData(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-bookmark/{user-bookmark}/bookmarks/{bookmarks}/form-data"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateVpnSslWebUserBookmarkBookmarksMove API operation for FortiManager Device updates the specified SslWebUser BookmarkBookmarksMove.
// Returns the index value of the SslWebUser BookmarkBookmarksMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-bookmark bookmarks move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnSslWebUserBookmarkBookmarksMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-bookmark/{user-bookmark}/bookmarks/{bookmarks}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadVpnSslWebUserBookmarkBookmarksMove API operation for FortiManager Device gets the SslWebUser BookmarkBookmarksMove
// with the specified index value.
// Returns the requested SslWebUser BookmarkBookmarksMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-bookmark bookmarks move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnSslWebUserBookmarkBookmarksMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-bookmark/{user-bookmark}/bookmarks"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"name"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// CreateVpnSslWebUserGroupBookmark API operation for FortiManager Device creates a new SslWebUser Group Bookmark.
// Returns the index value of the SslWebUser Group Bookmark and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-group-bookmark chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnSslWebUserGroupBookmark(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-group-bookmark"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnSslWebUserGroupBookmark API operation for FortiManager Device updates the specified SslWebUser Group Bookmark.
// Returns the index value of the SslWebUser Group Bookmark and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-group-bookmark chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnSslWebUserGroupBookmark(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-group-bookmark"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnSslWebUserGroupBookmark API operation for FortiManager Device deletes the specified SslWebUser Group Bookmark.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-group-bookmark chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnSslWebUserGroupBookmark(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-group-bookmark"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnSslWebUserGroupBookmark API operation for FortiManager Device gets the SslWebUser Group Bookmark
// with the specified index value.
// Returns the requested SslWebUser Group Bookmark value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-group-bookmark chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnSslWebUserGroupBookmark(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-group-bookmark"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnSslWebUserGroupBookmarkBookmarks API operation for FortiManager Device creates a new SslWebUser Group BookmarkBookmarks.
// Returns the index value of the SslWebUser Group BookmarkBookmarks and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-group-bookmark bookmarks chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnSslWebUserGroupBookmarkBookmarks(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-group-bookmark/{user-group-bookmark}/bookmarks"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnSslWebUserGroupBookmarkBookmarks API operation for FortiManager Device updates the specified SslWebUser Group BookmarkBookmarks.
// Returns the index value of the SslWebUser Group BookmarkBookmarks and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-group-bookmark bookmarks chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnSslWebUserGroupBookmarkBookmarks(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-group-bookmark/{user-group-bookmark}/bookmarks"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnSslWebUserGroupBookmarkBookmarks API operation for FortiManager Device deletes the specified SslWebUser Group BookmarkBookmarks.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-group-bookmark bookmarks chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnSslWebUserGroupBookmarkBookmarks(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-group-bookmark/{user-group-bookmark}/bookmarks"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnSslWebUserGroupBookmarkBookmarks API operation for FortiManager Device gets the SslWebUser Group BookmarkBookmarks
// with the specified index value.
// Returns the requested SslWebUser Group BookmarkBookmarks value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-group-bookmark bookmarks chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnSslWebUserGroupBookmarkBookmarks(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-group-bookmark/{user-group-bookmark}/bookmarks"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateVpnSslWebUserGroupBookmarkBookmarksFormData API operation for FortiManager Device creates a new SslWebUser Group BookmarkBookmarksForm Data.
// Returns the index value of the SslWebUser Group BookmarkBookmarksForm Data and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-group-bookmark bookmarks form-data chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateVpnSslWebUserGroupBookmarkBookmarksFormData(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-group-bookmark/{user-group-bookmark}/bookmarks/{bookmarks}/form-data"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateVpnSslWebUserGroupBookmarkBookmarksFormData API operation for FortiManager Device updates the specified SslWebUser Group BookmarkBookmarksForm Data.
// Returns the index value of the SslWebUser Group BookmarkBookmarksForm Data and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-group-bookmark bookmarks form-data chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnSslWebUserGroupBookmarkBookmarksFormData(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-group-bookmark/{user-group-bookmark}/bookmarks/{bookmarks}/form-data"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteVpnSslWebUserGroupBookmarkBookmarksFormData API operation for FortiManager Device deletes the specified SslWebUser Group BookmarkBookmarksForm Data.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-group-bookmark bookmarks form-data chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteVpnSslWebUserGroupBookmarkBookmarksFormData(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-group-bookmark/{user-group-bookmark}/bookmarks/{bookmarks}/form-data"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadVpnSslWebUserGroupBookmarkBookmarksFormData API operation for FortiManager Device gets the SslWebUser Group BookmarkBookmarksForm Data
// with the specified index value.
// Returns the requested SslWebUser Group BookmarkBookmarksForm Data value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-group-bookmark bookmarks form-data chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnSslWebUserGroupBookmarkBookmarksFormData(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-group-bookmark/{user-group-bookmark}/bookmarks/{bookmarks}/form-data"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateVpnSslWebUserGroupBookmarkBookmarksMove API operation for FortiManager Device updates the specified SslWebUser Group BookmarkBookmarksMove.
// Returns the index value of the SslWebUser Group BookmarkBookmarksMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-group-bookmark bookmarks move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateVpnSslWebUserGroupBookmarkBookmarksMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-group-bookmark/{user-group-bookmark}/bookmarks/{bookmarks}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadVpnSslWebUserGroupBookmarkBookmarksMove API operation for FortiManager Device gets the SslWebUser Group BookmarkBookmarksMove
// with the specified index value.
// Returns the requested SslWebUser Group BookmarkBookmarksMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - vpn ssl web user-group-bookmark bookmarks move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadVpnSslWebUserGroupBookmarkBookmarksMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/vpn/ssl/web/user-group-bookmark/{user-group-bookmark}/bookmarks"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"name"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// UpdateWanoptCacheService API operation for FortiManager Device updates the specified Cache Service.
// Returns the index value of the Cache Service and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt cache-service chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWanoptCacheService(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/cache-service"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWanoptCacheService API operation for FortiManager Device deletes the specified Cache Service.
// Returns error for service API and SDK errors.
// See the device - wanopt cache-service chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWanoptCacheService(mkey string, paradict map[string]string) (err error) {

	//No unset API for wanopt - cache-service
	return
}

// ReadWanoptCacheService API operation for FortiManager Device gets the Cache Service
// with the specified index value.
// Returns the requested Cache Service value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt cache-service chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWanoptCacheService(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/cache-service"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWanoptCacheServiceDstPeer API operation for FortiManager Device creates a new Cache ServiceDst Peer.
// Returns the index value of the Cache ServiceDst Peer and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt cache-service dst-peer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWanoptCacheServiceDstPeer(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/cache-service/dst-peer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWanoptCacheServiceDstPeer API operation for FortiManager Device updates the specified Cache ServiceDst Peer.
// Returns the index value of the Cache ServiceDst Peer and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt cache-service dst-peer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWanoptCacheServiceDstPeer(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/cache-service/dst-peer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWanoptCacheServiceDstPeer API operation for FortiManager Device deletes the specified Cache ServiceDst Peer.
// Returns error for service API and SDK errors.
// See the device - wanopt cache-service dst-peer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWanoptCacheServiceDstPeer(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/wanopt/cache-service/dst-peer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWanoptCacheServiceDstPeer API operation for FortiManager Device gets the Cache ServiceDst Peer
// with the specified index value.
// Returns the requested Cache ServiceDst Peer value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt cache-service dst-peer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWanoptCacheServiceDstPeer(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/cache-service/dst-peer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWanoptCacheServiceSrcPeer API operation for FortiManager Device creates a new Cache ServiceSrc Peer.
// Returns the index value of the Cache ServiceSrc Peer and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt cache-service src-peer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWanoptCacheServiceSrcPeer(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/cache-service/src-peer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWanoptCacheServiceSrcPeer API operation for FortiManager Device updates the specified Cache ServiceSrc Peer.
// Returns the index value of the Cache ServiceSrc Peer and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt cache-service src-peer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWanoptCacheServiceSrcPeer(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/cache-service/src-peer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWanoptCacheServiceSrcPeer API operation for FortiManager Device deletes the specified Cache ServiceSrc Peer.
// Returns error for service API and SDK errors.
// See the device - wanopt cache-service src-peer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWanoptCacheServiceSrcPeer(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/wanopt/cache-service/src-peer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWanoptCacheServiceSrcPeer API operation for FortiManager Device gets the Cache ServiceSrc Peer
// with the specified index value.
// Returns the requested Cache ServiceSrc Peer value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt cache-service src-peer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWanoptCacheServiceSrcPeer(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/cache-service/src-peer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWanoptContentDeliveryNetworkRule API operation for FortiManager Device creates a new Content Delivery Network Rule.
// Returns the index value of the Content Delivery Network Rule and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWanoptContentDeliveryNetworkRule(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/content-delivery-network-rule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWanoptContentDeliveryNetworkRule API operation for FortiManager Device updates the specified Content Delivery Network Rule.
// Returns the index value of the Content Delivery Network Rule and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWanoptContentDeliveryNetworkRule(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/content-delivery-network-rule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWanoptContentDeliveryNetworkRule API operation for FortiManager Device deletes the specified Content Delivery Network Rule.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWanoptContentDeliveryNetworkRule(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/wanopt/content-delivery-network-rule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWanoptContentDeliveryNetworkRule API operation for FortiManager Device gets the Content Delivery Network Rule
// with the specified index value.
// Returns the requested Content Delivery Network Rule value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWanoptContentDeliveryNetworkRule(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/content-delivery-network-rule"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWanoptContentDeliveryNetworkRuleRules API operation for FortiManager Device creates a new Content Delivery Network RuleRules.
// Returns the index value of the Content Delivery Network RuleRules and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule rules chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWanoptContentDeliveryNetworkRuleRules(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/content-delivery-network-rule/{content-delivery-network-rule}/rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWanoptContentDeliveryNetworkRuleRules API operation for FortiManager Device updates the specified Content Delivery Network RuleRules.
// Returns the index value of the Content Delivery Network RuleRules and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule rules chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWanoptContentDeliveryNetworkRuleRules(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/content-delivery-network-rule/{content-delivery-network-rule}/rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWanoptContentDeliveryNetworkRuleRules API operation for FortiManager Device deletes the specified Content Delivery Network RuleRules.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule rules chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWanoptContentDeliveryNetworkRuleRules(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/wanopt/content-delivery-network-rule/{content-delivery-network-rule}/rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWanoptContentDeliveryNetworkRuleRules API operation for FortiManager Device gets the Content Delivery Network RuleRules
// with the specified index value.
// Returns the requested Content Delivery Network RuleRules value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule rules chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWanoptContentDeliveryNetworkRuleRules(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/content-delivery-network-rule/{content-delivery-network-rule}/rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWanoptContentDeliveryNetworkRuleRulesContentId API operation for FortiManager Device updates the specified Content Delivery Network RuleRulesContent Id.
// Returns the index value of the Content Delivery Network RuleRulesContent Id and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule rules content-id chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWanoptContentDeliveryNetworkRuleRulesContentId(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/content-delivery-network-rule/{content-delivery-network-rule}/rules/{rules}/content-id"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWanoptContentDeliveryNetworkRuleRulesContentId API operation for FortiManager Device deletes the specified Content Delivery Network RuleRulesContent Id.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule rules content-id chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWanoptContentDeliveryNetworkRuleRulesContentId(mkey string, paradict map[string]string) (err error) {

	//No unset API for wanopt - content-delivery-network-rule rules content-id
	return
}

// ReadWanoptContentDeliveryNetworkRuleRulesContentId API operation for FortiManager Device gets the Content Delivery Network RuleRulesContent Id
// with the specified index value.
// Returns the requested Content Delivery Network RuleRulesContent Id value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule rules content-id chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWanoptContentDeliveryNetworkRuleRulesContentId(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/content-delivery-network-rule/{content-delivery-network-rule}/rules/{rules}/content-id"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWanoptContentDeliveryNetworkRuleRulesMatchEntries API operation for FortiManager Device creates a new Content Delivery Network RuleRulesMatch Entries.
// Returns the index value of the Content Delivery Network RuleRulesMatch Entries and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule rules match-entries chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWanoptContentDeliveryNetworkRuleRulesMatchEntries(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/content-delivery-network-rule/{content-delivery-network-rule}/rules/{rules}/match-entries"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWanoptContentDeliveryNetworkRuleRulesMatchEntries API operation for FortiManager Device updates the specified Content Delivery Network RuleRulesMatch Entries.
// Returns the index value of the Content Delivery Network RuleRulesMatch Entries and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule rules match-entries chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWanoptContentDeliveryNetworkRuleRulesMatchEntries(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/content-delivery-network-rule/{content-delivery-network-rule}/rules/{rules}/match-entries"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWanoptContentDeliveryNetworkRuleRulesMatchEntries API operation for FortiManager Device deletes the specified Content Delivery Network RuleRulesMatch Entries.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule rules match-entries chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWanoptContentDeliveryNetworkRuleRulesMatchEntries(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/wanopt/content-delivery-network-rule/{content-delivery-network-rule}/rules/{rules}/match-entries"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWanoptContentDeliveryNetworkRuleRulesMatchEntries API operation for FortiManager Device gets the Content Delivery Network RuleRulesMatch Entries
// with the specified index value.
// Returns the requested Content Delivery Network RuleRulesMatch Entries value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule rules match-entries chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWanoptContentDeliveryNetworkRuleRulesMatchEntries(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/content-delivery-network-rule/{content-delivery-network-rule}/rules/{rules}/match-entries"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWanoptContentDeliveryNetworkRuleRulesSkipEntries API operation for FortiManager Device creates a new Content Delivery Network RuleRulesSkip Entries.
// Returns the index value of the Content Delivery Network RuleRulesSkip Entries and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule rules skip-entries chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWanoptContentDeliveryNetworkRuleRulesSkipEntries(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/content-delivery-network-rule/{content-delivery-network-rule}/rules/{rules}/skip-entries"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWanoptContentDeliveryNetworkRuleRulesSkipEntries API operation for FortiManager Device updates the specified Content Delivery Network RuleRulesSkip Entries.
// Returns the index value of the Content Delivery Network RuleRulesSkip Entries and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule rules skip-entries chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWanoptContentDeliveryNetworkRuleRulesSkipEntries(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/content-delivery-network-rule/{content-delivery-network-rule}/rules/{rules}/skip-entries"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWanoptContentDeliveryNetworkRuleRulesSkipEntries API operation for FortiManager Device deletes the specified Content Delivery Network RuleRulesSkip Entries.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule rules skip-entries chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWanoptContentDeliveryNetworkRuleRulesSkipEntries(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/wanopt/content-delivery-network-rule/{content-delivery-network-rule}/rules/{rules}/skip-entries"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWanoptContentDeliveryNetworkRuleRulesSkipEntries API operation for FortiManager Device gets the Content Delivery Network RuleRulesSkip Entries
// with the specified index value.
// Returns the requested Content Delivery Network RuleRulesSkip Entries value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt content-delivery-network-rule rules skip-entries chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWanoptContentDeliveryNetworkRuleRulesSkipEntries(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/content-delivery-network-rule/{content-delivery-network-rule}/rules/{rules}/skip-entries"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWanoptRemoteStorage API operation for FortiManager Device updates the specified Remote Storage.
// Returns the index value of the Remote Storage and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt remote-storage chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWanoptRemoteStorage(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/remote-storage"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWanoptRemoteStorage API operation for FortiManager Device deletes the specified Remote Storage.
// Returns error for service API and SDK errors.
// See the device - wanopt remote-storage chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWanoptRemoteStorage(mkey string, paradict map[string]string) (err error) {

	//No unset API for wanopt - remote-storage
	return
}

// ReadWanoptRemoteStorage API operation for FortiManager Device gets the Remote Storage
// with the specified index value.
// Returns the requested Remote Storage value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt remote-storage chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWanoptRemoteStorage(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wanopt/remote-storage"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWanoptSettings API operation for FortiManager Device updates the specified Settings.
// Returns the index value of the Settings and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWanoptSettings(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wanopt/settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWanoptSettings API operation for FortiManager Device deletes the specified Settings.
// Returns error for service API and SDK errors.
// See the device - wanopt settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWanoptSettings(mkey string, paradict map[string]string) (err error) {

	//No unset API for wanopt - settings
	return
}

// ReadWanoptSettings API operation for FortiManager Device gets the Settings
// with the specified index value.
// Returns the requested Settings value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt settings chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWanoptSettings(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wanopt/settings"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWanoptWebcache API operation for FortiManager Device updates the specified Webcache.
// Returns the index value of the Webcache and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt webcache chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWanoptWebcache(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wanopt/webcache"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWanoptWebcache API operation for FortiManager Device deletes the specified Webcache.
// Returns error for service API and SDK errors.
// See the device - wanopt webcache chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWanoptWebcache(mkey string, paradict map[string]string) (err error) {

	//No unset API for wanopt - webcache
	return
}

// ReadWanoptWebcache API operation for FortiManager Device gets the Webcache
// with the specified index value.
// Returns the requested Webcache value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wanopt webcache chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWanoptWebcache(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wanopt/webcache"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWebProxyDebugUrl API operation for FortiManager Device creates a new Debug Url.
// Returns the index value of the Debug Url and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - web-proxy debug-url chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWebProxyDebugUrl(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/debug-url"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWebProxyDebugUrl API operation for FortiManager Device updates the specified Debug Url.
// Returns the index value of the Debug Url and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - web-proxy debug-url chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWebProxyDebugUrl(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/debug-url"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWebProxyDebugUrl API operation for FortiManager Device deletes the specified Debug Url.
// Returns error for service API and SDK errors.
// See the device - web-proxy debug-url chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWebProxyDebugUrl(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/debug-url"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWebProxyDebugUrl API operation for FortiManager Device gets the Debug Url
// with the specified index value.
// Returns the requested Debug Url value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - web-proxy debug-url chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWebProxyDebugUrl(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/debug-url"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWebProxyExplicit API operation for FortiManager Device updates the specified Explicit.
// Returns the index value of the Explicit and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - web-proxy explicit chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWebProxyExplicit(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/explicit"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWebProxyExplicit API operation for FortiManager Device deletes the specified Explicit.
// Returns error for service API and SDK errors.
// See the device - web-proxy explicit chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWebProxyExplicit(mkey string, paradict map[string]string) (err error) {

	//No unset API for web-proxy - explicit
	return
}

// ReadWebProxyExplicit API operation for FortiManager Device gets the Explicit
// with the specified index value.
// Returns the requested Explicit value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - web-proxy explicit chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWebProxyExplicit(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/explicit"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWebProxyExplicitPacPolicy API operation for FortiManager Device creates a new ExplicitPac Policy.
// Returns the index value of the ExplicitPac Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - web-proxy explicit pac-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWebProxyExplicitPacPolicy(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/explicit/pac-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWebProxyExplicitPacPolicy API operation for FortiManager Device updates the specified ExplicitPac Policy.
// Returns the index value of the ExplicitPac Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - web-proxy explicit pac-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWebProxyExplicitPacPolicy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/explicit/pac-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWebProxyExplicitPacPolicy API operation for FortiManager Device deletes the specified ExplicitPac Policy.
// Returns error for service API and SDK errors.
// See the device - web-proxy explicit pac-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWebProxyExplicitPacPolicy(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/explicit/pac-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWebProxyExplicitPacPolicy API operation for FortiManager Device gets the ExplicitPac Policy
// with the specified index value.
// Returns the requested ExplicitPac Policy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - web-proxy explicit pac-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWebProxyExplicitPacPolicy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/explicit/pac-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWebProxyFastFallback API operation for FortiManager Device creates a new Fast Fallback.
// Returns the index value of the Fast Fallback and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - web-proxy fast-fallback chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWebProxyFastFallback(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/fast-fallback"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWebProxyFastFallback API operation for FortiManager Device updates the specified Fast Fallback.
// Returns the index value of the Fast Fallback and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - web-proxy fast-fallback chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWebProxyFastFallback(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/fast-fallback"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWebProxyFastFallback API operation for FortiManager Device deletes the specified Fast Fallback.
// Returns error for service API and SDK errors.
// See the device - web-proxy fast-fallback chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWebProxyFastFallback(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/fast-fallback"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWebProxyFastFallback API operation for FortiManager Device gets the Fast Fallback
// with the specified index value.
// Returns the requested Fast Fallback value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - web-proxy fast-fallback chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWebProxyFastFallback(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/fast-fallback"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWebProxyGlobal API operation for FortiManager Device updates the specified Global.
// Returns the index value of the Global and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - web-proxy global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWebProxyGlobal(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/global"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWebProxyGlobal API operation for FortiManager Device deletes the specified Global.
// Returns error for service API and SDK errors.
// See the device - web-proxy global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWebProxyGlobal(mkey string, paradict map[string]string) (err error) {

	//No unset API for web-proxy - global
	return
}

// ReadWebProxyGlobal API operation for FortiManager Device gets the Global
// with the specified index value.
// Returns the requested Global value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - web-proxy global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWebProxyGlobal(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/global"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWebProxyUrlMatch API operation for FortiManager Device creates a new Url Match.
// Returns the index value of the Url Match and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - web-proxy url-match chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWebProxyUrlMatch(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/url-match"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWebProxyUrlMatch API operation for FortiManager Device updates the specified Url Match.
// Returns the index value of the Url Match and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - web-proxy url-match chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWebProxyUrlMatch(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/url-match"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWebProxyUrlMatch API operation for FortiManager Device deletes the specified Url Match.
// Returns error for service API and SDK errors.
// See the device - web-proxy url-match chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWebProxyUrlMatch(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/url-match"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWebProxyUrlMatch API operation for FortiManager Device gets the Url Match
// with the specified index value.
// Returns the requested Url Match value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - web-proxy url-match chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWebProxyUrlMatch(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/web-proxy/url-match"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWebfilterFortiguard API operation for FortiManager Device updates the specified Fortiguard.
// Returns the index value of the Fortiguard and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - webfilter fortiguard chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWebfilterFortiguard(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/webfilter/fortiguard"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWebfilterFortiguard API operation for FortiManager Device deletes the specified Fortiguard.
// Returns error for service API and SDK errors.
// See the device - webfilter fortiguard chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWebfilterFortiguard(mkey string, paradict map[string]string) (err error) {

	//No unset API for webfilter - fortiguard
	return
}

// ReadWebfilterFortiguard API operation for FortiManager Device gets the Fortiguard
// with the specified index value.
// Returns the requested Fortiguard value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - webfilter fortiguard chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWebfilterFortiguard(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/webfilter/fortiguard"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWebfilterIpsUrlfilterCacheSetting API operation for FortiManager Device updates the specified Ips Urlfilter Cache Setting.
// Returns the index value of the Ips Urlfilter Cache Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - webfilter ips-urlfilter-cache-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWebfilterIpsUrlfilterCacheSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/webfilter/ips-urlfilter-cache-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWebfilterIpsUrlfilterCacheSetting API operation for FortiManager Device deletes the specified Ips Urlfilter Cache Setting.
// Returns error for service API and SDK errors.
// See the device - webfilter ips-urlfilter-cache-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWebfilterIpsUrlfilterCacheSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for webfilter - ips-urlfilter-cache-setting
	return
}

// ReadWebfilterIpsUrlfilterCacheSetting API operation for FortiManager Device gets the Ips Urlfilter Cache Setting
// with the specified index value.
// Returns the requested Ips Urlfilter Cache Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - webfilter ips-urlfilter-cache-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWebfilterIpsUrlfilterCacheSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/webfilter/ips-urlfilter-cache-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWebfilterIpsUrlfilterSetting API operation for FortiManager Device updates the specified Ips Urlfilter Setting.
// Returns the index value of the Ips Urlfilter Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - webfilter ips-urlfilter-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWebfilterIpsUrlfilterSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/webfilter/ips-urlfilter-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWebfilterIpsUrlfilterSetting API operation for FortiManager Device deletes the specified Ips Urlfilter Setting.
// Returns error for service API and SDK errors.
// See the device - webfilter ips-urlfilter-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWebfilterIpsUrlfilterSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for webfilter - ips-urlfilter-setting
	return
}

// ReadWebfilterIpsUrlfilterSetting API operation for FortiManager Device gets the Ips Urlfilter Setting
// with the specified index value.
// Returns the requested Ips Urlfilter Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - webfilter ips-urlfilter-setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWebfilterIpsUrlfilterSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/webfilter/ips-urlfilter-setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWebfilterIpsUrlfilterSetting6 API operation for FortiManager Device updates the specified Ips Urlfilter Setting6.
// Returns the index value of the Ips Urlfilter Setting6 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - webfilter ips-urlfilter-setting6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWebfilterIpsUrlfilterSetting6(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/webfilter/ips-urlfilter-setting6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWebfilterIpsUrlfilterSetting6 API operation for FortiManager Device deletes the specified Ips Urlfilter Setting6.
// Returns error for service API and SDK errors.
// See the device - webfilter ips-urlfilter-setting6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWebfilterIpsUrlfilterSetting6(mkey string, paradict map[string]string) (err error) {

	//No unset API for webfilter - ips-urlfilter-setting6
	return
}

// ReadWebfilterIpsUrlfilterSetting6 API operation for FortiManager Device gets the Ips Urlfilter Setting6
// with the specified index value.
// Returns the requested Ips Urlfilter Setting6 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - webfilter ips-urlfilter-setting6 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWebfilterIpsUrlfilterSetting6(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/webfilter/ips-urlfilter-setting6"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWebfilterOverride API operation for FortiManager Device creates a new Override.
// Returns the index value of the Override and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - webfilter override chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWebfilterOverride(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/webfilter/override"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWebfilterOverride API operation for FortiManager Device updates the specified Override.
// Returns the index value of the Override and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - webfilter override chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWebfilterOverride(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/webfilter/override"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWebfilterOverride API operation for FortiManager Device deletes the specified Override.
// Returns error for service API and SDK errors.
// See the device - webfilter override chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWebfilterOverride(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/webfilter/override"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWebfilterOverride API operation for FortiManager Device gets the Override
// with the specified index value.
// Returns the requested Override value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - webfilter override chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWebfilterOverride(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/webfilter/override"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWebfilterSearchEngine API operation for FortiManager Device creates a new Search Engine.
// Returns the index value of the Search Engine and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - webfilter search-engine chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWebfilterSearchEngine(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/webfilter/search-engine"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWebfilterSearchEngine API operation for FortiManager Device updates the specified Search Engine.
// Returns the index value of the Search Engine and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - webfilter search-engine chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWebfilterSearchEngine(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/webfilter/search-engine"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWebfilterSearchEngine API operation for FortiManager Device deletes the specified Search Engine.
// Returns error for service API and SDK errors.
// See the device - webfilter search-engine chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWebfilterSearchEngine(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/webfilter/search-engine"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWebfilterSearchEngine API operation for FortiManager Device gets the Search Engine
// with the specified index value.
// Returns the requested Search Engine value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - webfilter search-engine chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWebfilterSearchEngine(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/webfilter/search-engine"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerAccessControlList API operation for FortiManager Device creates a new Access Control List.
// Returns the index value of the Access Control List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller access-control-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerAccessControlList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/access-control-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerAccessControlList API operation for FortiManager Device updates the specified Access Control List.
// Returns the index value of the Access Control List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller access-control-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerAccessControlList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/access-control-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerAccessControlList API operation for FortiManager Device deletes the specified Access Control List.
// Returns error for service API and SDK errors.
// See the device - wireless-controller access-control-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerAccessControlList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/access-control-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerAccessControlList API operation for FortiManager Device gets the Access Control List
// with the specified index value.
// Returns the requested Access Control List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller access-control-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerAccessControlList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/access-control-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerAccessControlListLayer3Ipv4Rules API operation for FortiManager Device creates a new Access Control ListLayer3 Ipv4 Rules.
// Returns the index value of the Access Control ListLayer3 Ipv4 Rules and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller access-control-list layer3-ipv4-rules chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerAccessControlListLayer3Ipv4Rules(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/access-control-list/{access-control-list}/layer3-ipv4-rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerAccessControlListLayer3Ipv4Rules API operation for FortiManager Device updates the specified Access Control ListLayer3 Ipv4 Rules.
// Returns the index value of the Access Control ListLayer3 Ipv4 Rules and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller access-control-list layer3-ipv4-rules chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerAccessControlListLayer3Ipv4Rules(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/access-control-list/{access-control-list}/layer3-ipv4-rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerAccessControlListLayer3Ipv4Rules API operation for FortiManager Device deletes the specified Access Control ListLayer3 Ipv4 Rules.
// Returns error for service API and SDK errors.
// See the device - wireless-controller access-control-list layer3-ipv4-rules chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerAccessControlListLayer3Ipv4Rules(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/access-control-list/{access-control-list}/layer3-ipv4-rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerAccessControlListLayer3Ipv4Rules API operation for FortiManager Device gets the Access Control ListLayer3 Ipv4 Rules
// with the specified index value.
// Returns the requested Access Control ListLayer3 Ipv4 Rules value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller access-control-list layer3-ipv4-rules chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerAccessControlListLayer3Ipv4Rules(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/access-control-list/{access-control-list}/layer3-ipv4-rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerAccessControlListLayer3Ipv4RulesMove API operation for FortiManager Device updates the specified Access Control ListLayer3 Ipv4 RulesMove.
// Returns the index value of the Access Control ListLayer3 Ipv4 RulesMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller access-control-list layer3-ipv4-rules move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerAccessControlListLayer3Ipv4RulesMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/access-control-list/{access-control-list}/layer3-ipv4-rules/{layer3-ipv4-rules}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadWirelessControllerAccessControlListLayer3Ipv4RulesMove API operation for FortiManager Device gets the Access Control ListLayer3 Ipv4 RulesMove
// with the specified index value.
// Returns the requested Access Control ListLayer3 Ipv4 RulesMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller access-control-list layer3-ipv4-rules move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerAccessControlListLayer3Ipv4RulesMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/access-control-list/{access-control-list}/layer3-ipv4-rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"rule-id"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// CreateWirelessControllerAccessControlListLayer3Ipv6Rules API operation for FortiManager Device creates a new Access Control ListLayer3 Ipv6 Rules.
// Returns the index value of the Access Control ListLayer3 Ipv6 Rules and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller access-control-list layer3-ipv6-rules chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerAccessControlListLayer3Ipv6Rules(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/access-control-list/{access-control-list}/layer3-ipv6-rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerAccessControlListLayer3Ipv6Rules API operation for FortiManager Device updates the specified Access Control ListLayer3 Ipv6 Rules.
// Returns the index value of the Access Control ListLayer3 Ipv6 Rules and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller access-control-list layer3-ipv6-rules chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerAccessControlListLayer3Ipv6Rules(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/access-control-list/{access-control-list}/layer3-ipv6-rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerAccessControlListLayer3Ipv6Rules API operation for FortiManager Device deletes the specified Access Control ListLayer3 Ipv6 Rules.
// Returns error for service API and SDK errors.
// See the device - wireless-controller access-control-list layer3-ipv6-rules chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerAccessControlListLayer3Ipv6Rules(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/access-control-list/{access-control-list}/layer3-ipv6-rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerAccessControlListLayer3Ipv6Rules API operation for FortiManager Device gets the Access Control ListLayer3 Ipv6 Rules
// with the specified index value.
// Returns the requested Access Control ListLayer3 Ipv6 Rules value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller access-control-list layer3-ipv6-rules chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerAccessControlListLayer3Ipv6Rules(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/access-control-list/{access-control-list}/layer3-ipv6-rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerAccessControlListLayer3Ipv6RulesMove API operation for FortiManager Device updates the specified Access Control ListLayer3 Ipv6 RulesMove.
// Returns the index value of the Access Control ListLayer3 Ipv6 RulesMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller access-control-list layer3-ipv6-rules move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerAccessControlListLayer3Ipv6RulesMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/access-control-list/{access-control-list}/layer3-ipv6-rules/{layer3-ipv6-rules}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadWirelessControllerAccessControlListLayer3Ipv6RulesMove API operation for FortiManager Device gets the Access Control ListLayer3 Ipv6 RulesMove
// with the specified index value.
// Returns the requested Access Control ListLayer3 Ipv6 RulesMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller access-control-list layer3-ipv6-rules move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerAccessControlListLayer3Ipv6RulesMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/access-control-list/{access-control-list}/layer3-ipv6-rules"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"rule-id"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// CreateWirelessControllerApStatus API operation for FortiManager Device creates a new Ap Status.
// Returns the index value of the Ap Status and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller ap-status chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerApStatus(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/ap-status"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerApStatus API operation for FortiManager Device updates the specified Ap Status.
// Returns the index value of the Ap Status and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller ap-status chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerApStatus(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/ap-status"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerApStatus API operation for FortiManager Device deletes the specified Ap Status.
// Returns error for service API and SDK errors.
// See the device - wireless-controller ap-status chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerApStatus(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/ap-status"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerApStatus API operation for FortiManager Device gets the Ap Status
// with the specified index value.
// Returns the requested Ap Status value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller ap-status chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerApStatus(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/ap-status"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerApcfgProfile API operation for FortiManager Device creates a new Apcfg Profile.
// Returns the index value of the Apcfg Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller apcfg-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerApcfgProfile(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/apcfg-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerApcfgProfile API operation for FortiManager Device updates the specified Apcfg Profile.
// Returns the index value of the Apcfg Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller apcfg-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerApcfgProfile(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/apcfg-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerApcfgProfile API operation for FortiManager Device deletes the specified Apcfg Profile.
// Returns error for service API and SDK errors.
// See the device - wireless-controller apcfg-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerApcfgProfile(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/apcfg-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerApcfgProfile API operation for FortiManager Device gets the Apcfg Profile
// with the specified index value.
// Returns the requested Apcfg Profile value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller apcfg-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerApcfgProfile(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/apcfg-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerApcfgProfileCommandList API operation for FortiManager Device creates a new Apcfg ProfileCommand List.
// Returns the index value of the Apcfg ProfileCommand List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller apcfg-profile command-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerApcfgProfileCommandList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/apcfg-profile/{apcfg-profile}/command-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerApcfgProfileCommandList API operation for FortiManager Device updates the specified Apcfg ProfileCommand List.
// Returns the index value of the Apcfg ProfileCommand List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller apcfg-profile command-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerApcfgProfileCommandList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/apcfg-profile/{apcfg-profile}/command-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerApcfgProfileCommandList API operation for FortiManager Device deletes the specified Apcfg ProfileCommand List.
// Returns error for service API and SDK errors.
// See the device - wireless-controller apcfg-profile command-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerApcfgProfileCommandList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/apcfg-profile/{apcfg-profile}/command-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerApcfgProfileCommandList API operation for FortiManager Device gets the Apcfg ProfileCommand List
// with the specified index value.
// Returns the requested Apcfg ProfileCommand List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller apcfg-profile command-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerApcfgProfileCommandList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/apcfg-profile/{apcfg-profile}/command-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerApcfgProfileCommandListMove API operation for FortiManager Device updates the specified Apcfg ProfileCommand ListMove.
// Returns the index value of the Apcfg ProfileCommand ListMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller apcfg-profile command-list move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerApcfgProfileCommandListMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/apcfg-profile/{apcfg-profile}/command-list/{command-list}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadWirelessControllerApcfgProfileCommandListMove API operation for FortiManager Device gets the Apcfg ProfileCommand ListMove
// with the specified index value.
// Returns the requested Apcfg ProfileCommand ListMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller apcfg-profile command-list move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerApcfgProfileCommandListMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/apcfg-profile/{apcfg-profile}/command-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"id"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// CreateWirelessControllerArrpProfile API operation for FortiManager Device creates a new Arrp Profile.
// Returns the index value of the Arrp Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller arrp-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerArrpProfile(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/arrp-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerArrpProfile API operation for FortiManager Device updates the specified Arrp Profile.
// Returns the index value of the Arrp Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller arrp-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerArrpProfile(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/arrp-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerArrpProfile API operation for FortiManager Device deletes the specified Arrp Profile.
// Returns error for service API and SDK errors.
// See the device - wireless-controller arrp-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerArrpProfile(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/arrp-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerArrpProfile API operation for FortiManager Device gets the Arrp Profile
// with the specified index value.
// Returns the requested Arrp Profile value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller arrp-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerArrpProfile(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/arrp-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerBleProfile API operation for FortiManager Device creates a new Ble Profile.
// Returns the index value of the Ble Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller ble-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerBleProfile(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/ble-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerBleProfile API operation for FortiManager Device updates the specified Ble Profile.
// Returns the index value of the Ble Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller ble-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerBleProfile(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/ble-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerBleProfile API operation for FortiManager Device deletes the specified Ble Profile.
// Returns error for service API and SDK errors.
// See the device - wireless-controller ble-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerBleProfile(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/ble-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerBleProfile API operation for FortiManager Device gets the Ble Profile
// with the specified index value.
// Returns the requested Ble Profile value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller ble-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerBleProfile(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/ble-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerBonjourProfile API operation for FortiManager Device creates a new Bonjour Profile.
// Returns the index value of the Bonjour Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller bonjour-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerBonjourProfile(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/bonjour-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerBonjourProfile API operation for FortiManager Device updates the specified Bonjour Profile.
// Returns the index value of the Bonjour Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller bonjour-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerBonjourProfile(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/bonjour-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerBonjourProfile API operation for FortiManager Device deletes the specified Bonjour Profile.
// Returns error for service API and SDK errors.
// See the device - wireless-controller bonjour-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerBonjourProfile(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/bonjour-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerBonjourProfile API operation for FortiManager Device gets the Bonjour Profile
// with the specified index value.
// Returns the requested Bonjour Profile value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller bonjour-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerBonjourProfile(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/bonjour-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerBonjourProfilePolicyList API operation for FortiManager Device creates a new Bonjour ProfilePolicy List.
// Returns the index value of the Bonjour ProfilePolicy List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller bonjour-profile policy-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerBonjourProfilePolicyList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/bonjour-profile/{bonjour-profile}/policy-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerBonjourProfilePolicyList API operation for FortiManager Device updates the specified Bonjour ProfilePolicy List.
// Returns the index value of the Bonjour ProfilePolicy List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller bonjour-profile policy-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerBonjourProfilePolicyList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/bonjour-profile/{bonjour-profile}/policy-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerBonjourProfilePolicyList API operation for FortiManager Device deletes the specified Bonjour ProfilePolicy List.
// Returns error for service API and SDK errors.
// See the device - wireless-controller bonjour-profile policy-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerBonjourProfilePolicyList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/bonjour-profile/{bonjour-profile}/policy-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerBonjourProfilePolicyList API operation for FortiManager Device gets the Bonjour ProfilePolicy List
// with the specified index value.
// Returns the requested Bonjour ProfilePolicy List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller bonjour-profile policy-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerBonjourProfilePolicyList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/bonjour-profile/{bonjour-profile}/policy-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerBonjourProfilePolicyListMove API operation for FortiManager Device updates the specified Bonjour ProfilePolicy ListMove.
// Returns the index value of the Bonjour ProfilePolicy ListMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller bonjour-profile policy-list move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerBonjourProfilePolicyListMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/bonjour-profile/{bonjour-profile}/policy-list/{policy-list}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadWirelessControllerBonjourProfilePolicyListMove API operation for FortiManager Device gets the Bonjour ProfilePolicy ListMove
// with the specified index value.
// Returns the requested Bonjour ProfilePolicy ListMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller bonjour-profile policy-list move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerBonjourProfilePolicyListMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/bonjour-profile/{bonjour-profile}/policy-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"policy-id"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// UpdateWirelessControllerGlobal API operation for FortiManager Device updates the specified Global.
// Returns the index value of the Global and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerGlobal(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wireless-controller/global"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerGlobal API operation for FortiManager Device deletes the specified Global.
// Returns error for service API and SDK errors.
// See the device - wireless-controller global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerGlobal(mkey string, paradict map[string]string) (err error) {

	//No unset API for wireless-controller - global
	return
}

// ReadWirelessControllerGlobal API operation for FortiManager Device gets the Global
// with the specified index value.
// Returns the requested Global value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller global chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerGlobal(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wireless-controller/global"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20Anqp3GppCellular API operation for FortiManager Device creates a new Hotspot20Anqp 3Gpp Cellular.
// Returns the index value of the Hotspot20Anqp 3Gpp Cellular and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-3gpp-cellular chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20Anqp3GppCellular(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-3gpp-cellular"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20Anqp3GppCellular API operation for FortiManager Device updates the specified Hotspot20Anqp 3Gpp Cellular.
// Returns the index value of the Hotspot20Anqp 3Gpp Cellular and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-3gpp-cellular chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20Anqp3GppCellular(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-3gpp-cellular"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20Anqp3GppCellular API operation for FortiManager Device deletes the specified Hotspot20Anqp 3Gpp Cellular.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-3gpp-cellular chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20Anqp3GppCellular(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-3gpp-cellular"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20Anqp3GppCellular API operation for FortiManager Device gets the Hotspot20Anqp 3Gpp Cellular
// with the specified index value.
// Returns the requested Hotspot20Anqp 3Gpp Cellular value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-3gpp-cellular chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20Anqp3GppCellular(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-3gpp-cellular"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20Anqp3GppCellularMccMncList API operation for FortiManager Device creates a new Hotspot20Anqp 3Gpp CellularMcc Mnc List.
// Returns the index value of the Hotspot20Anqp 3Gpp CellularMcc Mnc List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-3gpp-cellular mcc-mnc-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20Anqp3GppCellularMccMncList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-3gpp-cellular/{anqp-3gpp-cellular}/mcc-mnc-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20Anqp3GppCellularMccMncList API operation for FortiManager Device updates the specified Hotspot20Anqp 3Gpp CellularMcc Mnc List.
// Returns the index value of the Hotspot20Anqp 3Gpp CellularMcc Mnc List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-3gpp-cellular mcc-mnc-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20Anqp3GppCellularMccMncList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-3gpp-cellular/{anqp-3gpp-cellular}/mcc-mnc-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20Anqp3GppCellularMccMncList API operation for FortiManager Device deletes the specified Hotspot20Anqp 3Gpp CellularMcc Mnc List.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-3gpp-cellular mcc-mnc-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20Anqp3GppCellularMccMncList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-3gpp-cellular/{anqp-3gpp-cellular}/mcc-mnc-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20Anqp3GppCellularMccMncList API operation for FortiManager Device gets the Hotspot20Anqp 3Gpp CellularMcc Mnc List
// with the specified index value.
// Returns the requested Hotspot20Anqp 3Gpp CellularMcc Mnc List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-3gpp-cellular mcc-mnc-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20Anqp3GppCellularMccMncList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-3gpp-cellular/{anqp-3gpp-cellular}/mcc-mnc-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20AnqpIpAddressType API operation for FortiManager Device creates a new Hotspot20Anqp Ip Address Type.
// Returns the index value of the Hotspot20Anqp Ip Address Type and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-ip-address-type chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20AnqpIpAddressType(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-ip-address-type"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20AnqpIpAddressType API operation for FortiManager Device updates the specified Hotspot20Anqp Ip Address Type.
// Returns the index value of the Hotspot20Anqp Ip Address Type and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-ip-address-type chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20AnqpIpAddressType(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-ip-address-type"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20AnqpIpAddressType API operation for FortiManager Device deletes the specified Hotspot20Anqp Ip Address Type.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-ip-address-type chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20AnqpIpAddressType(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-ip-address-type"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20AnqpIpAddressType API operation for FortiManager Device gets the Hotspot20Anqp Ip Address Type
// with the specified index value.
// Returns the requested Hotspot20Anqp Ip Address Type value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-ip-address-type chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20AnqpIpAddressType(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-ip-address-type"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20AnqpNaiRealm API operation for FortiManager Device creates a new Hotspot20Anqp Nai Realm.
// Returns the index value of the Hotspot20Anqp Nai Realm and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-nai-realm chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20AnqpNaiRealm(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-nai-realm"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20AnqpNaiRealm API operation for FortiManager Device updates the specified Hotspot20Anqp Nai Realm.
// Returns the index value of the Hotspot20Anqp Nai Realm and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-nai-realm chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20AnqpNaiRealm(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-nai-realm"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20AnqpNaiRealm API operation for FortiManager Device deletes the specified Hotspot20Anqp Nai Realm.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-nai-realm chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20AnqpNaiRealm(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-nai-realm"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20AnqpNaiRealm API operation for FortiManager Device gets the Hotspot20Anqp Nai Realm
// with the specified index value.
// Returns the requested Hotspot20Anqp Nai Realm value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-nai-realm chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20AnqpNaiRealm(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-nai-realm"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20AnqpNaiRealmNaiList API operation for FortiManager Device creates a new Hotspot20Anqp Nai RealmNai List.
// Returns the index value of the Hotspot20Anqp Nai RealmNai List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-nai-realm nai-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20AnqpNaiRealmNaiList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-nai-realm/{anqp-nai-realm}/nai-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20AnqpNaiRealmNaiList API operation for FortiManager Device updates the specified Hotspot20Anqp Nai RealmNai List.
// Returns the index value of the Hotspot20Anqp Nai RealmNai List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-nai-realm nai-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20AnqpNaiRealmNaiList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-nai-realm/{anqp-nai-realm}/nai-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20AnqpNaiRealmNaiList API operation for FortiManager Device deletes the specified Hotspot20Anqp Nai RealmNai List.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-nai-realm nai-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20AnqpNaiRealmNaiList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-nai-realm/{anqp-nai-realm}/nai-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20AnqpNaiRealmNaiList API operation for FortiManager Device gets the Hotspot20Anqp Nai RealmNai List
// with the specified index value.
// Returns the requested Hotspot20Anqp Nai RealmNai List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-nai-realm nai-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20AnqpNaiRealmNaiList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-nai-realm/{anqp-nai-realm}/nai-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod API operation for FortiManager Device creates a new Hotspot20Anqp Nai RealmNai ListEap Method.
// Returns the index value of the Hotspot20Anqp Nai RealmNai ListEap Method and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-nai-realm nai-list eap-method chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-nai-realm/{anqp-nai-realm}/nai-list/{nai-list}/eap-method"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod API operation for FortiManager Device updates the specified Hotspot20Anqp Nai RealmNai ListEap Method.
// Returns the index value of the Hotspot20Anqp Nai RealmNai ListEap Method and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-nai-realm nai-list eap-method chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-nai-realm/{anqp-nai-realm}/nai-list/{nai-list}/eap-method"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod API operation for FortiManager Device deletes the specified Hotspot20Anqp Nai RealmNai ListEap Method.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-nai-realm nai-list eap-method chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-nai-realm/{anqp-nai-realm}/nai-list/{nai-list}/eap-method"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod API operation for FortiManager Device gets the Hotspot20Anqp Nai RealmNai ListEap Method
// with the specified index value.
// Returns the requested Hotspot20Anqp Nai RealmNai ListEap Method value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-nai-realm nai-list eap-method chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20AnqpNaiRealmNaiListEapMethod(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-nai-realm/{anqp-nai-realm}/nai-list/{nai-list}/eap-method"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParam API operation for FortiManager Device creates a new Hotspot20Anqp Nai RealmNai ListEap MethodAuth Param.
// Returns the index value of the Hotspot20Anqp Nai RealmNai ListEap MethodAuth Param and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-nai-realm nai-list eap-method auth-param chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParam(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-nai-realm/{anqp-nai-realm}/nai-list/{nai-list}/eap-method/{eap-method}/auth-param"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParam API operation for FortiManager Device updates the specified Hotspot20Anqp Nai RealmNai ListEap MethodAuth Param.
// Returns the index value of the Hotspot20Anqp Nai RealmNai ListEap MethodAuth Param and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-nai-realm nai-list eap-method auth-param chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParam(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-nai-realm/{anqp-nai-realm}/nai-list/{nai-list}/eap-method/{eap-method}/auth-param"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParam API operation for FortiManager Device deletes the specified Hotspot20Anqp Nai RealmNai ListEap MethodAuth Param.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-nai-realm nai-list eap-method auth-param chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParam(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-nai-realm/{anqp-nai-realm}/nai-list/{nai-list}/eap-method/{eap-method}/auth-param"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParam API operation for FortiManager Device gets the Hotspot20Anqp Nai RealmNai ListEap MethodAuth Param
// with the specified index value.
// Returns the requested Hotspot20Anqp Nai RealmNai ListEap MethodAuth Param value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-nai-realm nai-list eap-method auth-param chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParam(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-nai-realm/{anqp-nai-realm}/nai-list/{nai-list}/eap-method/{eap-method}/auth-param"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20AnqpNetworkAuthType API operation for FortiManager Device creates a new Hotspot20Anqp Network Auth Type.
// Returns the index value of the Hotspot20Anqp Network Auth Type and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-network-auth-type chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20AnqpNetworkAuthType(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-network-auth-type"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20AnqpNetworkAuthType API operation for FortiManager Device updates the specified Hotspot20Anqp Network Auth Type.
// Returns the index value of the Hotspot20Anqp Network Auth Type and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-network-auth-type chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20AnqpNetworkAuthType(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-network-auth-type"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20AnqpNetworkAuthType API operation for FortiManager Device deletes the specified Hotspot20Anqp Network Auth Type.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-network-auth-type chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20AnqpNetworkAuthType(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-network-auth-type"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20AnqpNetworkAuthType API operation for FortiManager Device gets the Hotspot20Anqp Network Auth Type
// with the specified index value.
// Returns the requested Hotspot20Anqp Network Auth Type value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-network-auth-type chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20AnqpNetworkAuthType(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-network-auth-type"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20AnqpRoamingConsortium API operation for FortiManager Device creates a new Hotspot20Anqp Roaming Consortium.
// Returns the index value of the Hotspot20Anqp Roaming Consortium and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-roaming-consortium chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20AnqpRoamingConsortium(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-roaming-consortium"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20AnqpRoamingConsortium API operation for FortiManager Device updates the specified Hotspot20Anqp Roaming Consortium.
// Returns the index value of the Hotspot20Anqp Roaming Consortium and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-roaming-consortium chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20AnqpRoamingConsortium(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-roaming-consortium"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20AnqpRoamingConsortium API operation for FortiManager Device deletes the specified Hotspot20Anqp Roaming Consortium.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-roaming-consortium chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20AnqpRoamingConsortium(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-roaming-consortium"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20AnqpRoamingConsortium API operation for FortiManager Device gets the Hotspot20Anqp Roaming Consortium
// with the specified index value.
// Returns the requested Hotspot20Anqp Roaming Consortium value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-roaming-consortium chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20AnqpRoamingConsortium(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-roaming-consortium"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20AnqpRoamingConsortiumOiList API operation for FortiManager Device creates a new Hotspot20Anqp Roaming ConsortiumOi List.
// Returns the index value of the Hotspot20Anqp Roaming ConsortiumOi List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-roaming-consortium oi-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20AnqpRoamingConsortiumOiList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-roaming-consortium/{anqp-roaming-consortium}/oi-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20AnqpRoamingConsortiumOiList API operation for FortiManager Device updates the specified Hotspot20Anqp Roaming ConsortiumOi List.
// Returns the index value of the Hotspot20Anqp Roaming ConsortiumOi List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-roaming-consortium oi-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20AnqpRoamingConsortiumOiList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-roaming-consortium/{anqp-roaming-consortium}/oi-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20AnqpRoamingConsortiumOiList API operation for FortiManager Device deletes the specified Hotspot20Anqp Roaming ConsortiumOi List.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-roaming-consortium oi-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20AnqpRoamingConsortiumOiList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-roaming-consortium/{anqp-roaming-consortium}/oi-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20AnqpRoamingConsortiumOiList API operation for FortiManager Device gets the Hotspot20Anqp Roaming ConsortiumOi List
// with the specified index value.
// Returns the requested Hotspot20Anqp Roaming ConsortiumOi List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-roaming-consortium oi-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20AnqpRoamingConsortiumOiList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-roaming-consortium/{anqp-roaming-consortium}/oi-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20AnqpVenueName API operation for FortiManager Device creates a new Hotspot20Anqp Venue Name.
// Returns the index value of the Hotspot20Anqp Venue Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-venue-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20AnqpVenueName(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-venue-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20AnqpVenueName API operation for FortiManager Device updates the specified Hotspot20Anqp Venue Name.
// Returns the index value of the Hotspot20Anqp Venue Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-venue-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20AnqpVenueName(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-venue-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20AnqpVenueName API operation for FortiManager Device deletes the specified Hotspot20Anqp Venue Name.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-venue-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20AnqpVenueName(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-venue-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20AnqpVenueName API operation for FortiManager Device gets the Hotspot20Anqp Venue Name
// with the specified index value.
// Returns the requested Hotspot20Anqp Venue Name value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-venue-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20AnqpVenueName(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-venue-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20AnqpVenueNameValueList API operation for FortiManager Device creates a new Hotspot20Anqp Venue NameValue List.
// Returns the index value of the Hotspot20Anqp Venue NameValue List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-venue-name value-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20AnqpVenueNameValueList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-venue-name/{anqp-venue-name}/value-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20AnqpVenueNameValueList API operation for FortiManager Device updates the specified Hotspot20Anqp Venue NameValue List.
// Returns the index value of the Hotspot20Anqp Venue NameValue List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-venue-name value-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20AnqpVenueNameValueList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-venue-name/{anqp-venue-name}/value-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20AnqpVenueNameValueList API operation for FortiManager Device deletes the specified Hotspot20Anqp Venue NameValue List.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-venue-name value-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20AnqpVenueNameValueList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-venue-name/{anqp-venue-name}/value-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20AnqpVenueNameValueList API operation for FortiManager Device gets the Hotspot20Anqp Venue NameValue List
// with the specified index value.
// Returns the requested Hotspot20Anqp Venue NameValue List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-venue-name value-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20AnqpVenueNameValueList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-venue-name/{anqp-venue-name}/value-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20AnqpVenueUrl API operation for FortiManager Device creates a new Hotspot20Anqp Venue Url.
// Returns the index value of the Hotspot20Anqp Venue Url and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-venue-url chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20AnqpVenueUrl(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-venue-url"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20AnqpVenueUrl API operation for FortiManager Device updates the specified Hotspot20Anqp Venue Url.
// Returns the index value of the Hotspot20Anqp Venue Url and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-venue-url chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20AnqpVenueUrl(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-venue-url"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20AnqpVenueUrl API operation for FortiManager Device deletes the specified Hotspot20Anqp Venue Url.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-venue-url chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20AnqpVenueUrl(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-venue-url"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20AnqpVenueUrl API operation for FortiManager Device gets the Hotspot20Anqp Venue Url
// with the specified index value.
// Returns the requested Hotspot20Anqp Venue Url value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-venue-url chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20AnqpVenueUrl(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-venue-url"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20AnqpVenueUrlValueList API operation for FortiManager Device creates a new Hotspot20Anqp Venue UrlValue List.
// Returns the index value of the Hotspot20Anqp Venue UrlValue List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-venue-url value-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20AnqpVenueUrlValueList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-venue-url/{anqp-venue-url}/value-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20AnqpVenueUrlValueList API operation for FortiManager Device updates the specified Hotspot20Anqp Venue UrlValue List.
// Returns the index value of the Hotspot20Anqp Venue UrlValue List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-venue-url value-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20AnqpVenueUrlValueList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-venue-url/{anqp-venue-url}/value-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20AnqpVenueUrlValueList API operation for FortiManager Device deletes the specified Hotspot20Anqp Venue UrlValue List.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-venue-url value-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20AnqpVenueUrlValueList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-venue-url/{anqp-venue-url}/value-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20AnqpVenueUrlValueList API operation for FortiManager Device gets the Hotspot20Anqp Venue UrlValue List
// with the specified index value.
// Returns the requested Hotspot20Anqp Venue UrlValue List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 anqp-venue-url value-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20AnqpVenueUrlValueList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/anqp-venue-url/{anqp-venue-url}/value-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20H2QpAdviceOfCharge API operation for FortiManager Device creates a new Hotspot20H2Qp Advice Of Charge.
// Returns the index value of the Hotspot20H2Qp Advice Of Charge and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-advice-of-charge chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20H2QpAdviceOfCharge(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-advice-of-charge"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20H2QpAdviceOfCharge API operation for FortiManager Device updates the specified Hotspot20H2Qp Advice Of Charge.
// Returns the index value of the Hotspot20H2Qp Advice Of Charge and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-advice-of-charge chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20H2QpAdviceOfCharge(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-advice-of-charge"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20H2QpAdviceOfCharge API operation for FortiManager Device deletes the specified Hotspot20H2Qp Advice Of Charge.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-advice-of-charge chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20H2QpAdviceOfCharge(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-advice-of-charge"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20H2QpAdviceOfCharge API operation for FortiManager Device gets the Hotspot20H2Qp Advice Of Charge
// with the specified index value.
// Returns the requested Hotspot20H2Qp Advice Of Charge value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-advice-of-charge chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20H2QpAdviceOfCharge(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-advice-of-charge"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20H2QpAdviceOfChargeAocList API operation for FortiManager Device creates a new Hotspot20H2Qp Advice Of ChargeAoc List.
// Returns the index value of the Hotspot20H2Qp Advice Of ChargeAoc List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-advice-of-charge aoc-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20H2QpAdviceOfChargeAocList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-advice-of-charge/{h2qp-advice-of-charge}/aoc-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20H2QpAdviceOfChargeAocList API operation for FortiManager Device updates the specified Hotspot20H2Qp Advice Of ChargeAoc List.
// Returns the index value of the Hotspot20H2Qp Advice Of ChargeAoc List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-advice-of-charge aoc-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20H2QpAdviceOfChargeAocList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-advice-of-charge/{h2qp-advice-of-charge}/aoc-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20H2QpAdviceOfChargeAocList API operation for FortiManager Device deletes the specified Hotspot20H2Qp Advice Of ChargeAoc List.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-advice-of-charge aoc-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20H2QpAdviceOfChargeAocList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-advice-of-charge/{h2qp-advice-of-charge}/aoc-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20H2QpAdviceOfChargeAocList API operation for FortiManager Device gets the Hotspot20H2Qp Advice Of ChargeAoc List
// with the specified index value.
// Returns the requested Hotspot20H2Qp Advice Of ChargeAoc List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-advice-of-charge aoc-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20H2QpAdviceOfChargeAocList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-advice-of-charge/{h2qp-advice-of-charge}/aoc-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo API operation for FortiManager Device creates a new Hotspot20H2Qp Advice Of ChargeAoc ListPlan Info.
// Returns the index value of the Hotspot20H2Qp Advice Of ChargeAoc ListPlan Info and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-advice-of-charge aoc-list plan-info chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-advice-of-charge/{h2qp-advice-of-charge}/aoc-list/{aoc-list}/plan-info"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo API operation for FortiManager Device updates the specified Hotspot20H2Qp Advice Of ChargeAoc ListPlan Info.
// Returns the index value of the Hotspot20H2Qp Advice Of ChargeAoc ListPlan Info and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-advice-of-charge aoc-list plan-info chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-advice-of-charge/{h2qp-advice-of-charge}/aoc-list/{aoc-list}/plan-info"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo API operation for FortiManager Device deletes the specified Hotspot20H2Qp Advice Of ChargeAoc ListPlan Info.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-advice-of-charge aoc-list plan-info chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-advice-of-charge/{h2qp-advice-of-charge}/aoc-list/{aoc-list}/plan-info"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo API operation for FortiManager Device gets the Hotspot20H2Qp Advice Of ChargeAoc ListPlan Info
// with the specified index value.
// Returns the requested Hotspot20H2Qp Advice Of ChargeAoc ListPlan Info value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-advice-of-charge aoc-list plan-info chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfo(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-advice-of-charge/{h2qp-advice-of-charge}/aoc-list/{aoc-list}/plan-info"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20H2QpConnCapability API operation for FortiManager Device creates a new Hotspot20H2Qp Conn Capability.
// Returns the index value of the Hotspot20H2Qp Conn Capability and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-conn-capability chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20H2QpConnCapability(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-conn-capability"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20H2QpConnCapability API operation for FortiManager Device updates the specified Hotspot20H2Qp Conn Capability.
// Returns the index value of the Hotspot20H2Qp Conn Capability and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-conn-capability chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20H2QpConnCapability(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-conn-capability"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20H2QpConnCapability API operation for FortiManager Device deletes the specified Hotspot20H2Qp Conn Capability.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-conn-capability chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20H2QpConnCapability(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-conn-capability"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20H2QpConnCapability API operation for FortiManager Device gets the Hotspot20H2Qp Conn Capability
// with the specified index value.
// Returns the requested Hotspot20H2Qp Conn Capability value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-conn-capability chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20H2QpConnCapability(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-conn-capability"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20H2QpOperatorName API operation for FortiManager Device creates a new Hotspot20H2Qp Operator Name.
// Returns the index value of the Hotspot20H2Qp Operator Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-operator-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20H2QpOperatorName(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-operator-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20H2QpOperatorName API operation for FortiManager Device updates the specified Hotspot20H2Qp Operator Name.
// Returns the index value of the Hotspot20H2Qp Operator Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-operator-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20H2QpOperatorName(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-operator-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20H2QpOperatorName API operation for FortiManager Device deletes the specified Hotspot20H2Qp Operator Name.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-operator-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20H2QpOperatorName(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-operator-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20H2QpOperatorName API operation for FortiManager Device gets the Hotspot20H2Qp Operator Name
// with the specified index value.
// Returns the requested Hotspot20H2Qp Operator Name value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-operator-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20H2QpOperatorName(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-operator-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20H2QpOperatorNameValueList API operation for FortiManager Device creates a new Hotspot20H2Qp Operator NameValue List.
// Returns the index value of the Hotspot20H2Qp Operator NameValue List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-operator-name value-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20H2QpOperatorNameValueList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-operator-name/{h2qp-operator-name}/value-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20H2QpOperatorNameValueList API operation for FortiManager Device updates the specified Hotspot20H2Qp Operator NameValue List.
// Returns the index value of the Hotspot20H2Qp Operator NameValue List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-operator-name value-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20H2QpOperatorNameValueList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-operator-name/{h2qp-operator-name}/value-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20H2QpOperatorNameValueList API operation for FortiManager Device deletes the specified Hotspot20H2Qp Operator NameValue List.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-operator-name value-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20H2QpOperatorNameValueList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-operator-name/{h2qp-operator-name}/value-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20H2QpOperatorNameValueList API operation for FortiManager Device gets the Hotspot20H2Qp Operator NameValue List
// with the specified index value.
// Returns the requested Hotspot20H2Qp Operator NameValue List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-operator-name value-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20H2QpOperatorNameValueList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-operator-name/{h2qp-operator-name}/value-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20H2QpOsuProvider API operation for FortiManager Device creates a new Hotspot20H2Qp Osu Provider.
// Returns the index value of the Hotspot20H2Qp Osu Provider and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20H2QpOsuProvider(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20H2QpOsuProvider API operation for FortiManager Device updates the specified Hotspot20H2Qp Osu Provider.
// Returns the index value of the Hotspot20H2Qp Osu Provider and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20H2QpOsuProvider(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20H2QpOsuProvider API operation for FortiManager Device deletes the specified Hotspot20H2Qp Osu Provider.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20H2QpOsuProvider(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20H2QpOsuProvider API operation for FortiManager Device gets the Hotspot20H2Qp Osu Provider
// with the specified index value.
// Returns the requested Hotspot20H2Qp Osu Provider value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20H2QpOsuProvider(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20H2QpOsuProviderNai API operation for FortiManager Device creates a new Hotspot20H2Qp Osu Provider Nai.
// Returns the index value of the Hotspot20H2Qp Osu Provider Nai and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider-nai chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20H2QpOsuProviderNai(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider-nai"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20H2QpOsuProviderNai API operation for FortiManager Device updates the specified Hotspot20H2Qp Osu Provider Nai.
// Returns the index value of the Hotspot20H2Qp Osu Provider Nai and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider-nai chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20H2QpOsuProviderNai(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider-nai"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20H2QpOsuProviderNai API operation for FortiManager Device deletes the specified Hotspot20H2Qp Osu Provider Nai.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider-nai chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20H2QpOsuProviderNai(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider-nai"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20H2QpOsuProviderNai API operation for FortiManager Device gets the Hotspot20H2Qp Osu Provider Nai
// with the specified index value.
// Returns the requested Hotspot20H2Qp Osu Provider Nai value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider-nai chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20H2QpOsuProviderNai(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider-nai"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20H2QpOsuProviderNaiNaiList API operation for FortiManager Device creates a new Hotspot20H2Qp Osu Provider NaiNai List.
// Returns the index value of the Hotspot20H2Qp Osu Provider NaiNai List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider-nai nai-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20H2QpOsuProviderNaiNaiList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider-nai/{h2qp-osu-provider-nai}/nai-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20H2QpOsuProviderNaiNaiList API operation for FortiManager Device updates the specified Hotspot20H2Qp Osu Provider NaiNai List.
// Returns the index value of the Hotspot20H2Qp Osu Provider NaiNai List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider-nai nai-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20H2QpOsuProviderNaiNaiList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider-nai/{h2qp-osu-provider-nai}/nai-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20H2QpOsuProviderNaiNaiList API operation for FortiManager Device deletes the specified Hotspot20H2Qp Osu Provider NaiNai List.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider-nai nai-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20H2QpOsuProviderNaiNaiList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider-nai/{h2qp-osu-provider-nai}/nai-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20H2QpOsuProviderNaiNaiList API operation for FortiManager Device gets the Hotspot20H2Qp Osu Provider NaiNai List
// with the specified index value.
// Returns the requested Hotspot20H2Qp Osu Provider NaiNai List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider-nai nai-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20H2QpOsuProviderNaiNaiList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider-nai/{h2qp-osu-provider-nai}/nai-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20H2QpOsuProviderFriendlyName API operation for FortiManager Device creates a new Hotspot20H2Qp Osu ProviderFriendly Name.
// Returns the index value of the Hotspot20H2Qp Osu ProviderFriendly Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider friendly-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20H2QpOsuProviderFriendlyName(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider/{h2qp-osu-provider}/friendly-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20H2QpOsuProviderFriendlyName API operation for FortiManager Device updates the specified Hotspot20H2Qp Osu ProviderFriendly Name.
// Returns the index value of the Hotspot20H2Qp Osu ProviderFriendly Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider friendly-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20H2QpOsuProviderFriendlyName(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider/{h2qp-osu-provider}/friendly-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20H2QpOsuProviderFriendlyName API operation for FortiManager Device deletes the specified Hotspot20H2Qp Osu ProviderFriendly Name.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider friendly-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20H2QpOsuProviderFriendlyName(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider/{h2qp-osu-provider}/friendly-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20H2QpOsuProviderFriendlyName API operation for FortiManager Device gets the Hotspot20H2Qp Osu ProviderFriendly Name
// with the specified index value.
// Returns the requested Hotspot20H2Qp Osu ProviderFriendly Name value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider friendly-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20H2QpOsuProviderFriendlyName(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider/{h2qp-osu-provider}/friendly-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20H2QpOsuProviderServiceDescription API operation for FortiManager Device creates a new Hotspot20H2Qp Osu ProviderService Description.
// Returns the index value of the Hotspot20H2Qp Osu ProviderService Description and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider service-description chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20H2QpOsuProviderServiceDescription(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider/{h2qp-osu-provider}/service-description"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20H2QpOsuProviderServiceDescription API operation for FortiManager Device updates the specified Hotspot20H2Qp Osu ProviderService Description.
// Returns the index value of the Hotspot20H2Qp Osu ProviderService Description and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider service-description chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20H2QpOsuProviderServiceDescription(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider/{h2qp-osu-provider}/service-description"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20H2QpOsuProviderServiceDescription API operation for FortiManager Device deletes the specified Hotspot20H2Qp Osu ProviderService Description.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider service-description chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20H2QpOsuProviderServiceDescription(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider/{h2qp-osu-provider}/service-description"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20H2QpOsuProviderServiceDescription API operation for FortiManager Device gets the Hotspot20H2Qp Osu ProviderService Description
// with the specified index value.
// Returns the requested Hotspot20H2Qp Osu ProviderService Description value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-osu-provider service-description chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20H2QpOsuProviderServiceDescription(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-osu-provider/{h2qp-osu-provider}/service-description"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20H2QpTermsAndConditions API operation for FortiManager Device creates a new Hotspot20H2Qp Terms And Conditions.
// Returns the index value of the Hotspot20H2Qp Terms And Conditions and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-terms-and-conditions chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20H2QpTermsAndConditions(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-terms-and-conditions"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20H2QpTermsAndConditions API operation for FortiManager Device updates the specified Hotspot20H2Qp Terms And Conditions.
// Returns the index value of the Hotspot20H2Qp Terms And Conditions and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-terms-and-conditions chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20H2QpTermsAndConditions(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-terms-and-conditions"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20H2QpTermsAndConditions API operation for FortiManager Device deletes the specified Hotspot20H2Qp Terms And Conditions.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-terms-and-conditions chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20H2QpTermsAndConditions(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-terms-and-conditions"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20H2QpTermsAndConditions API operation for FortiManager Device gets the Hotspot20H2Qp Terms And Conditions
// with the specified index value.
// Returns the requested Hotspot20H2Qp Terms And Conditions value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-terms-and-conditions chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20H2QpTermsAndConditions(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-terms-and-conditions"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20H2QpWanMetric API operation for FortiManager Device creates a new Hotspot20H2Qp Wan Metric.
// Returns the index value of the Hotspot20H2Qp Wan Metric and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-wan-metric chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20H2QpWanMetric(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-wan-metric"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20H2QpWanMetric API operation for FortiManager Device updates the specified Hotspot20H2Qp Wan Metric.
// Returns the index value of the Hotspot20H2Qp Wan Metric and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-wan-metric chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20H2QpWanMetric(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-wan-metric"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20H2QpWanMetric API operation for FortiManager Device deletes the specified Hotspot20H2Qp Wan Metric.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-wan-metric chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20H2QpWanMetric(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-wan-metric"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20H2QpWanMetric API operation for FortiManager Device gets the Hotspot20H2Qp Wan Metric
// with the specified index value.
// Returns the requested Hotspot20H2Qp Wan Metric value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 h2qp-wan-metric chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20H2QpWanMetric(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/h2qp-wan-metric"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20HsProfile API operation for FortiManager Device creates a new Hotspot20Hs Profile.
// Returns the index value of the Hotspot20Hs Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 hs-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20HsProfile(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/hs-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20HsProfile API operation for FortiManager Device updates the specified Hotspot20Hs Profile.
// Returns the index value of the Hotspot20Hs Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 hs-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20HsProfile(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/hs-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20HsProfile API operation for FortiManager Device deletes the specified Hotspot20Hs Profile.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 hs-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20HsProfile(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/hs-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20HsProfile API operation for FortiManager Device gets the Hotspot20Hs Profile
// with the specified index value.
// Returns the requested Hotspot20Hs Profile value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 hs-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20HsProfile(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/hs-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20Icon API operation for FortiManager Device creates a new Hotspot20Icon.
// Returns the index value of the Hotspot20Icon and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 icon chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20Icon(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/icon"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20Icon API operation for FortiManager Device updates the specified Hotspot20Icon.
// Returns the index value of the Hotspot20Icon and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 icon chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20Icon(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/icon"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20Icon API operation for FortiManager Device deletes the specified Hotspot20Icon.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 icon chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20Icon(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/icon"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20Icon API operation for FortiManager Device gets the Hotspot20Icon
// with the specified index value.
// Returns the requested Hotspot20Icon value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 icon chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20Icon(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/icon"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20IconIconList API operation for FortiManager Device creates a new Hotspot20IconIcon List.
// Returns the index value of the Hotspot20IconIcon List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 icon icon-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20IconIconList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/icon/{icon}/icon-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20IconIconList API operation for FortiManager Device updates the specified Hotspot20IconIcon List.
// Returns the index value of the Hotspot20IconIcon List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 icon icon-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20IconIconList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/icon/{icon}/icon-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20IconIconList API operation for FortiManager Device deletes the specified Hotspot20IconIcon List.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 icon icon-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20IconIconList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/icon/{icon}/icon-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20IconIconList API operation for FortiManager Device gets the Hotspot20IconIcon List
// with the specified index value.
// Returns the requested Hotspot20IconIcon List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 icon icon-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20IconIconList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/icon/{icon}/icon-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20QosMap API operation for FortiManager Device creates a new Hotspot20Qos Map.
// Returns the index value of the Hotspot20Qos Map and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 qos-map chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20QosMap(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/qos-map"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20QosMap API operation for FortiManager Device updates the specified Hotspot20Qos Map.
// Returns the index value of the Hotspot20Qos Map and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 qos-map chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20QosMap(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/qos-map"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20QosMap API operation for FortiManager Device deletes the specified Hotspot20Qos Map.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 qos-map chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20QosMap(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/qos-map"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20QosMap API operation for FortiManager Device gets the Hotspot20Qos Map
// with the specified index value.
// Returns the requested Hotspot20Qos Map value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 qos-map chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20QosMap(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/qos-map"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20QosMapDscpExcept API operation for FortiManager Device creates a new Hotspot20Qos MapDscp Except.
// Returns the index value of the Hotspot20Qos MapDscp Except and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 qos-map dscp-except chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20QosMapDscpExcept(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/qos-map/{qos-map}/dscp-except"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20QosMapDscpExcept API operation for FortiManager Device updates the specified Hotspot20Qos MapDscp Except.
// Returns the index value of the Hotspot20Qos MapDscp Except and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 qos-map dscp-except chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20QosMapDscpExcept(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/qos-map/{qos-map}/dscp-except"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20QosMapDscpExcept API operation for FortiManager Device deletes the specified Hotspot20Qos MapDscp Except.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 qos-map dscp-except chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20QosMapDscpExcept(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/qos-map/{qos-map}/dscp-except"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20QosMapDscpExcept API operation for FortiManager Device gets the Hotspot20Qos MapDscp Except
// with the specified index value.
// Returns the requested Hotspot20Qos MapDscp Except value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 qos-map dscp-except chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20QosMapDscpExcept(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/qos-map/{qos-map}/dscp-except"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerHotspot20QosMapDscpRange API operation for FortiManager Device creates a new Hotspot20Qos MapDscp Range.
// Returns the index value of the Hotspot20Qos MapDscp Range and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 qos-map dscp-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerHotspot20QosMapDscpRange(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/qos-map/{qos-map}/dscp-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerHotspot20QosMapDscpRange API operation for FortiManager Device updates the specified Hotspot20Qos MapDscp Range.
// Returns the index value of the Hotspot20Qos MapDscp Range and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 qos-map dscp-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerHotspot20QosMapDscpRange(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/qos-map/{qos-map}/dscp-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerHotspot20QosMapDscpRange API operation for FortiManager Device deletes the specified Hotspot20Qos MapDscp Range.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 qos-map dscp-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerHotspot20QosMapDscpRange(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/qos-map/{qos-map}/dscp-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerHotspot20QosMapDscpRange API operation for FortiManager Device gets the Hotspot20Qos MapDscp Range
// with the specified index value.
// Returns the requested Hotspot20Qos MapDscp Range value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller hotspot20 qos-map dscp-range chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerHotspot20QosMapDscpRange(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/hotspot20/qos-map/{qos-map}/dscp-range"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerInterController API operation for FortiManager Device updates the specified Inter Controller.
// Returns the index value of the Inter Controller and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller inter-controller chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerInterController(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wireless-controller/inter-controller"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerInterController API operation for FortiManager Device deletes the specified Inter Controller.
// Returns error for service API and SDK errors.
// See the device - wireless-controller inter-controller chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerInterController(mkey string, paradict map[string]string) (err error) {

	//No unset API for wireless-controller - inter-controller
	return
}

// ReadWirelessControllerInterController API operation for FortiManager Device gets the Inter Controller
// with the specified index value.
// Returns the requested Inter Controller value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller inter-controller chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerInterController(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wireless-controller/inter-controller"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerInterControllerInterControllerPeer API operation for FortiManager Device creates a new Inter ControllerInter Controller Peer.
// Returns the index value of the Inter ControllerInter Controller Peer and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller inter-controller inter-controller-peer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerInterControllerInterControllerPeer(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wireless-controller/inter-controller/inter-controller-peer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerInterControllerInterControllerPeer API operation for FortiManager Device updates the specified Inter ControllerInter Controller Peer.
// Returns the index value of the Inter ControllerInter Controller Peer and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller inter-controller inter-controller-peer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerInterControllerInterControllerPeer(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wireless-controller/inter-controller/inter-controller-peer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerInterControllerInterControllerPeer API operation for FortiManager Device deletes the specified Inter ControllerInter Controller Peer.
// Returns error for service API and SDK errors.
// See the device - wireless-controller inter-controller inter-controller-peer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerInterControllerInterControllerPeer(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/global/wireless-controller/inter-controller/inter-controller-peer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerInterControllerInterControllerPeer API operation for FortiManager Device gets the Inter ControllerInter Controller Peer
// with the specified index value.
// Returns the requested Inter ControllerInter Controller Peer value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller inter-controller inter-controller-peer chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerInterControllerInterControllerPeer(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wireless-controller/inter-controller/inter-controller-peer"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerLog API operation for FortiManager Device updates the specified Log.
// Returns the index value of the Log and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller log chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerLog(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/log"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerLog API operation for FortiManager Device deletes the specified Log.
// Returns error for service API and SDK errors.
// See the device - wireless-controller log chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerLog(mkey string, paradict map[string]string) (err error) {

	//No unset API for wireless-controller - log
	return
}

// ReadWirelessControllerLog API operation for FortiManager Device gets the Log
// with the specified index value.
// Returns the requested Log value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller log chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerLog(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/log"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerMpskProfile API operation for FortiManager Device creates a new Mpsk Profile.
// Returns the index value of the Mpsk Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller mpsk-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerMpskProfile(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/mpsk-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerMpskProfile API operation for FortiManager Device updates the specified Mpsk Profile.
// Returns the index value of the Mpsk Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller mpsk-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerMpskProfile(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/mpsk-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerMpskProfile API operation for FortiManager Device deletes the specified Mpsk Profile.
// Returns error for service API and SDK errors.
// See the device - wireless-controller mpsk-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerMpskProfile(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/mpsk-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerMpskProfile API operation for FortiManager Device gets the Mpsk Profile
// with the specified index value.
// Returns the requested Mpsk Profile value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller mpsk-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerMpskProfile(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/mpsk-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerMpskProfileMpskGroup API operation for FortiManager Device creates a new Mpsk ProfileMpsk Group.
// Returns the index value of the Mpsk ProfileMpsk Group and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller mpsk-profile mpsk-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerMpskProfileMpskGroup(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/mpsk-profile/{mpsk-profile}/mpsk-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerMpskProfileMpskGroup API operation for FortiManager Device updates the specified Mpsk ProfileMpsk Group.
// Returns the index value of the Mpsk ProfileMpsk Group and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller mpsk-profile mpsk-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerMpskProfileMpskGroup(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/mpsk-profile/{mpsk-profile}/mpsk-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerMpskProfileMpskGroup API operation for FortiManager Device deletes the specified Mpsk ProfileMpsk Group.
// Returns error for service API and SDK errors.
// See the device - wireless-controller mpsk-profile mpsk-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerMpskProfileMpskGroup(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/mpsk-profile/{mpsk-profile}/mpsk-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerMpskProfileMpskGroup API operation for FortiManager Device gets the Mpsk ProfileMpsk Group
// with the specified index value.
// Returns the requested Mpsk ProfileMpsk Group value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller mpsk-profile mpsk-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerMpskProfileMpskGroup(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/mpsk-profile/{mpsk-profile}/mpsk-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerMpskProfileMpskGroupMpskKey API operation for FortiManager Device creates a new Mpsk ProfileMpsk GroupMpsk Key.
// Returns the index value of the Mpsk ProfileMpsk GroupMpsk Key and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller mpsk-profile mpsk-group mpsk-key chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerMpskProfileMpskGroupMpskKey(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/mpsk-profile/{mpsk-profile}/mpsk-group/{mpsk-group}/mpsk-key"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerMpskProfileMpskGroupMpskKey API operation for FortiManager Device updates the specified Mpsk ProfileMpsk GroupMpsk Key.
// Returns the index value of the Mpsk ProfileMpsk GroupMpsk Key and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller mpsk-profile mpsk-group mpsk-key chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerMpskProfileMpskGroupMpskKey(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/mpsk-profile/{mpsk-profile}/mpsk-group/{mpsk-group}/mpsk-key"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerMpskProfileMpskGroupMpskKey API operation for FortiManager Device deletes the specified Mpsk ProfileMpsk GroupMpsk Key.
// Returns error for service API and SDK errors.
// See the device - wireless-controller mpsk-profile mpsk-group mpsk-key chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerMpskProfileMpskGroupMpskKey(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/mpsk-profile/{mpsk-profile}/mpsk-group/{mpsk-group}/mpsk-key"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerMpskProfileMpskGroupMpskKey API operation for FortiManager Device gets the Mpsk ProfileMpsk GroupMpsk Key
// with the specified index value.
// Returns the requested Mpsk ProfileMpsk GroupMpsk Key value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller mpsk-profile mpsk-group mpsk-key chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerMpskProfileMpskGroupMpskKey(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/mpsk-profile/{mpsk-profile}/mpsk-group/{mpsk-group}/mpsk-key"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerNacProfile API operation for FortiManager Device creates a new Nac Profile.
// Returns the index value of the Nac Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller nac-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerNacProfile(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/nac-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerNacProfile API operation for FortiManager Device updates the specified Nac Profile.
// Returns the index value of the Nac Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller nac-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerNacProfile(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/nac-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerNacProfile API operation for FortiManager Device deletes the specified Nac Profile.
// Returns error for service API and SDK errors.
// See the device - wireless-controller nac-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerNacProfile(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/nac-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerNacProfile API operation for FortiManager Device gets the Nac Profile
// with the specified index value.
// Returns the requested Nac Profile value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller nac-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerNacProfile(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/nac-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerQosProfile API operation for FortiManager Device creates a new Qos Profile.
// Returns the index value of the Qos Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller qos-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerQosProfile(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/qos-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerQosProfile API operation for FortiManager Device updates the specified Qos Profile.
// Returns the index value of the Qos Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller qos-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerQosProfile(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/qos-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerQosProfile API operation for FortiManager Device deletes the specified Qos Profile.
// Returns error for service API and SDK errors.
// See the device - wireless-controller qos-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerQosProfile(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/qos-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerQosProfile API operation for FortiManager Device gets the Qos Profile
// with the specified index value.
// Returns the requested Qos Profile value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller qos-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerQosProfile(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/qos-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerRegion API operation for FortiManager Device creates a new Region.
// Returns the index value of the Region and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller region chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerRegion(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/region"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerRegion API operation for FortiManager Device updates the specified Region.
// Returns the index value of the Region and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller region chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerRegion(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/region"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerRegion API operation for FortiManager Device deletes the specified Region.
// Returns error for service API and SDK errors.
// See the device - wireless-controller region chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerRegion(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/region"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerRegion API operation for FortiManager Device gets the Region
// with the specified index value.
// Returns the requested Region value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller region chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerRegion(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/region"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerSetting API operation for FortiManager Device updates the specified Setting.
// Returns the index value of the Setting and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerSetting(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerSetting API operation for FortiManager Device deletes the specified Setting.
// Returns error for service API and SDK errors.
// See the device - wireless-controller setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerSetting(mkey string, paradict map[string]string) (err error) {

	//No unset API for wireless-controller - setting
	return
}

// ReadWirelessControllerSetting API operation for FortiManager Device gets the Setting
// with the specified index value.
// Returns the requested Setting value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller setting chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerSetting(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/setting"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerSettingOffendingSsid API operation for FortiManager Device creates a new SettingOffending Ssid.
// Returns the index value of the SettingOffending Ssid and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller setting offending-ssid chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerSettingOffendingSsid(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/setting/offending-ssid"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerSettingOffendingSsid API operation for FortiManager Device updates the specified SettingOffending Ssid.
// Returns the index value of the SettingOffending Ssid and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller setting offending-ssid chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerSettingOffendingSsid(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/setting/offending-ssid"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerSettingOffendingSsid API operation for FortiManager Device deletes the specified SettingOffending Ssid.
// Returns error for service API and SDK errors.
// See the device - wireless-controller setting offending-ssid chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerSettingOffendingSsid(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/setting/offending-ssid"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerSettingOffendingSsid API operation for FortiManager Device gets the SettingOffending Ssid
// with the specified index value.
// Returns the requested SettingOffending Ssid value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller setting offending-ssid chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerSettingOffendingSsid(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/setting/offending-ssid"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerSnmp API operation for FortiManager Device updates the specified Snmp.
// Returns the index value of the Snmp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller snmp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerSnmp(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/snmp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerSnmp API operation for FortiManager Device deletes the specified Snmp.
// Returns error for service API and SDK errors.
// See the device - wireless-controller snmp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerSnmp(mkey string, paradict map[string]string) (err error) {

	//No unset API for wireless-controller - snmp
	return
}

// ReadWirelessControllerSnmp API operation for FortiManager Device gets the Snmp
// with the specified index value.
// Returns the requested Snmp value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller snmp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerSnmp(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/snmp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerSnmpCommunity API operation for FortiManager Device creates a new SnmpCommunity.
// Returns the index value of the SnmpCommunity and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller snmp community chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerSnmpCommunity(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/snmp/community"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerSnmpCommunity API operation for FortiManager Device updates the specified SnmpCommunity.
// Returns the index value of the SnmpCommunity and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller snmp community chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerSnmpCommunity(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/snmp/community"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerSnmpCommunity API operation for FortiManager Device deletes the specified SnmpCommunity.
// Returns error for service API and SDK errors.
// See the device - wireless-controller snmp community chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerSnmpCommunity(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/snmp/community"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerSnmpCommunity API operation for FortiManager Device gets the SnmpCommunity
// with the specified index value.
// Returns the requested SnmpCommunity value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller snmp community chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerSnmpCommunity(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/snmp/community"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerSnmpCommunityHosts API operation for FortiManager Device creates a new SnmpCommunityHosts.
// Returns the index value of the SnmpCommunityHosts and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller snmp community hosts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerSnmpCommunityHosts(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/snmp/community/{community}/hosts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerSnmpCommunityHosts API operation for FortiManager Device updates the specified SnmpCommunityHosts.
// Returns the index value of the SnmpCommunityHosts and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller snmp community hosts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerSnmpCommunityHosts(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/snmp/community/{community}/hosts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerSnmpCommunityHosts API operation for FortiManager Device deletes the specified SnmpCommunityHosts.
// Returns error for service API and SDK errors.
// See the device - wireless-controller snmp community hosts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerSnmpCommunityHosts(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/snmp/community/{community}/hosts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerSnmpCommunityHosts API operation for FortiManager Device gets the SnmpCommunityHosts
// with the specified index value.
// Returns the requested SnmpCommunityHosts value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller snmp community hosts chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerSnmpCommunityHosts(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/snmp/community/{community}/hosts"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerSnmpUser API operation for FortiManager Device creates a new SnmpUser.
// Returns the index value of the SnmpUser and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller snmp user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerSnmpUser(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/snmp/user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerSnmpUser API operation for FortiManager Device updates the specified SnmpUser.
// Returns the index value of the SnmpUser and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller snmp user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerSnmpUser(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/snmp/user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerSnmpUser API operation for FortiManager Device deletes the specified SnmpUser.
// Returns error for service API and SDK errors.
// See the device - wireless-controller snmp user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerSnmpUser(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/snmp/user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerSnmpUser API operation for FortiManager Device gets the SnmpUser
// with the specified index value.
// Returns the requested SnmpUser value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller snmp user chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerSnmpUser(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/snmp/user"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerSsidPolicy API operation for FortiManager Device creates a new Ssid Policy.
// Returns the index value of the Ssid Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller ssid-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerSsidPolicy(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/ssid-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerSsidPolicy API operation for FortiManager Device updates the specified Ssid Policy.
// Returns the index value of the Ssid Policy and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller ssid-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerSsidPolicy(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/ssid-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerSsidPolicy API operation for FortiManager Device deletes the specified Ssid Policy.
// Returns error for service API and SDK errors.
// See the device - wireless-controller ssid-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerSsidPolicy(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/ssid-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerSsidPolicy API operation for FortiManager Device gets the Ssid Policy
// with the specified index value.
// Returns the requested Ssid Policy value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller ssid-policy chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerSsidPolicy(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/ssid-policy"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerSyslogProfile API operation for FortiManager Device creates a new Syslog Profile.
// Returns the index value of the Syslog Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller syslog-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerSyslogProfile(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/syslog-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerSyslogProfile API operation for FortiManager Device updates the specified Syslog Profile.
// Returns the index value of the Syslog Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller syslog-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerSyslogProfile(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/syslog-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerSyslogProfile API operation for FortiManager Device deletes the specified Syslog Profile.
// Returns error for service API and SDK errors.
// See the device - wireless-controller syslog-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerSyslogProfile(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/syslog-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerSyslogProfile API operation for FortiManager Device gets the Syslog Profile
// with the specified index value.
// Returns the requested Syslog Profile value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller syslog-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerSyslogProfile(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/syslog-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerTimers API operation for FortiManager Device updates the specified Timers.
// Returns the index value of the Timers and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller timers chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerTimers(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wireless-controller/timers"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerTimers API operation for FortiManager Device deletes the specified Timers.
// Returns error for service API and SDK errors.
// See the device - wireless-controller timers chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerTimers(mkey string, paradict map[string]string) (err error) {

	//No unset API for wireless-controller - timers
	return
}

// ReadWirelessControllerTimers API operation for FortiManager Device gets the Timers
// with the specified index value.
// Returns the requested Timers value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller timers chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerTimers(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/global/wireless-controller/timers"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerUtmProfile API operation for FortiManager Device creates a new Utm Profile.
// Returns the index value of the Utm Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller utm-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerUtmProfile(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/utm-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerUtmProfile API operation for FortiManager Device updates the specified Utm Profile.
// Returns the index value of the Utm Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller utm-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerUtmProfile(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/utm-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerUtmProfile API operation for FortiManager Device deletes the specified Utm Profile.
// Returns error for service API and SDK errors.
// See the device - wireless-controller utm-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerUtmProfile(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/utm-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerUtmProfile API operation for FortiManager Device gets the Utm Profile
// with the specified index value.
// Returns the requested Utm Profile value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller utm-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerUtmProfile(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/utm-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerVap API operation for FortiManager Device creates a new Vap.
// Returns the index value of the Vap and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller vap chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerVap(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/vap"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerVap API operation for FortiManager Device updates the specified Vap.
// Returns the index value of the Vap and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller vap chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerVap(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/vap"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerVap API operation for FortiManager Device deletes the specified Vap.
// Returns error for service API and SDK errors.
// See the device - wireless-controller vap chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerVap(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/vap"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerVap API operation for FortiManager Device gets the Vap
// with the specified index value.
// Returns the requested Vap value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller vap chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerVap(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/vap"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerVapGroup API operation for FortiManager Device creates a new Vap Group.
// Returns the index value of the Vap Group and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller vap-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerVapGroup(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/vap-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerVapGroup API operation for FortiManager Device updates the specified Vap Group.
// Returns the index value of the Vap Group and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller vap-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerVapGroup(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/vap-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerVapGroup API operation for FortiManager Device deletes the specified Vap Group.
// Returns error for service API and SDK errors.
// See the device - wireless-controller vap-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerVapGroup(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/vap-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerVapGroup API operation for FortiManager Device gets the Vap Group
// with the specified index value.
// Returns the requested Vap Group value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller vap-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerVapGroup(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/vap-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerVapPortalMessageOverrides API operation for FortiManager Device updates the specified VapPortal Message Overrides.
// Returns the index value of the VapPortal Message Overrides and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller vap portal-message-overrides chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerVapPortalMessageOverrides(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/vap/{vap}/portal-message-overrides"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerVapPortalMessageOverrides API operation for FortiManager Device deletes the specified VapPortal Message Overrides.
// Returns error for service API and SDK errors.
// See the device - wireless-controller vap portal-message-overrides chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerVapPortalMessageOverrides(mkey string, paradict map[string]string) (err error) {

	//No unset API for wireless-controller - vap portal-message-overrides
	return
}

// ReadWirelessControllerVapPortalMessageOverrides API operation for FortiManager Device gets the VapPortal Message Overrides
// with the specified index value.
// Returns the requested VapPortal Message Overrides value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller vap portal-message-overrides chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerVapPortalMessageOverrides(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/vap/{vap}/portal-message-overrides"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerVapVlanName API operation for FortiManager Device creates a new VapVlan Name.
// Returns the index value of the VapVlan Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller vap vlan-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerVapVlanName(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/vap/{vap}/vlan-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerVapVlanName API operation for FortiManager Device updates the specified VapVlan Name.
// Returns the index value of the VapVlan Name and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller vap vlan-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerVapVlanName(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/vap/{vap}/vlan-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerVapVlanName API operation for FortiManager Device deletes the specified VapVlan Name.
// Returns error for service API and SDK errors.
// See the device - wireless-controller vap vlan-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerVapVlanName(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/vap/{vap}/vlan-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerVapVlanName API operation for FortiManager Device gets the VapVlan Name
// with the specified index value.
// Returns the requested VapVlan Name value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller vap vlan-name chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerVapVlanName(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/vap/{vap}/vlan-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerVapVlanNameMove API operation for FortiManager Device updates the specified VapVlan NameMove.
// Returns the index value of the VapVlan NameMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller vap vlan-name move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerVapVlanNameMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/vap/{vap}/vlan-name/{vlan-name}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadWirelessControllerVapVlanNameMove API operation for FortiManager Device gets the VapVlan NameMove
// with the specified index value.
// Returns the requested VapVlan NameMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller vap vlan-name move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerVapVlanNameMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/vap/{vap}/vlan-name"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"name"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// CreateWirelessControllerWagProfile API operation for FortiManager Device creates a new Wag Profile.
// Returns the index value of the Wag Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wag-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerWagProfile(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wag-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerWagProfile API operation for FortiManager Device updates the specified Wag Profile.
// Returns the index value of the Wag Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wag-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerWagProfile(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wag-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerWagProfile API operation for FortiManager Device deletes the specified Wag Profile.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wag-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerWagProfile(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wag-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerWagProfile API operation for FortiManager Device gets the Wag Profile
// with the specified index value.
// Returns the requested Wag Profile value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wag-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerWagProfile(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wag-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerWidsProfile API operation for FortiManager Device creates a new Wids Profile.
// Returns the index value of the Wids Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wids-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerWidsProfile(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wids-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerWidsProfile API operation for FortiManager Device updates the specified Wids Profile.
// Returns the index value of the Wids Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wids-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerWidsProfile(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wids-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerWidsProfile API operation for FortiManager Device deletes the specified Wids Profile.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wids-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerWidsProfile(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wids-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerWidsProfile API operation for FortiManager Device gets the Wids Profile
// with the specified index value.
// Returns the requested Wids Profile value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wids-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerWidsProfile(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wids-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerWtp API operation for FortiManager Device creates a new Wtp.
// Returns the index value of the Wtp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerWtp(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerWtp API operation for FortiManager Device updates the specified Wtp.
// Returns the index value of the Wtp and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerWtp(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerWtp API operation for FortiManager Device deletes the specified Wtp.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerWtp(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerWtp API operation for FortiManager Device gets the Wtp
// with the specified index value.
// Returns the requested Wtp value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerWtp(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerWtpGroup API operation for FortiManager Device creates a new Wtp Group.
// Returns the index value of the Wtp Group and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerWtpGroup(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerWtpGroup API operation for FortiManager Device updates the specified Wtp Group.
// Returns the index value of the Wtp Group and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerWtpGroup(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerWtpGroup API operation for FortiManager Device deletes the specified Wtp Group.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerWtpGroup(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerWtpGroup API operation for FortiManager Device gets the Wtp Group
// with the specified index value.
// Returns the requested Wtp Group value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-group chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerWtpGroup(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-group"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerWtpProfile API operation for FortiManager Device creates a new Wtp Profile.
// Returns the index value of the Wtp Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerWtpProfile(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerWtpProfile API operation for FortiManager Device updates the specified Wtp Profile.
// Returns the index value of the Wtp Profile and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerWtpProfile(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerWtpProfile API operation for FortiManager Device deletes the specified Wtp Profile.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerWtpProfile(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerWtpProfile API operation for FortiManager Device gets the Wtp Profile
// with the specified index value.
// Returns the requested Wtp Profile value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerWtpProfile(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerWtpProfileDenyMacList API operation for FortiManager Device creates a new Wtp ProfileDeny Mac List.
// Returns the index value of the Wtp ProfileDeny Mac List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile deny-mac-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerWtpProfileDenyMacList(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile/{wtp-profile}/deny-mac-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerWtpProfileDenyMacList API operation for FortiManager Device updates the specified Wtp ProfileDeny Mac List.
// Returns the index value of the Wtp ProfileDeny Mac List and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile deny-mac-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerWtpProfileDenyMacList(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile/{wtp-profile}/deny-mac-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerWtpProfileDenyMacList API operation for FortiManager Device deletes the specified Wtp ProfileDeny Mac List.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile deny-mac-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerWtpProfileDenyMacList(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile/{wtp-profile}/deny-mac-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerWtpProfileDenyMacList API operation for FortiManager Device gets the Wtp ProfileDeny Mac List
// with the specified index value.
// Returns the requested Wtp ProfileDeny Mac List value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile deny-mac-list chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerWtpProfileDenyMacList(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile/{wtp-profile}/deny-mac-list"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerWtpProfileEslSesDongle API operation for FortiManager Device updates the specified Wtp ProfileEsl Ses Dongle.
// Returns the index value of the Wtp ProfileEsl Ses Dongle and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile esl-ses-dongle chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerWtpProfileEslSesDongle(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile/{wtp-profile}/esl-ses-dongle"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerWtpProfileEslSesDongle API operation for FortiManager Device deletes the specified Wtp ProfileEsl Ses Dongle.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile esl-ses-dongle chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerWtpProfileEslSesDongle(mkey string, paradict map[string]string) (err error) {

	//No unset API for wireless-controller - wtp-profile esl-ses-dongle
	return
}

// ReadWirelessControllerWtpProfileEslSesDongle API operation for FortiManager Device gets the Wtp ProfileEsl Ses Dongle
// with the specified index value.
// Returns the requested Wtp ProfileEsl Ses Dongle value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile esl-ses-dongle chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerWtpProfileEslSesDongle(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile/{wtp-profile}/esl-ses-dongle"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerWtpProfileLbs API operation for FortiManager Device updates the specified Wtp ProfileLbs.
// Returns the index value of the Wtp ProfileLbs and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile lbs chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerWtpProfileLbs(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile/{wtp-profile}/lbs"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerWtpProfileLbs API operation for FortiManager Device deletes the specified Wtp ProfileLbs.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile lbs chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerWtpProfileLbs(mkey string, paradict map[string]string) (err error) {

	//No unset API for wireless-controller - wtp-profile lbs
	return
}

// ReadWirelessControllerWtpProfileLbs API operation for FortiManager Device gets the Wtp ProfileLbs
// with the specified index value.
// Returns the requested Wtp ProfileLbs value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile lbs chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerWtpProfileLbs(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile/{wtp-profile}/lbs"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerWtpProfilePlatform API operation for FortiManager Device updates the specified Wtp ProfilePlatform.
// Returns the index value of the Wtp ProfilePlatform and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile platform chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerWtpProfilePlatform(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile/{wtp-profile}/platform"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerWtpProfilePlatform API operation for FortiManager Device deletes the specified Wtp ProfilePlatform.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile platform chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerWtpProfilePlatform(mkey string, paradict map[string]string) (err error) {

	//No unset API for wireless-controller - wtp-profile platform
	return
}

// ReadWirelessControllerWtpProfilePlatform API operation for FortiManager Device gets the Wtp ProfilePlatform
// with the specified index value.
// Returns the requested Wtp ProfilePlatform value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile platform chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerWtpProfilePlatform(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile/{wtp-profile}/platform"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerWtpProfileRadio1 API operation for FortiManager Device updates the specified Wtp ProfileRadio 1.
// Returns the index value of the Wtp ProfileRadio 1 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile radio-1 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerWtpProfileRadio1(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile/{wtp-profile}/radio-1"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerWtpProfileRadio1 API operation for FortiManager Device deletes the specified Wtp ProfileRadio 1.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile radio-1 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerWtpProfileRadio1(mkey string, paradict map[string]string) (err error) {

	//No unset API for wireless-controller - wtp-profile radio-1
	return
}

// ReadWirelessControllerWtpProfileRadio1 API operation for FortiManager Device gets the Wtp ProfileRadio 1
// with the specified index value.
// Returns the requested Wtp ProfileRadio 1 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile radio-1 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerWtpProfileRadio1(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile/{wtp-profile}/radio-1"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerWtpProfileRadio2 API operation for FortiManager Device updates the specified Wtp ProfileRadio 2.
// Returns the index value of the Wtp ProfileRadio 2 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile radio-2 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerWtpProfileRadio2(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile/{wtp-profile}/radio-2"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerWtpProfileRadio2 API operation for FortiManager Device deletes the specified Wtp ProfileRadio 2.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile radio-2 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerWtpProfileRadio2(mkey string, paradict map[string]string) (err error) {

	//No unset API for wireless-controller - wtp-profile radio-2
	return
}

// ReadWirelessControllerWtpProfileRadio2 API operation for FortiManager Device gets the Wtp ProfileRadio 2
// with the specified index value.
// Returns the requested Wtp ProfileRadio 2 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile radio-2 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerWtpProfileRadio2(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile/{wtp-profile}/radio-2"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// CreateWirelessControllerWtpProfileSplitTunnelingAcl API operation for FortiManager Device creates a new Wtp ProfileSplit Tunneling Acl.
// Returns the index value of the Wtp ProfileSplit Tunneling Acl and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile split-tunneling-acl chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) CreateWirelessControllerWtpProfileSplitTunnelingAcl(params *map[string]interface{}, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile/{wtp-profile}/split-tunneling-acl"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "add", params, false)
	return
}

// UpdateWirelessControllerWtpProfileSplitTunnelingAcl API operation for FortiManager Device updates the specified Wtp ProfileSplit Tunneling Acl.
// Returns the index value of the Wtp ProfileSplit Tunneling Acl and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile split-tunneling-acl chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerWtpProfileSplitTunnelingAcl(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile/{wtp-profile}/split-tunneling-acl"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerWtpProfileSplitTunnelingAcl API operation for FortiManager Device deletes the specified Wtp ProfileSplit Tunneling Acl.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile split-tunneling-acl chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerWtpProfileSplitTunnelingAcl(mkey string, paradict map[string]string) (err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile/{wtp-profile}/split-tunneling-acl"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	err = delete(c, path, "delete", false)
	return
}

// ReadWirelessControllerWtpProfileSplitTunnelingAcl API operation for FortiManager Device gets the Wtp ProfileSplit Tunneling Acl
// with the specified index value.
// Returns the requested Wtp ProfileSplit Tunneling Acl value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp-profile split-tunneling-acl chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerWtpProfileSplitTunnelingAcl(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp-profile/{wtp-profile}/split-tunneling-acl"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	path += "/" + escapeURLString(mkey)

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerWtpLan API operation for FortiManager Device updates the specified WtpLan.
// Returns the index value of the WtpLan and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp lan chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerWtpLan(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp/{wtp}/lan"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerWtpLan API operation for FortiManager Device deletes the specified WtpLan.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp lan chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerWtpLan(mkey string, paradict map[string]string) (err error) {

	//No unset API for wireless-controller - wtp lan
	return
}

// ReadWirelessControllerWtpLan API operation for FortiManager Device gets the WtpLan
// with the specified index value.
// Returns the requested WtpLan value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp lan chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerWtpLan(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp/{wtp}/lan"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerWtpMove API operation for FortiManager Device updates the specified WtpMove.
// Returns the index value of the WtpMove and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerWtpMove(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp/{wtp}"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "move", params, true)
	return
}

// ReadWirelessControllerWtpMove API operation for FortiManager Device gets the WtpMove
// with the specified index value.
// Returns the requested WtpMove value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp move chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerWtpMove(mkey string, paradict map[string]string) (listTmp []interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	params := map[string]interface{}{
		"fields": []string{"wtp-id"},
	}
	listTmp, err = readMove(c, path, "get", &params, true)
	return
}

// UpdateWirelessControllerWtpRadio1 API operation for FortiManager Device updates the specified WtpRadio 1.
// Returns the index value of the WtpRadio 1 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp radio-1 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerWtpRadio1(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp/{wtp}/radio-1"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerWtpRadio1 API operation for FortiManager Device deletes the specified WtpRadio 1.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp radio-1 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerWtpRadio1(mkey string, paradict map[string]string) (err error) {

	//No unset API for wireless-controller - wtp radio-1
	return
}

// ReadWirelessControllerWtpRadio1 API operation for FortiManager Device gets the WtpRadio 1
// with the specified index value.
// Returns the requested WtpRadio 1 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp radio-1 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerWtpRadio1(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp/{wtp}/radio-1"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerWtpRadio2 API operation for FortiManager Device updates the specified WtpRadio 2.
// Returns the index value of the WtpRadio 2 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp radio-2 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerWtpRadio2(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp/{wtp}/radio-2"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerWtpRadio2 API operation for FortiManager Device deletes the specified WtpRadio 2.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp radio-2 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerWtpRadio2(mkey string, paradict map[string]string) (err error) {

	//No unset API for wireless-controller - wtp radio-2
	return
}

// ReadWirelessControllerWtpRadio2 API operation for FortiManager Device gets the WtpRadio 2
// with the specified index value.
// Returns the requested WtpRadio 2 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp radio-2 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerWtpRadio2(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp/{wtp}/radio-2"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerWtpRadio3 API operation for FortiManager Device updates the specified WtpRadio 3.
// Returns the index value of the WtpRadio 3 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp radio-3 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerWtpRadio3(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp/{wtp}/radio-3"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerWtpRadio3 API operation for FortiManager Device deletes the specified WtpRadio 3.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp radio-3 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerWtpRadio3(mkey string, paradict map[string]string) (err error) {

	//No unset API for wireless-controller - wtp radio-3
	return
}

// ReadWirelessControllerWtpRadio3 API operation for FortiManager Device gets the WtpRadio 3
// with the specified index value.
// Returns the requested WtpRadio 3 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp radio-3 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerWtpRadio3(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp/{wtp}/radio-3"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}

// UpdateWirelessControllerWtpRadio4 API operation for FortiManager Device updates the specified WtpRadio 4.
// Returns the index value of the WtpRadio 4 and execution result when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp radio-4 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) UpdateWirelessControllerWtpRadio4(params *map[string]interface{}, mkey string, paradict map[string]string) (output map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp/{wtp}/radio-4"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	output, err = createUpdate(c, path, "set", params, false)
	return
}

// DeleteWirelessControllerWtpRadio4 API operation for FortiManager Device deletes the specified WtpRadio 4.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp radio-4 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) DeleteWirelessControllerWtpRadio4(mkey string, paradict map[string]string) (err error) {

	//No unset API for wireless-controller - wtp radio-4
	return
}

// ReadWirelessControllerWtpRadio4 API operation for FortiManager Device gets the WtpRadio 4
// with the specified index value.
// Returns the requested WtpRadio 4 value when the request executes successfully.
// Returns error for service API and SDK errors.
// See the device - wireless-controller wtp radio-4 chapter in the FortiManager Handbook - CLI Reference.
func (c *FortiSDKClient) ReadWirelessControllerWtpRadio4(mkey string, paradict map[string]string) (mapTmp map[string]interface{}, err error) {
	path := "/pm/config/device/{device}/vdom/{vdom}/wireless-controller/wtp/{wtp}/radio-4"
	path, err = replaceParaWithValue(path, paradict)
	if err != nil {
		return nil, fmt.Errorf("%v", err)
	}

	mapTmp, err = read(c, path, "get", false)
	return
}
