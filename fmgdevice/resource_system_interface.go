// Copyright 2024 Fortinet, Inc. All rights reserved.
// Author: Hongbin Lu (@fgtdev-hblu), Xing Li (@lix-fortinet)
// Documentation:
// Hongbin Lu (@fgtdev-hblu), Xing Li (@lix-fortinet), Yue Wang (@yuew-ftnt)

// Description: Configure interfaces.

package fmgdevice

import (
	"fmt"
	"log"
	"strconv"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
)

func resourceSystemInterface() *schema.Resource {
	return &schema.Resource{
		Create: resourceSystemInterfaceCreate,
		Read:   resourceSystemInterfaceRead,
		Update: resourceSystemInterfaceUpdate,
		Delete: resourceSystemInterfaceDelete,

		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{
			"autogenerated": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"device_name": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
			"ac_name": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"aggregate": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"aggregate_type": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"algorithm": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"alias": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"allowaccess": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"annex": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"ap_discover": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"arpforward": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"atm_protocol": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"auth_cert": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"auth_portal_addr": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"auth_type": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"auto_auth_extension_device": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"bandwidth_measure_time": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"bfd": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"bfd_desired_min_tx": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"bfd_detect_mult": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"bfd_required_min_rx": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"broadcast_forticlient_discovery": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"broadcast_forward": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"captive_portal": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"cli_conn_status": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"client_options": &schema.Schema{
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"code": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"id": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"ip": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"type": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"value": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},
			"color": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"dedicated_to": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"default_purdue_level": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"defaultgw": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"description": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"detected_peer_mtu": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"device_identification": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"device_user_identification": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"devindex": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"dhcp_broadcast_flag": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"dhcp_classless_route_addition": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"dhcp_client_identifier": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"dhcp_relay_agent_option": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"dhcp_relay_allow_no_end_option": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"dhcp_relay_circuit_id": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"dhcp_relay_interface": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"dhcp_relay_interface_select_method": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"dhcp_relay_ip": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"dhcp_relay_link_selection": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"dhcp_relay_request_all_server": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"dhcp_relay_service": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"dhcp_relay_source_ip": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"dhcp_relay_type": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"dhcp_relay_vrf_select": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"dhcp_renew_time": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"dhcp_smart_relay": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"dhcp_snooping_server_list": &schema.Schema{
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
						"server_ip": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
					},
				},
			},
			"disc_retry_timeout": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"disconnect_threshold": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"distance": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"dns_server_override": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"dns_server_protocol": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"drop_fragment": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"drop_overlapped_fragment": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"eap_ca_cert": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"eap_identity": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"eap_method": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"eap_password": &schema.Schema{
				Type:      schema.TypeSet,
				Elem:      &schema.Schema{Type: schema.TypeString},
				Optional:  true,
				Sensitive: true,
				Computed:  true,
			},
			"eap_supplicant": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"eap_user_cert": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"egress_cos": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"egress_queues": &schema.Schema{
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"cos0": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"cos1": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"cos2": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"cos3": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"cos4": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"cos5": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"cos6": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"cos7": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
					},
				},
			},
			"egress_shaping_profile": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"eip": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"estimated_downstream_bandwidth": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"estimated_upstream_bandwidth": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"exclude_signatures": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"explicit_ftp_proxy": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"explicit_web_proxy": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"external": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"fail_action_on_extender": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"fail_alert_interfaces": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"fail_alert_method": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"fail_detect": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"fail_detect_option": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"fortilink": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"fortilink_backup_link": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"fortilink_neighbor_detect": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"fortilink_split_interface": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"fortilink_stacking": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"forward_domain": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"forward_error_correction": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"gateway_address": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"gi_gk": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"icmp_accept_redirect": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"icmp_send_redirect": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"ident_accept": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"idle_timeout": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"ike_saml_server": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"inbandwidth": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"ingress_cos": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"ingress_shaping_profile": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"ingress_spillover_threshold": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"interconnect_profile": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"interface": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"internal": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"ip": &schema.Schema{
				Type:     schema.TypeList,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"ip_managed_by_fortiipam": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"ipmac": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"ips_sniffer_mode": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"ipunnumbered": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"ipv6": &schema.Schema{
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"autoconf": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"cli_conn6_status": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"client_options": &schema.Schema{
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"code": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
									},
									"id": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
										Computed: true,
									},
									"ip6": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
									},
									"type": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
									},
									"value": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
						"dhcp6_client_options": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"dhcp6_iapd_list": &schema.Schema{
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"iaid": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
									},
									"prefix_hint": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
										Computed: true,
									},
									"prefix_hint_plt": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
										Computed: true,
									},
									"prefix_hint_vlt": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
										Computed: true,
									},
								},
							},
						},
						"dhcp6_information_request": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"dhcp6_prefix_delegation": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"dhcp6_prefix_hint": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
						"dhcp6_prefix_hint_plt": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"dhcp6_prefix_hint_vlt": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"dhcp6_relay_interface_id": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
						"dhcp6_relay_ip": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"dhcp6_relay_service": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"dhcp6_relay_source_interface": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"dhcp6_relay_source_ip": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"dhcp6_relay_type": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"icmp6_send_redirect": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"interface_identifier": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_address": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_adv_rio": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_allowaccess": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"ip6_default_life": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
							Computed: true,
						},
						"ip6_delegated_prefix_iaid": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"ip6_delegated_prefix_list": &schema.Schema{
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"autonomous_flag": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
									},
									"delegated_prefix_iaid": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
									},
									"onlink_flag": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
									},
									"prefix_id": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
									},
									"rdnss": &schema.Schema{
										Type:     schema.TypeSet,
										Elem:     &schema.Schema{Type: schema.TypeString},
										Optional: true,
										Computed: true,
									},
									"rdnss_service": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
									},
									"subnet": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
									},
									"upstream_interface": &schema.Schema{
										Type:     schema.TypeSet,
										Elem:     &schema.Schema{Type: schema.TypeString},
										Optional: true,
										Computed: true,
									},
								},
							},
						},
						"ip6_dns_server_override": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_dnssl_list": &schema.Schema{
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"dnssl_life_time": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
										Computed: true,
									},
									"domain": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
						"ip6_extra_addr": &schema.Schema{
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"prefix": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
						"ip6_hop_limit": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"ip6_link_mtu": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"ip6_manage_flag": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_max_interval": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
							Computed: true,
						},
						"ip6_min_interval": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
							Computed: true,
						},
						"ip6_mode": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_other_flag": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_prefix_list": &schema.Schema{
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"autonomous_flag": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
									},
									"dnssl": &schema.Schema{
										Type:     schema.TypeSet,
										Elem:     &schema.Schema{Type: schema.TypeString},
										Optional: true,
										Computed: true,
									},
									"onlink_flag": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
									},
									"preferred_life_time": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
									},
									"prefix": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
									},
									"rdnss": &schema.Schema{
										Type:     schema.TypeSet,
										Elem:     &schema.Schema{Type: schema.TypeString},
										Optional: true,
										Computed: true,
									},
									"valid_life_time": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},
						"ip6_prefix_mode": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_rdnss_list": &schema.Schema{
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"rdnss": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
									},
									"rdnss_life_time": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
									},
								},
							},
						},
						"ip6_reachable_time": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"ip6_retrans_time": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"ip6_route_list": &schema.Schema{
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"route": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
									},
									"route_life_time": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
									},
									"route_pref": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
						"ip6_route_pref": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_send_adv": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_subnet": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"ip6_upstream_interface": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"nd_cert": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"nd_cga_modifier": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
						"nd_mode": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"nd_security_level": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"nd_timestamp_delta": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"nd_timestamp_fuzz": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"ra_send_mtu": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"unique_autoconf_addr": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"vrip6_link_local": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"vrrp_virtual_mac6": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"vrrp6": &schema.Schema{
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"accept_mode": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
										Computed: true,
									},
									"adv_interval": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
										Computed: true,
									},
									"ignore_default_route": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
										Computed: true,
									},
									"preempt": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
										Computed: true,
									},
									"priority": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
										Computed: true,
									},
									"start_time": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
										Computed: true,
									},
									"status": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
										Computed: true,
									},
									"vrdst_priority": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
									},
									"vrdst6": &schema.Schema{
										Type:     schema.TypeSet,
										Elem:     &schema.Schema{Type: schema.TypeString},
										Optional: true,
										Computed: true,
									},
									"vrgrp": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
									},
									"vrid": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
									},
									"vrip6": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
										Computed: true,
									},
								},
							},
						},
					},
				},
			},
			"l2forward": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"l2tp_client": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"l2tp_client_settings": &schema.Schema{
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"auth_type": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
						"defaultgw": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
						"distance": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"hello_interval": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"ip": &schema.Schema{
							Type:     schema.TypeList,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"mtu": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"password": &schema.Schema{
							Type:      schema.TypeSet,
							Elem:      &schema.Schema{Type: schema.TypeString},
							Optional:  true,
							Sensitive: true,
							Computed:  true,
						},
						"peer_host": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
						"peer_mask": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
						"peer_port": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"priority": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"user": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},
			"lacp_ha_secondary": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"lacp_ha_slave": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"lacp_mode": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"lacp_speed": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"lcp_echo_interval": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"lcp_max_echo_fails": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"link_up_delay": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"lldp_network_policy": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"lldp_reception": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"lldp_transmission": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"macaddr": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"managed_subnetwork_size": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"management_ip": &schema.Schema{
				Type:     schema.TypeList,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"max_egress_burst_rate": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"max_egress_rate": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"measured_downstream_bandwidth": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"measured_upstream_bandwidth": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"mediatype": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"member": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"min_links": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"min_links_down": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"mirroring_direction": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"mirroring_filter": &schema.Schema{
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"dbg_dump": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"filter_dport": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"filter_dstip": &schema.Schema{
							Type:     schema.TypeList,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"filter_protocol": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"filter_sport": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"filter_srcip": &schema.Schema{
							Type:     schema.TypeList,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
					},
				},
			},
			"mirroring_port": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"mode": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"monitor_bandwidth": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"mtu": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"mtu_override": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"mux_type": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"name": &schema.Schema{
				Type:     schema.TypeString,
				ForceNew: true,
				Optional: true,
			},
			"ndiscforward": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"netbios_forward": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"netflow_sample_rate": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"netflow_sampler": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"netflow_sampler_id": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"np_qos_profile": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"outbandwidth": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"padt_retry_timeout": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"password": &schema.Schema{
				Type:      schema.TypeSet,
				Elem:      &schema.Schema{Type: schema.TypeString},
				Optional:  true,
				Sensitive: true,
				Computed:  true,
			},
			"phy_mode": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"phy_setting": &schema.Schema{
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"signal_ok_threshold_value": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},
			"poe": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"polling_interval": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"port_mirroring": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"pppoe_egress_cos": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"pppoe_unnumbered_negotiate": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"pptp_auth_type": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"pptp_client": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"pptp_password": &schema.Schema{
				Type:      schema.TypeSet,
				Elem:      &schema.Schema{Type: schema.TypeString},
				Optional:  true,
				Sensitive: true,
				Computed:  true,
			},
			"pptp_server_ip": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"pptp_timeout": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"pptp_user": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"preserve_session_route": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"priority": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"priority_override": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"proxy_captive_portal": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"pvc_atm_qos": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"pvc_chan": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"pvc_crc": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"pvc_pcr": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"pvc_scr": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"pvc_vlan_id": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"pvc_vlan_rx_id": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"pvc_vlan_rx_op": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"pvc_vlan_tx_id": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"pvc_vlan_tx_op": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"reachable_time": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"redundant_interface": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"remote_ip": &schema.Schema{
				Type:     schema.TypeList,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"replacemsg_override_group": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"retransmission": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"ring_rx": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"ring_tx": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"role": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"sample_direction": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"sample_rate": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"secondary_ip": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"secondaryip": &schema.Schema{
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"allowaccess": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"id": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
							Computed: true,
						},
						"ip": &schema.Schema{
							Type:     schema.TypeList,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"secip_relay_ip": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},
			"security_8021x_dynamic_vlan_id": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"security_8021x_master": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"security_8021x_member_mode": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"security_8021x_mode": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"security_exempt_list": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"security_external_logout": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"security_external_web": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"security_groups": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"security_ip_auth_bypass": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"security_mac_auth_bypass": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"security_mode": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"security_redirect_url": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"select_profile_30a_35b": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"service_name": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"sflow_sampler": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"sfp_dsl": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"sfp_dsl_adsl_fallback": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"sfp_dsl_autodetect": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"sfp_dsl_mac": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"snmp_index": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"speed": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"spillover_threshold": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"src_check": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"status": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"stp": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"stp_ha_slave": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"stp_edge": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"stp_ha_secondary": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"stpforward": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"stpforward_mode": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"subst": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"substitute_dst_mac": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"sw_algorithm": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"swc_first_create": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"swc_vlan": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"switch": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"switch_controller_access_vlan": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"switch_controller_arp_inspection": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"switch_controller_dhcp_snooping": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"switch_controller_dhcp_snooping_option82": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"switch_controller_dhcp_snooping_verify_mac": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"switch_controller_dynamic": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"switch_controller_feature": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"switch_controller_igmp_snooping": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"switch_controller_igmp_snooping_fast_leave": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"switch_controller_igmp_snooping_proxy": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"switch_controller_iot_scanning": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"switch_controller_learning_limit": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"switch_controller_mgmt_vlan": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
				Computed: true,
			},
			"switch_controller_nac": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"switch_controller_netflow_collect": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"switch_controller_offload": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"switch_controller_offload_gw": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"switch_controller_offload_ip": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"switch_controller_rspan_mode": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"switch_controller_source_ip": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"switch_controller_traffic_policy": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"system_id": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"system_id_type": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"tagging": &schema.Schema{
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"category": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"name": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
						"tags": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
					},
				},
			},
			"tc_mode": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"tcp_mss": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"trunk": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"trust_ip_1": &schema.Schema{
				Type:     schema.TypeList,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"trust_ip_2": &schema.Schema{
				Type:     schema.TypeList,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"trust_ip_3": &schema.Schema{
				Type:     schema.TypeList,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"trust_ip6_1": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"trust_ip6_2": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"trust_ip6_3": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"type": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"username": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"vci": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"vdom": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"vectoring": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"vindex": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"virtual_mac": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"vlan_id": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"vlan_op_mode": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"vlan_protocol": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"vlanforward": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"vlanid": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"vpi": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"vrf": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"vrrp": &schema.Schema{
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"accept_mode": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"adv_interval": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
							Computed: true,
						},
						"ignore_default_route": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"preempt": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"priority": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
							Computed: true,
						},
						"proxy_arp": &schema.Schema{
							Type:     schema.TypeList,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": &schema.Schema{
										Type:     schema.TypeInt,
										Optional: true,
									},
									"ip": &schema.Schema{
										Type:     schema.TypeString,
										Optional: true,
										Computed: true,
									},
								},
							},
						},
						"start_time": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
							Computed: true,
						},
						"status": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"version": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"vrdst": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"vrdst_priority": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"vrgrp": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"vrid": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"vrip": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},
			"vrrp_virtual_mac": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"wccp": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"weight": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"wifi_5g_threshold": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"wifi_acl": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"wifi_ap_band": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"wifi_auth": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"wifi_auto_connect": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"wifi_auto_save": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"wifi_broadcast_ssid": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"wifi_dns_server1": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"wifi_dns_server2": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"wifi_encrypt": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"wifi_fragment_threshold": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"wifi_gateway": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"wifi_key": &schema.Schema{
				Type:      schema.TypeSet,
				Elem:      &schema.Schema{Type: schema.TypeString},
				Optional:  true,
				Sensitive: true,
				Computed:  true,
			},
			"wifi_keyindex": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"wifi_mac_filter": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"wifi_networks": &schema.Schema{
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"obsolete_security_options": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
						"wifi_ca_certificate": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"wifi_client_certificate": &schema.Schema{
							Type:     schema.TypeSet,
							Elem:     &schema.Schema{Type: schema.TypeString},
							Optional: true,
							Computed: true,
						},
						"wifi_eap_type": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
						"wifi_encrypt": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
						"wifi_key": &schema.Schema{
							Type:      schema.TypeSet,
							Elem:      &schema.Schema{Type: schema.TypeString},
							Optional:  true,
							Sensitive: true,
							Computed:  true,
						},
						"wifi_keyindex": &schema.Schema{
							Type:     schema.TypeInt,
							Optional: true,
						},
						"wifi_passphrase": &schema.Schema{
							Type:      schema.TypeSet,
							Elem:      &schema.Schema{Type: schema.TypeString},
							Optional:  true,
							Sensitive: true,
							Computed:  true,
						},
						"wifi_private_key": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
						"wifi_private_key_password": &schema.Schema{
							Type:      schema.TypeSet,
							Elem:      &schema.Schema{Type: schema.TypeString},
							Optional:  true,
							Sensitive: true,
							Computed:  true,
						},
						"wifi_security": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
						"wifi_ssid": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
						"wifi_username": &schema.Schema{
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},
			"wifi_passphrase": &schema.Schema{
				Type:      schema.TypeSet,
				Elem:      &schema.Schema{Type: schema.TypeString},
				Optional:  true,
				Sensitive: true,
				Computed:  true,
			},
			"wifi_radius_server": &schema.Schema{
				Type:     schema.TypeSet,
				Elem:     &schema.Schema{Type: schema.TypeString},
				Optional: true,
				Computed: true,
			},
			"wifi_rts_threshold": &schema.Schema{
				Type:     schema.TypeInt,
				Optional: true,
			},
			"wifi_security": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"wifi_ssid": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"wifi_usergroup": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
			},
			"wins_ip": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"dynamic_sort_subtable": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Default:  "false",
			},
		},
	}
}

func resourceSystemInterfaceCreate(d *schema.ResourceData, m interface{}) error {
	c := m.(*FortiClient).Client
	c.Retries = 1

	paradict := make(map[string]string)
	wsParams := make(map[string]string)

	cfg := m.(*FortiClient).Cfg
	device_name, err := getVariable(cfg, d, "device_name")
	if err != nil {
		return err
	}
	paradict["device"] = device_name

	if cfg.Adom != "" {
		wsParams["adom"] = fmt.Sprintf("adom/%s", cfg.Adom)
	}
	obj, err := getObjectSystemInterface(d)
	if err != nil {
		return fmt.Errorf("Error creating SystemInterface resource while getting object: %v", err)
	}

	v, _ := d.GetOk("type")
	ag, _ := d.GetOk("autogenerated")
	if v == "physical" || ag == "auto" {
		_, err = c.UpdateSystemInterface(obj, (*obj)["name"].(string), paradict, wsParams)
	} else {
		_, err = c.CreateSystemInterface(obj, paradict, wsParams)
	}
	if err != nil {
		return fmt.Errorf("Error creating SystemInterface resource: %v", err)
	}

	d.SetId(getStringKey(d, "name"))

	return resourceSystemInterfaceRead(d, m)
}

func resourceSystemInterfaceUpdate(d *schema.ResourceData, m interface{}) error {
	mkey := d.Id()
	c := m.(*FortiClient).Client
	c.Retries = 1

	paradict := make(map[string]string)
	wsParams := make(map[string]string)

	cfg := m.(*FortiClient).Cfg
	device_name, err := getVariable(cfg, d, "device_name")
	if err != nil {
		return err
	}
	paradict["device"] = device_name

	if cfg.Adom != "" {
		wsParams["adom"] = fmt.Sprintf("adom/%s", cfg.Adom)
	}
	obj, err := getObjectSystemInterface(d)
	if err != nil {
		return fmt.Errorf("Error updating SystemInterface resource while getting object: %v", err)
	}

	_, err = c.UpdateSystemInterface(obj, mkey, paradict, wsParams)
	if err != nil {
		return fmt.Errorf("Error updating SystemInterface resource: %v", err)
	}

	log.Printf(strconv.Itoa(c.Retries))

	d.SetId(getStringKey(d, "name"))

	return resourceSystemInterfaceRead(d, m)
}

func resourceSystemInterfaceDelete(d *schema.ResourceData, m interface{}) error {
	mkey := d.Id()

	c := m.(*FortiClient).Client
	c.Retries = 1

	paradict := make(map[string]string)
	wsParams := make(map[string]string)

	cfg := m.(*FortiClient).Cfg
	device_name, err := getVariable(cfg, d, "device_name")
	if err != nil {
		return err
	}
	paradict["device"] = device_name

	if cfg.Adom != "" {
		wsParams["adom"] = fmt.Sprintf("adom/%s", cfg.Adom)
	}
	v, _ := d.GetOk("type")
	ag, _ := d.GetOk("autogenerated")
	if v == "physical" || ag == "auto" {
		d.SetId("")
		return nil
	}

	err = c.DeleteSystemInterface(mkey, paradict, wsParams)
	if err != nil {
		return fmt.Errorf("Error deleting SystemInterface resource: %v", err)
	}

	d.SetId("")

	return nil
}

func resourceSystemInterfaceRead(d *schema.ResourceData, m interface{}) error {
	mkey := d.Id()

	c := m.(*FortiClient).Client
	c.Retries = 1

	paradict := make(map[string]string)

	cfg := m.(*FortiClient).Cfg
	device_name, err := getVariable(cfg, d, "device_name")
	if device_name == "" {
		device_name = importOptionChecking(m.(*FortiClient).Cfg, "device_name")
		if device_name == "" {
			return fmt.Errorf("Parameter device_name is missing")
		}
		if err = d.Set("device_name", device_name); err != nil {
			return fmt.Errorf("Error set params device_name: %v", err)
		}
	}
	paradict["device"] = device_name

	o, err := c.ReadSystemInterface(mkey, paradict)
	if err != nil {
		return fmt.Errorf("Error reading SystemInterface resource: %v", err)
	}

	if o == nil {
		log.Printf("[WARN] resource (%s) not found, removing from state", d.Id())
		d.SetId("")
		return nil
	}

	err = refreshObjectSystemInterface(d, o)
	if err != nil {
		return fmt.Errorf("Error reading SystemInterface resource from API: %v", err)
	}
	return nil
}

func flattenSystemInterfaceAcName(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceAggregate(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceAggregateType(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceAlgorithm(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceAlias(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceAllowaccess(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceAnnex(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceApDiscover(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceArpforward(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceAtmProtocol(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceAuthCert(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceAuthPortalAddr(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceAuthType(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceAutoAuthExtensionDevice(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceBandwidthMeasureTime(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceBfd(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceBfdDesiredMinTx(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceBfdDetectMult(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceBfdRequiredMinRx(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceBroadcastForticlientDiscovery(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceBroadcastForward(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceCaptivePortal(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceCliConnStatus(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceClientOptions(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "code"
		if _, ok := i["code"]; ok {
			v := flattenSystemInterfaceClientOptionsCode(i["code"], d, pre_append)
			tmp["code"] = fortiAPISubPartPatch(v, "SystemInterface-ClientOptions-Code")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "id"
		if _, ok := i["id"]; ok {
			v := flattenSystemInterfaceClientOptionsId(i["id"], d, pre_append)
			tmp["id"] = fortiAPISubPartPatch(v, "SystemInterface-ClientOptions-Id")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "ip"
		if _, ok := i["ip"]; ok {
			v := flattenSystemInterfaceClientOptionsIp(i["ip"], d, pre_append)
			tmp["ip"] = fortiAPISubPartPatch(v, "SystemInterface-ClientOptions-Ip")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "type"
		if _, ok := i["type"]; ok {
			v := flattenSystemInterfaceClientOptionsType(i["type"], d, pre_append)
			tmp["type"] = fortiAPISubPartPatch(v, "SystemInterface-ClientOptions-Type")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "value"
		if _, ok := i["value"]; ok {
			v := flattenSystemInterfaceClientOptionsValue(i["value"], d, pre_append)
			tmp["value"] = fortiAPISubPartPatch(v, "SystemInterface-ClientOptions-Value")
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result
}

func flattenSystemInterfaceClientOptionsCode(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceClientOptionsId(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceClientOptionsIp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceClientOptionsType(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceClientOptionsValue(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceColor(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDedicatedTo(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDefaultPurdueLevel(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDefaultgw(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDescription(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDetectedPeerMtu(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDeviceIdentification(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDeviceUserIdentification(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDevindex(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpBroadcastFlag(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpClasslessRouteAddition(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpClientIdentifier(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpRelayAgentOption(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpRelayAllowNoEndOption(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpRelayCircuitId(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpRelayInterface(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceDhcpRelayInterfaceSelectMethod(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpRelayIp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceDhcpRelayLinkSelection(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpRelayRequestAllServer(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpRelayService(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpRelaySourceIp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpRelayType(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpRelayVrfSelect(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpRenewTime(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpSmartRelay(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpSnoopingServerList(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "name"
		if _, ok := i["name"]; ok {
			v := flattenSystemInterfaceDhcpSnoopingServerListName(i["name"], d, pre_append)
			tmp["name"] = fortiAPISubPartPatch(v, "SystemInterface-DhcpSnoopingServerList-Name")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "server_ip"
		if _, ok := i["server-ip"]; ok {
			v := flattenSystemInterfaceDhcpSnoopingServerListServerIp(i["server-ip"], d, pre_append)
			tmp["server_ip"] = fortiAPISubPartPatch(v, "SystemInterface-DhcpSnoopingServerList-ServerIp")
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result
}

func flattenSystemInterfaceDhcpSnoopingServerListName(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDhcpSnoopingServerListServerIp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDiscRetryTimeout(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDisconnectThreshold(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDistance(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDnsServerOverride(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDnsServerProtocol(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceDropFragment(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceDropOverlappedFragment(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceEapCaCert(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceEapIdentity(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceEapMethod(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceEapSupplicant(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceEapUserCert(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceEgressCos(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceEgressQueues(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	i := v.(map[string]interface{})
	result := make(map[string]interface{})

	pre_append := "" // complex
	pre_append = pre + ".0." + "cos0"
	if _, ok := i["cos0"]; ok {
		result["cos0"] = flattenSystemInterfaceEgressQueuesCos0(i["cos0"], d, pre_append)
	}

	pre_append = pre + ".0." + "cos1"
	if _, ok := i["cos1"]; ok {
		result["cos1"] = flattenSystemInterfaceEgressQueuesCos1(i["cos1"], d, pre_append)
	}

	pre_append = pre + ".0." + "cos2"
	if _, ok := i["cos2"]; ok {
		result["cos2"] = flattenSystemInterfaceEgressQueuesCos2(i["cos2"], d, pre_append)
	}

	pre_append = pre + ".0." + "cos3"
	if _, ok := i["cos3"]; ok {
		result["cos3"] = flattenSystemInterfaceEgressQueuesCos3(i["cos3"], d, pre_append)
	}

	pre_append = pre + ".0." + "cos4"
	if _, ok := i["cos4"]; ok {
		result["cos4"] = flattenSystemInterfaceEgressQueuesCos4(i["cos4"], d, pre_append)
	}

	pre_append = pre + ".0." + "cos5"
	if _, ok := i["cos5"]; ok {
		result["cos5"] = flattenSystemInterfaceEgressQueuesCos5(i["cos5"], d, pre_append)
	}

	pre_append = pre + ".0." + "cos6"
	if _, ok := i["cos6"]; ok {
		result["cos6"] = flattenSystemInterfaceEgressQueuesCos6(i["cos6"], d, pre_append)
	}

	pre_append = pre + ".0." + "cos7"
	if _, ok := i["cos7"]; ok {
		result["cos7"] = flattenSystemInterfaceEgressQueuesCos7(i["cos7"], d, pre_append)
	}

	lastresult := []map[string]interface{}{result}
	return lastresult
}

func flattenSystemInterfaceEgressQueuesCos0(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceEgressQueuesCos1(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceEgressQueuesCos2(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceEgressQueuesCos3(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceEgressQueuesCos4(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceEgressQueuesCos5(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceEgressQueuesCos6(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceEgressQueuesCos7(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceEgressShapingProfile(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceEip(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceEstimatedDownstreamBandwidth(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceEstimatedUpstreamBandwidth(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceExcludeSignatures(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceExplicitFtpProxy(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceExplicitWebProxy(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceExternal(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceFailActionOnExtender(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceFailAlertInterfaces(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceFailAlertMethod(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceFailDetect(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceFailDetectOption(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceFortilink(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceFortilinkBackupLink(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceFortilinkNeighborDetect(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceFortilinkSplitInterface(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceFortilinkStacking(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceForwardDomain(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceForwardErrorCorrection(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceGatewayAddress(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceGiGk(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIcmpAcceptRedirect(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIcmpSendRedirect(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIdentAccept(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIdleTimeout(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIkeSamlServer(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceInbandwidth(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIngressCos(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIngressShapingProfile(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceIngressSpilloverThreshold(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceInterconnectProfile(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceInterface(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceInternal(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceIpManagedByFortiipam(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpmac(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpsSnifferMode(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpunnumbered(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	i := v.(map[string]interface{})
	result := make(map[string]interface{})

	pre_append := "" // complex
	pre_append = pre + ".0." + "autoconf"
	if _, ok := i["autoconf"]; ok {
		result["autoconf"] = flattenSystemInterfaceIpv6Autoconf(i["autoconf"], d, pre_append)
	}

	pre_append = pre + ".0." + "cli_conn6_status"
	if _, ok := i["cli-conn6-status"]; ok {
		result["cli_conn6_status"] = flattenSystemInterfaceIpv6CliConn6Status(i["cli-conn6-status"], d, pre_append)
	}

	pre_append = pre + ".0." + "client_options"
	if _, ok := i["client-options"]; ok {
		result["client_options"] = flattenSystemInterfaceIpv6ClientOptions(i["client-options"], d, pre_append)
	}

	pre_append = pre + ".0." + "dhcp6_client_options"
	if _, ok := i["dhcp6-client-options"]; ok {
		result["dhcp6_client_options"] = flattenSystemInterfaceIpv6Dhcp6ClientOptions(i["dhcp6-client-options"], d, pre_append)
	}

	pre_append = pre + ".0." + "dhcp6_iapd_list"
	if _, ok := i["dhcp6-iapd-list"]; ok {
		result["dhcp6_iapd_list"] = flattenSystemInterfaceIpv6Dhcp6IapdList(i["dhcp6-iapd-list"], d, pre_append)
	}

	pre_append = pre + ".0." + "dhcp6_information_request"
	if _, ok := i["dhcp6-information-request"]; ok {
		result["dhcp6_information_request"] = flattenSystemInterfaceIpv6Dhcp6InformationRequest(i["dhcp6-information-request"], d, pre_append)
	}

	pre_append = pre + ".0." + "dhcp6_prefix_delegation"
	if _, ok := i["dhcp6-prefix-delegation"]; ok {
		result["dhcp6_prefix_delegation"] = flattenSystemInterfaceIpv6Dhcp6PrefixDelegation(i["dhcp6-prefix-delegation"], d, pre_append)
	}

	pre_append = pre + ".0." + "dhcp6_prefix_hint"
	if _, ok := i["dhcp6-prefix-hint"]; ok {
		result["dhcp6_prefix_hint"] = flattenSystemInterfaceIpv6Dhcp6PrefixHint(i["dhcp6-prefix-hint"], d, pre_append)
	}

	pre_append = pre + ".0." + "dhcp6_prefix_hint_plt"
	if _, ok := i["dhcp6-prefix-hint-plt"]; ok {
		result["dhcp6_prefix_hint_plt"] = flattenSystemInterfaceIpv6Dhcp6PrefixHintPlt(i["dhcp6-prefix-hint-plt"], d, pre_append)
	}

	pre_append = pre + ".0." + "dhcp6_prefix_hint_vlt"
	if _, ok := i["dhcp6-prefix-hint-vlt"]; ok {
		result["dhcp6_prefix_hint_vlt"] = flattenSystemInterfaceIpv6Dhcp6PrefixHintVlt(i["dhcp6-prefix-hint-vlt"], d, pre_append)
	}

	pre_append = pre + ".0." + "dhcp6_relay_interface_id"
	if _, ok := i["dhcp6-relay-interface-id"]; ok {
		result["dhcp6_relay_interface_id"] = flattenSystemInterfaceIpv6Dhcp6RelayInterfaceId(i["dhcp6-relay-interface-id"], d, pre_append)
	}

	pre_append = pre + ".0." + "dhcp6_relay_ip"
	if _, ok := i["dhcp6-relay-ip"]; ok {
		result["dhcp6_relay_ip"] = flattenSystemInterfaceIpv6Dhcp6RelayIp(i["dhcp6-relay-ip"], d, pre_append)
	}

	pre_append = pre + ".0." + "dhcp6_relay_service"
	if _, ok := i["dhcp6-relay-service"]; ok {
		result["dhcp6_relay_service"] = flattenSystemInterfaceIpv6Dhcp6RelayService(i["dhcp6-relay-service"], d, pre_append)
	}

	pre_append = pre + ".0." + "dhcp6_relay_source_interface"
	if _, ok := i["dhcp6-relay-source-interface"]; ok {
		result["dhcp6_relay_source_interface"] = flattenSystemInterfaceIpv6Dhcp6RelaySourceInterface(i["dhcp6-relay-source-interface"], d, pre_append)
	}

	pre_append = pre + ".0." + "dhcp6_relay_source_ip"
	if _, ok := i["dhcp6-relay-source-ip"]; ok {
		result["dhcp6_relay_source_ip"] = flattenSystemInterfaceIpv6Dhcp6RelaySourceIp(i["dhcp6-relay-source-ip"], d, pre_append)
	}

	pre_append = pre + ".0." + "dhcp6_relay_type"
	if _, ok := i["dhcp6-relay-type"]; ok {
		result["dhcp6_relay_type"] = flattenSystemInterfaceIpv6Dhcp6RelayType(i["dhcp6-relay-type"], d, pre_append)
	}

	pre_append = pre + ".0." + "icmp6_send_redirect"
	if _, ok := i["icmp6-send-redirect"]; ok {
		result["icmp6_send_redirect"] = flattenSystemInterfaceIpv6Icmp6SendRedirect(i["icmp6-send-redirect"], d, pre_append)
	}

	pre_append = pre + ".0." + "interface_identifier"
	if _, ok := i["interface-identifier"]; ok {
		result["interface_identifier"] = flattenSystemInterfaceIpv6InterfaceIdentifier(i["interface-identifier"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_address"
	if _, ok := i["ip6-address"]; ok {
		result["ip6_address"] = flattenSystemInterfaceIpv6Ip6Address(i["ip6-address"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_adv_rio"
	if _, ok := i["ip6-adv-rio"]; ok {
		result["ip6_adv_rio"] = flattenSystemInterfaceIpv6Ip6AdvRio(i["ip6-adv-rio"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_allowaccess"
	if _, ok := i["ip6-allowaccess"]; ok {
		result["ip6_allowaccess"] = flattenSystemInterfaceIpv6Ip6Allowaccess(i["ip6-allowaccess"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_default_life"
	if _, ok := i["ip6-default-life"]; ok {
		result["ip6_default_life"] = flattenSystemInterfaceIpv6Ip6DefaultLife(i["ip6-default-life"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_delegated_prefix_iaid"
	if _, ok := i["ip6-delegated-prefix-iaid"]; ok {
		result["ip6_delegated_prefix_iaid"] = flattenSystemInterfaceIpv6Ip6DelegatedPrefixIaid(i["ip6-delegated-prefix-iaid"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_delegated_prefix_list"
	if _, ok := i["ip6-delegated-prefix-list"]; ok {
		result["ip6_delegated_prefix_list"] = flattenSystemInterfaceIpv6Ip6DelegatedPrefixList(i["ip6-delegated-prefix-list"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_dns_server_override"
	if _, ok := i["ip6-dns-server-override"]; ok {
		result["ip6_dns_server_override"] = flattenSystemInterfaceIpv6Ip6DnsServerOverride(i["ip6-dns-server-override"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_dnssl_list"
	if _, ok := i["ip6-dnssl-list"]; ok {
		result["ip6_dnssl_list"] = flattenSystemInterfaceIpv6Ip6DnsslList(i["ip6-dnssl-list"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_extra_addr"
	if _, ok := i["ip6-extra-addr"]; ok {
		result["ip6_extra_addr"] = flattenSystemInterfaceIpv6Ip6ExtraAddr(i["ip6-extra-addr"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_hop_limit"
	if _, ok := i["ip6-hop-limit"]; ok {
		result["ip6_hop_limit"] = flattenSystemInterfaceIpv6Ip6HopLimit(i["ip6-hop-limit"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_link_mtu"
	if _, ok := i["ip6-link-mtu"]; ok {
		result["ip6_link_mtu"] = flattenSystemInterfaceIpv6Ip6LinkMtu(i["ip6-link-mtu"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_manage_flag"
	if _, ok := i["ip6-manage-flag"]; ok {
		result["ip6_manage_flag"] = flattenSystemInterfaceIpv6Ip6ManageFlag(i["ip6-manage-flag"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_max_interval"
	if _, ok := i["ip6-max-interval"]; ok {
		result["ip6_max_interval"] = flattenSystemInterfaceIpv6Ip6MaxInterval(i["ip6-max-interval"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_min_interval"
	if _, ok := i["ip6-min-interval"]; ok {
		result["ip6_min_interval"] = flattenSystemInterfaceIpv6Ip6MinInterval(i["ip6-min-interval"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_mode"
	if _, ok := i["ip6-mode"]; ok {
		result["ip6_mode"] = flattenSystemInterfaceIpv6Ip6Mode(i["ip6-mode"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_other_flag"
	if _, ok := i["ip6-other-flag"]; ok {
		result["ip6_other_flag"] = flattenSystemInterfaceIpv6Ip6OtherFlag(i["ip6-other-flag"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_prefix_list"
	if _, ok := i["ip6-prefix-list"]; ok {
		result["ip6_prefix_list"] = flattenSystemInterfaceIpv6Ip6PrefixList(i["ip6-prefix-list"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_prefix_mode"
	if _, ok := i["ip6-prefix-mode"]; ok {
		result["ip6_prefix_mode"] = flattenSystemInterfaceIpv6Ip6PrefixMode(i["ip6-prefix-mode"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_rdnss_list"
	if _, ok := i["ip6-rdnss-list"]; ok {
		result["ip6_rdnss_list"] = flattenSystemInterfaceIpv6Ip6RdnssList(i["ip6-rdnss-list"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_reachable_time"
	if _, ok := i["ip6-reachable-time"]; ok {
		result["ip6_reachable_time"] = flattenSystemInterfaceIpv6Ip6ReachableTime(i["ip6-reachable-time"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_retrans_time"
	if _, ok := i["ip6-retrans-time"]; ok {
		result["ip6_retrans_time"] = flattenSystemInterfaceIpv6Ip6RetransTime(i["ip6-retrans-time"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_route_list"
	if _, ok := i["ip6-route-list"]; ok {
		result["ip6_route_list"] = flattenSystemInterfaceIpv6Ip6RouteList(i["ip6-route-list"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_route_pref"
	if _, ok := i["ip6-route-pref"]; ok {
		result["ip6_route_pref"] = flattenSystemInterfaceIpv6Ip6RoutePref(i["ip6-route-pref"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_send_adv"
	if _, ok := i["ip6-send-adv"]; ok {
		result["ip6_send_adv"] = flattenSystemInterfaceIpv6Ip6SendAdv(i["ip6-send-adv"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_subnet"
	if _, ok := i["ip6-subnet"]; ok {
		result["ip6_subnet"] = flattenSystemInterfaceIpv6Ip6Subnet(i["ip6-subnet"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip6_upstream_interface"
	if _, ok := i["ip6-upstream-interface"]; ok {
		result["ip6_upstream_interface"] = flattenSystemInterfaceIpv6Ip6UpstreamInterface(i["ip6-upstream-interface"], d, pre_append)
	}

	pre_append = pre + ".0." + "nd_cert"
	if _, ok := i["nd-cert"]; ok {
		result["nd_cert"] = flattenSystemInterfaceIpv6NdCert(i["nd-cert"], d, pre_append)
	}

	pre_append = pre + ".0." + "nd_cga_modifier"
	if _, ok := i["nd-cga-modifier"]; ok {
		result["nd_cga_modifier"] = flattenSystemInterfaceIpv6NdCgaModifier(i["nd-cga-modifier"], d, pre_append)
	}

	pre_append = pre + ".0." + "nd_mode"
	if _, ok := i["nd-mode"]; ok {
		result["nd_mode"] = flattenSystemInterfaceIpv6NdMode(i["nd-mode"], d, pre_append)
	}

	pre_append = pre + ".0." + "nd_security_level"
	if _, ok := i["nd-security-level"]; ok {
		result["nd_security_level"] = flattenSystemInterfaceIpv6NdSecurityLevel(i["nd-security-level"], d, pre_append)
	}

	pre_append = pre + ".0." + "nd_timestamp_delta"
	if _, ok := i["nd-timestamp-delta"]; ok {
		result["nd_timestamp_delta"] = flattenSystemInterfaceIpv6NdTimestampDelta(i["nd-timestamp-delta"], d, pre_append)
	}

	pre_append = pre + ".0." + "nd_timestamp_fuzz"
	if _, ok := i["nd-timestamp-fuzz"]; ok {
		result["nd_timestamp_fuzz"] = flattenSystemInterfaceIpv6NdTimestampFuzz(i["nd-timestamp-fuzz"], d, pre_append)
	}

	pre_append = pre + ".0." + "ra_send_mtu"
	if _, ok := i["ra-send-mtu"]; ok {
		result["ra_send_mtu"] = flattenSystemInterfaceIpv6RaSendMtu(i["ra-send-mtu"], d, pre_append)
	}

	pre_append = pre + ".0." + "unique_autoconf_addr"
	if _, ok := i["unique-autoconf-addr"]; ok {
		result["unique_autoconf_addr"] = flattenSystemInterfaceIpv6UniqueAutoconfAddr(i["unique-autoconf-addr"], d, pre_append)
	}

	pre_append = pre + ".0." + "vrip6_link_local"
	if _, ok := i["vrip6_link_local"]; ok {
		result["vrip6_link_local"] = flattenSystemInterfaceIpv6Vrip6LinkLocal(i["vrip6_link_local"], d, pre_append)
	}

	pre_append = pre + ".0." + "vrrp_virtual_mac6"
	if _, ok := i["vrrp-virtual-mac6"]; ok {
		result["vrrp_virtual_mac6"] = flattenSystemInterfaceIpv6VrrpVirtualMac6(i["vrrp-virtual-mac6"], d, pre_append)
	}

	pre_append = pre + ".0." + "vrrp6"
	if _, ok := i["vrrp6"]; ok {
		result["vrrp6"] = flattenSystemInterfaceIpv6Vrrp6(i["vrrp6"], d, pre_append)
	}

	lastresult := []map[string]interface{}{result}
	return lastresult
}

func flattenSystemInterfaceIpv6Autoconf(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6CliConn6Status(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6ClientOptions(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "code"
		if _, ok := i["code"]; ok {
			v := flattenSystemInterfaceIpv6ClientOptionsCode(i["code"], d, pre_append)
			tmp["code"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-ClientOptions-Code")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "id"
		if _, ok := i["id"]; ok {
			v := flattenSystemInterfaceIpv6ClientOptionsId(i["id"], d, pre_append)
			tmp["id"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-ClientOptions-Id")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "ip6"
		if _, ok := i["ip6"]; ok {
			v := flattenSystemInterfaceIpv6ClientOptionsIp6(i["ip6"], d, pre_append)
			tmp["ip6"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-ClientOptions-Ip6")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "type"
		if _, ok := i["type"]; ok {
			v := flattenSystemInterfaceIpv6ClientOptionsType(i["type"], d, pre_append)
			tmp["type"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-ClientOptions-Type")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "value"
		if _, ok := i["value"]; ok {
			v := flattenSystemInterfaceIpv6ClientOptionsValue(i["value"], d, pre_append)
			tmp["value"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-ClientOptions-Value")
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result
}

func flattenSystemInterfaceIpv6ClientOptionsCode(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6ClientOptionsId(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6ClientOptionsIp6(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6ClientOptionsType(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6ClientOptionsValue(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Dhcp6ClientOptions(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceIpv6Dhcp6IapdList(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "iaid"
		if _, ok := i["iaid"]; ok {
			v := flattenSystemInterfaceIpv6Dhcp6IapdListIaid(i["iaid"], d, pre_append)
			tmp["iaid"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Dhcp6IapdList-Iaid")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "prefix_hint"
		if _, ok := i["prefix-hint"]; ok {
			v := flattenSystemInterfaceIpv6Dhcp6IapdListPrefixHint(i["prefix-hint"], d, pre_append)
			tmp["prefix_hint"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Dhcp6IapdList-PrefixHint")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "prefix_hint_plt"
		if _, ok := i["prefix-hint-plt"]; ok {
			v := flattenSystemInterfaceIpv6Dhcp6IapdListPrefixHintPlt(i["prefix-hint-plt"], d, pre_append)
			tmp["prefix_hint_plt"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Dhcp6IapdList-PrefixHintPlt")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "prefix_hint_vlt"
		if _, ok := i["prefix-hint-vlt"]; ok {
			v := flattenSystemInterfaceIpv6Dhcp6IapdListPrefixHintVlt(i["prefix-hint-vlt"], d, pre_append)
			tmp["prefix_hint_vlt"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Dhcp6IapdList-PrefixHintVlt")
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result
}

func flattenSystemInterfaceIpv6Dhcp6IapdListIaid(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Dhcp6IapdListPrefixHint(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Dhcp6IapdListPrefixHintPlt(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Dhcp6IapdListPrefixHintVlt(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Dhcp6InformationRequest(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Dhcp6PrefixDelegation(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Dhcp6PrefixHint(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Dhcp6PrefixHintPlt(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Dhcp6PrefixHintVlt(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Dhcp6RelayInterfaceId(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Dhcp6RelayIp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceIpv6Dhcp6RelayService(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Dhcp6RelaySourceInterface(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Dhcp6RelaySourceIp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Dhcp6RelayType(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Icmp6SendRedirect(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6InterfaceIdentifier(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6Address(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6AdvRio(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6Allowaccess(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceIpv6Ip6DefaultLife(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6DelegatedPrefixIaid(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6DelegatedPrefixList(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "autonomous_flag"
		if _, ok := i["autonomous-flag"]; ok {
			v := flattenSystemInterfaceIpv6Ip6DelegatedPrefixListAutonomousFlag(i["autonomous-flag"], d, pre_append)
			tmp["autonomous_flag"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6DelegatedPrefixList-AutonomousFlag")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "delegated_prefix_iaid"
		if _, ok := i["delegated-prefix-iaid"]; ok {
			v := flattenSystemInterfaceIpv6Ip6DelegatedPrefixListDelegatedPrefixIaid(i["delegated-prefix-iaid"], d, pre_append)
			tmp["delegated_prefix_iaid"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6DelegatedPrefixList-DelegatedPrefixIaid")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "onlink_flag"
		if _, ok := i["onlink-flag"]; ok {
			v := flattenSystemInterfaceIpv6Ip6DelegatedPrefixListOnlinkFlag(i["onlink-flag"], d, pre_append)
			tmp["onlink_flag"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6DelegatedPrefixList-OnlinkFlag")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "prefix_id"
		if _, ok := i["prefix-id"]; ok {
			v := flattenSystemInterfaceIpv6Ip6DelegatedPrefixListPrefixId(i["prefix-id"], d, pre_append)
			tmp["prefix_id"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6DelegatedPrefixList-PrefixId")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "rdnss"
		if _, ok := i["rdnss"]; ok {
			v := flattenSystemInterfaceIpv6Ip6DelegatedPrefixListRdnss(i["rdnss"], d, pre_append)
			tmp["rdnss"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6DelegatedPrefixList-Rdnss")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "rdnss_service"
		if _, ok := i["rdnss-service"]; ok {
			v := flattenSystemInterfaceIpv6Ip6DelegatedPrefixListRdnssService(i["rdnss-service"], d, pre_append)
			tmp["rdnss_service"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6DelegatedPrefixList-RdnssService")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "subnet"
		if _, ok := i["subnet"]; ok {
			v := flattenSystemInterfaceIpv6Ip6DelegatedPrefixListSubnet(i["subnet"], d, pre_append)
			tmp["subnet"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6DelegatedPrefixList-Subnet")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "upstream_interface"
		if _, ok := i["upstream-interface"]; ok {
			v := flattenSystemInterfaceIpv6Ip6DelegatedPrefixListUpstreamInterface(i["upstream-interface"], d, pre_append)
			tmp["upstream_interface"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6DelegatedPrefixList-UpstreamInterface")
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result
}

func flattenSystemInterfaceIpv6Ip6DelegatedPrefixListAutonomousFlag(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6DelegatedPrefixListDelegatedPrefixIaid(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6DelegatedPrefixListOnlinkFlag(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6DelegatedPrefixListPrefixId(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6DelegatedPrefixListRdnss(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceIpv6Ip6DelegatedPrefixListRdnssService(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6DelegatedPrefixListSubnet(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6DelegatedPrefixListUpstreamInterface(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceIpv6Ip6DnsServerOverride(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6DnsslList(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "dnssl_life_time"
		if _, ok := i["dnssl-life-time"]; ok {
			v := flattenSystemInterfaceIpv6Ip6DnsslListDnsslLifeTime(i["dnssl-life-time"], d, pre_append)
			tmp["dnssl_life_time"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6DnsslList-DnsslLifeTime")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "domain"
		if _, ok := i["domain"]; ok {
			v := flattenSystemInterfaceIpv6Ip6DnsslListDomain(i["domain"], d, pre_append)
			tmp["domain"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6DnsslList-Domain")
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result
}

func flattenSystemInterfaceIpv6Ip6DnsslListDnsslLifeTime(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6DnsslListDomain(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6ExtraAddr(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "prefix"
		if _, ok := i["prefix"]; ok {
			v := flattenSystemInterfaceIpv6Ip6ExtraAddrPrefix(i["prefix"], d, pre_append)
			tmp["prefix"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6ExtraAddr-Prefix")
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result
}

func flattenSystemInterfaceIpv6Ip6ExtraAddrPrefix(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6HopLimit(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6LinkMtu(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6ManageFlag(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6MaxInterval(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6MinInterval(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6Mode(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6OtherFlag(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6PrefixList(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "autonomous_flag"
		if _, ok := i["autonomous-flag"]; ok {
			v := flattenSystemInterfaceIpv6Ip6PrefixListAutonomousFlag(i["autonomous-flag"], d, pre_append)
			tmp["autonomous_flag"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6PrefixList-AutonomousFlag")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "dnssl"
		if _, ok := i["dnssl"]; ok {
			v := flattenSystemInterfaceIpv6Ip6PrefixListDnssl(i["dnssl"], d, pre_append)
			tmp["dnssl"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6PrefixList-Dnssl")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "onlink_flag"
		if _, ok := i["onlink-flag"]; ok {
			v := flattenSystemInterfaceIpv6Ip6PrefixListOnlinkFlag(i["onlink-flag"], d, pre_append)
			tmp["onlink_flag"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6PrefixList-OnlinkFlag")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "preferred_life_time"
		if _, ok := i["preferred-life-time"]; ok {
			v := flattenSystemInterfaceIpv6Ip6PrefixListPreferredLifeTime(i["preferred-life-time"], d, pre_append)
			tmp["preferred_life_time"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6PrefixList-PreferredLifeTime")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "prefix"
		if _, ok := i["prefix"]; ok {
			v := flattenSystemInterfaceIpv6Ip6PrefixListPrefix(i["prefix"], d, pre_append)
			tmp["prefix"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6PrefixList-Prefix")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "rdnss"
		if _, ok := i["rdnss"]; ok {
			v := flattenSystemInterfaceIpv6Ip6PrefixListRdnss(i["rdnss"], d, pre_append)
			tmp["rdnss"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6PrefixList-Rdnss")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "valid_life_time"
		if _, ok := i["valid-life-time"]; ok {
			v := flattenSystemInterfaceIpv6Ip6PrefixListValidLifeTime(i["valid-life-time"], d, pre_append)
			tmp["valid_life_time"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6PrefixList-ValidLifeTime")
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result
}

func flattenSystemInterfaceIpv6Ip6PrefixListAutonomousFlag(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6PrefixListDnssl(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceIpv6Ip6PrefixListOnlinkFlag(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6PrefixListPreferredLifeTime(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6PrefixListPrefix(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6PrefixListRdnss(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceIpv6Ip6PrefixListValidLifeTime(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6PrefixMode(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6RdnssList(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "rdnss"
		if _, ok := i["rdnss"]; ok {
			v := flattenSystemInterfaceIpv6Ip6RdnssListRdnss(i["rdnss"], d, pre_append)
			tmp["rdnss"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6RdnssList-Rdnss")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "rdnss_life_time"
		if _, ok := i["rdnss-life-time"]; ok {
			v := flattenSystemInterfaceIpv6Ip6RdnssListRdnssLifeTime(i["rdnss-life-time"], d, pre_append)
			tmp["rdnss_life_time"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6RdnssList-RdnssLifeTime")
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result
}

func flattenSystemInterfaceIpv6Ip6RdnssListRdnss(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6RdnssListRdnssLifeTime(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6ReachableTime(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6RetransTime(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6RouteList(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "route"
		if _, ok := i["route"]; ok {
			v := flattenSystemInterfaceIpv6Ip6RouteListRoute(i["route"], d, pre_append)
			tmp["route"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6RouteList-Route")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "route_life_time"
		if _, ok := i["route-life-time"]; ok {
			v := flattenSystemInterfaceIpv6Ip6RouteListRouteLifeTime(i["route-life-time"], d, pre_append)
			tmp["route_life_time"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6RouteList-RouteLifeTime")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "route_pref"
		if _, ok := i["route-pref"]; ok {
			v := flattenSystemInterfaceIpv6Ip6RouteListRoutePref(i["route-pref"], d, pre_append)
			tmp["route_pref"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Ip6RouteList-RoutePref")
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result
}

func flattenSystemInterfaceIpv6Ip6RouteListRoute(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6RouteListRouteLifeTime(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6RouteListRoutePref(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6RoutePref(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6SendAdv(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6Subnet(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Ip6UpstreamInterface(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceIpv6NdCert(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceIpv6NdCgaModifier(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6NdMode(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6NdSecurityLevel(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6NdTimestampDelta(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6NdTimestampFuzz(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6RaSendMtu(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6UniqueAutoconfAddr(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrip6LinkLocal(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6VrrpVirtualMac6(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "accept_mode"
		if _, ok := i["accept-mode"]; ok {
			v := flattenSystemInterfaceIpv6Vrrp6AcceptMode(i["accept-mode"], d, pre_append)
			tmp["accept_mode"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Vrrp6-AcceptMode")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "adv_interval"
		if _, ok := i["adv-interval"]; ok {
			v := flattenSystemInterfaceIpv6Vrrp6AdvInterval(i["adv-interval"], d, pre_append)
			tmp["adv_interval"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Vrrp6-AdvInterval")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "ignore_default_route"
		if _, ok := i["ignore-default-route"]; ok {
			v := flattenSystemInterfaceIpv6Vrrp6IgnoreDefaultRoute(i["ignore-default-route"], d, pre_append)
			tmp["ignore_default_route"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Vrrp6-IgnoreDefaultRoute")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "preempt"
		if _, ok := i["preempt"]; ok {
			v := flattenSystemInterfaceIpv6Vrrp6Preempt(i["preempt"], d, pre_append)
			tmp["preempt"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Vrrp6-Preempt")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "priority"
		if _, ok := i["priority"]; ok {
			v := flattenSystemInterfaceIpv6Vrrp6Priority(i["priority"], d, pre_append)
			tmp["priority"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Vrrp6-Priority")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "start_time"
		if _, ok := i["start-time"]; ok {
			v := flattenSystemInterfaceIpv6Vrrp6StartTime(i["start-time"], d, pre_append)
			tmp["start_time"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Vrrp6-StartTime")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "status"
		if _, ok := i["status"]; ok {
			v := flattenSystemInterfaceIpv6Vrrp6Status(i["status"], d, pre_append)
			tmp["status"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Vrrp6-Status")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrdst_priority"
		if _, ok := i["vrdst-priority"]; ok {
			v := flattenSystemInterfaceIpv6Vrrp6VrdstPriority(i["vrdst-priority"], d, pre_append)
			tmp["vrdst_priority"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Vrrp6-VrdstPriority")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrdst6"
		if _, ok := i["vrdst6"]; ok {
			v := flattenSystemInterfaceIpv6Vrrp6Vrdst6(i["vrdst6"], d, pre_append)
			tmp["vrdst6"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Vrrp6-Vrdst6")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrgrp"
		if _, ok := i["vrgrp"]; ok {
			v := flattenSystemInterfaceIpv6Vrrp6Vrgrp(i["vrgrp"], d, pre_append)
			tmp["vrgrp"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Vrrp6-Vrgrp")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrid"
		if _, ok := i["vrid"]; ok {
			v := flattenSystemInterfaceIpv6Vrrp6Vrid(i["vrid"], d, pre_append)
			tmp["vrid"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Vrrp6-Vrid")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrip6"
		if _, ok := i["vrip6"]; ok {
			v := flattenSystemInterfaceIpv6Vrrp6Vrip6(i["vrip6"], d, pre_append)
			tmp["vrip6"] = fortiAPISubPartPatch(v, "SystemInterfaceIpv6-Vrrp6-Vrip6")
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result
}

func flattenSystemInterfaceIpv6Vrrp6AcceptMode(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6AdvInterval(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6IgnoreDefaultRoute(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6Preempt(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6Priority(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6StartTime(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6Status(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6VrdstPriority(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6Vrdst6(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceIpv6Vrrp6Vrgrp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6Vrid(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceIpv6Vrrp6Vrip6(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceL2Forward(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceL2TpClient(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceL2TpClientSettings(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	i := v.(map[string]interface{})
	result := make(map[string]interface{})

	pre_append := "" // complex
	pre_append = pre + ".0." + "auth_type"
	if _, ok := i["auth-type"]; ok {
		result["auth_type"] = flattenSystemInterfaceL2TpClientSettingsAuthType(i["auth-type"], d, pre_append)
	}

	pre_append = pre + ".0." + "defaultgw"
	if _, ok := i["defaultgw"]; ok {
		result["defaultgw"] = flattenSystemInterfaceL2TpClientSettingsDefaultgw(i["defaultgw"], d, pre_append)
	}

	pre_append = pre + ".0." + "distance"
	if _, ok := i["distance"]; ok {
		result["distance"] = flattenSystemInterfaceL2TpClientSettingsDistance(i["distance"], d, pre_append)
	}

	pre_append = pre + ".0." + "hello_interval"
	if _, ok := i["hello-interval"]; ok {
		result["hello_interval"] = flattenSystemInterfaceL2TpClientSettingsHelloInterval(i["hello-interval"], d, pre_append)
	}

	pre_append = pre + ".0." + "ip"
	if _, ok := i["ip"]; ok {
		result["ip"] = flattenSystemInterfaceL2TpClientSettingsIp(i["ip"], d, pre_append)
	}

	pre_append = pre + ".0." + "mtu"
	if _, ok := i["mtu"]; ok {
		result["mtu"] = flattenSystemInterfaceL2TpClientSettingsMtu(i["mtu"], d, pre_append)
	}

	pre_append = pre + ".0." + "peer_host"
	if _, ok := i["peer-host"]; ok {
		result["peer_host"] = flattenSystemInterfaceL2TpClientSettingsPeerHost(i["peer-host"], d, pre_append)
	}

	pre_append = pre + ".0." + "peer_mask"
	if _, ok := i["peer-mask"]; ok {
		result["peer_mask"] = flattenSystemInterfaceL2TpClientSettingsPeerMask(i["peer-mask"], d, pre_append)
	}

	pre_append = pre + ".0." + "peer_port"
	if _, ok := i["peer-port"]; ok {
		result["peer_port"] = flattenSystemInterfaceL2TpClientSettingsPeerPort(i["peer-port"], d, pre_append)
	}

	pre_append = pre + ".0." + "priority"
	if _, ok := i["priority"]; ok {
		result["priority"] = flattenSystemInterfaceL2TpClientSettingsPriority(i["priority"], d, pre_append)
	}

	pre_append = pre + ".0." + "user"
	if _, ok := i["user"]; ok {
		result["user"] = flattenSystemInterfaceL2TpClientSettingsUser(i["user"], d, pre_append)
	}

	lastresult := []map[string]interface{}{result}
	return lastresult
}

func flattenSystemInterfaceL2TpClientSettingsAuthType(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceL2TpClientSettingsDefaultgw(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceL2TpClientSettingsDistance(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceL2TpClientSettingsHelloInterval(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceL2TpClientSettingsIp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceL2TpClientSettingsMtu(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceL2TpClientSettingsPeerHost(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceL2TpClientSettingsPeerMask(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceL2TpClientSettingsPeerPort(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceL2TpClientSettingsPriority(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceL2TpClientSettingsUser(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceLacpHaSecondary(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceLacpHaSlave(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceLacpMode(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceLacpSpeed(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceLcpEchoInterval(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceLcpMaxEchoFails(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceLinkUpDelay(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceLldpNetworkPolicy(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceLldpReception(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceLldpTransmission(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceMacaddr(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceManagedSubnetworkSize(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceManagementIp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceMaxEgressBurstRate(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceMaxEgressRate(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceMeasuredDownstreamBandwidth(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceMeasuredUpstreamBandwidth(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceMediatype(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceMember(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceMinLinks(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceMinLinksDown(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceMirroringDirection(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceMirroringFilter(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	i := v.(map[string]interface{})
	result := make(map[string]interface{})

	pre_append := "" // complex
	pre_append = pre + ".0." + "dbg_dump"
	if _, ok := i["dbg-dump"]; ok {
		result["dbg_dump"] = flattenSystemInterfaceMirroringFilterDbgDump(i["dbg-dump"], d, pre_append)
	}

	pre_append = pre + ".0." + "filter_dport"
	if _, ok := i["filter-dport"]; ok {
		result["filter_dport"] = flattenSystemInterfaceMirroringFilterFilterDport(i["filter-dport"], d, pre_append)
	}

	pre_append = pre + ".0." + "filter_dstip"
	if _, ok := i["filter-dstip"]; ok {
		result["filter_dstip"] = flattenSystemInterfaceMirroringFilterFilterDstip(i["filter-dstip"], d, pre_append)
	}

	pre_append = pre + ".0." + "filter_protocol"
	if _, ok := i["filter-protocol"]; ok {
		result["filter_protocol"] = flattenSystemInterfaceMirroringFilterFilterProtocol(i["filter-protocol"], d, pre_append)
	}

	pre_append = pre + ".0." + "filter_sport"
	if _, ok := i["filter-sport"]; ok {
		result["filter_sport"] = flattenSystemInterfaceMirroringFilterFilterSport(i["filter-sport"], d, pre_append)
	}

	pre_append = pre + ".0." + "filter_srcip"
	if _, ok := i["filter-srcip"]; ok {
		result["filter_srcip"] = flattenSystemInterfaceMirroringFilterFilterSrcip(i["filter-srcip"], d, pre_append)
	}

	lastresult := []map[string]interface{}{result}
	return lastresult
}

func flattenSystemInterfaceMirroringFilterDbgDump(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceMirroringFilterFilterDport(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceMirroringFilterFilterDstip(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceMirroringFilterFilterProtocol(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceMirroringFilterFilterSport(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceMirroringFilterFilterSrcip(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceMirroringPort(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceMode(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceMonitorBandwidth(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceMtu(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceMtuOverride(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceMuxType(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceName(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceNdiscforward(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceNetbiosForward(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceNetflowSampleRate(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceNetflowSampler(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceNetflowSamplerId(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceNpQosProfile(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceOutbandwidth(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePadtRetryTimeout(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePhyMode(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePhySetting(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	i := v.(map[string]interface{})
	result := make(map[string]interface{})

	pre_append := "" // complex
	pre_append = pre + ".0." + "signal_ok_threshold_value"
	if _, ok := i["signal-ok-threshold-value"]; ok {
		result["signal_ok_threshold_value"] = flattenSystemInterfacePhySettingSignalOkThresholdValue(i["signal-ok-threshold-value"], d, pre_append)
	}

	lastresult := []map[string]interface{}{result}
	return lastresult
}

func flattenSystemInterfacePhySettingSignalOkThresholdValue(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePoe(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePollingInterval(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePortMirroring(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePppoeEgressCos(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePppoeUnnumberedNegotiate(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePptpAuthType(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePptpClient(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePptpServerIp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePptpTimeout(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePptpUser(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePreserveSessionRoute(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePriority(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePriorityOverride(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceProxyCaptivePortal(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePvcAtmQos(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePvcChan(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePvcCrc(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePvcPcr(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePvcScr(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePvcVlanId(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePvcVlanRxId(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePvcVlanRxOp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePvcVlanTxId(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfacePvcVlanTxOp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceReachableTime(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceRedundantInterface(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceRemoteIp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceReplacemsgOverrideGroup(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceRetransmission(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceRingRx(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceRingTx(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceRole(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSampleDirection(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSampleRate(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSecondaryIp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSecondaryip(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "allowaccess"
		if _, ok := i["allowaccess"]; ok {
			v := flattenSystemInterfaceSecondaryipAllowaccess(i["allowaccess"], d, pre_append)
			tmp["allowaccess"] = fortiAPISubPartPatch(v, "SystemInterface-Secondaryip-Allowaccess")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "id"
		if _, ok := i["id"]; ok {
			v := flattenSystemInterfaceSecondaryipId(i["id"], d, pre_append)
			tmp["id"] = fortiAPISubPartPatch(v, "SystemInterface-Secondaryip-Id")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "ip"
		if _, ok := i["ip"]; ok {
			v := flattenSystemInterfaceSecondaryipIp(i["ip"], d, pre_append)
			tmp["ip"] = fortiAPISubPartPatch(v, "SystemInterface-Secondaryip-Ip")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "secip_relay_ip"
		if _, ok := i["secip-relay-ip"]; ok {
			v := flattenSystemInterfaceSecondaryipSecipRelayIp(i["secip-relay-ip"], d, pre_append)
			tmp["secip_relay_ip"] = fortiAPISubPartPatch(v, "SystemInterface-Secondaryip-SecipRelayIp")
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result
}

func flattenSystemInterfaceSecondaryipAllowaccess(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceSecondaryipId(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSecondaryipIp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceSecondaryipSecipRelayIp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSecurity8021XDynamicVlanId(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSecurity8021XMaster(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSecurity8021XMemberMode(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSecurity8021XMode(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSecurityExemptList(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceSecurityExternalLogout(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSecurityExternalWeb(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSecurityGroups(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceSecurityIpAuthBypass(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSecurityMacAuthBypass(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSecurityMode(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSecurityRedirectUrl(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSelectProfile30A35B(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceServiceName(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSflowSampler(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSfpDsl(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSfpDslAdslFallback(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSfpDslAutodetect(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSfpDslMac(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSnmpIndex(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSpeed(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSpilloverThreshold(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSrcCheck(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceStatus(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceStp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceStpHaSlave(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceStpEdge(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceStpHaSecondary(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceStpforward(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceStpforwardMode(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSubst(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSubstituteDstMac(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwAlgorithm(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwcFirstCreate(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwcVlan(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitch(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerAccessVlan(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerArpInspection(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerDhcpSnooping(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerDhcpSnoopingOption82(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerDhcpSnoopingVerifyMac(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerDynamic(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceSwitchControllerFeature(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerIgmpSnooping(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerIgmpSnoopingFastLeave(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerIgmpSnoopingProxy(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerIotScanning(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerLearningLimit(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerMgmtVlan(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerNac(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceSwitchControllerNetflowCollect(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerOffload(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerOffloadGw(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerOffloadIp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerRspanMode(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerSourceIp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSwitchControllerTrafficPolicy(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceSystemId(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceSystemIdType(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceTagging(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "category"
		if _, ok := i["category"]; ok {
			v := flattenSystemInterfaceTaggingCategory(i["category"], d, pre_append)
			tmp["category"] = fortiAPISubPartPatch(v, "SystemInterface-Tagging-Category")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "name"
		if _, ok := i["name"]; ok {
			v := flattenSystemInterfaceTaggingName(i["name"], d, pre_append)
			tmp["name"] = fortiAPISubPartPatch(v, "SystemInterface-Tagging-Name")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "tags"
		if _, ok := i["tags"]; ok {
			v := flattenSystemInterfaceTaggingTags(i["tags"], d, pre_append)
			tmp["tags"] = fortiAPISubPartPatch(v, "SystemInterface-Tagging-Tags")
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result
}

func flattenSystemInterfaceTaggingCategory(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceTaggingName(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceTaggingTags(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceTcMode(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceTcpMss(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceTrunk(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceTrustIp1(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceTrustIp2(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceTrustIp3(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceTrustIp61(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceTrustIp62(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceTrustIp63(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceType(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceUsername(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVci(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVdom(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceVectoring(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVindex(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVirtualMac(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVlanId(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVlanOpMode(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVlanProtocol(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVlanforward(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVlanid(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVpi(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVrf(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVrrp(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "accept_mode"
		if _, ok := i["accept-mode"]; ok {
			v := flattenSystemInterfaceVrrpAcceptMode(i["accept-mode"], d, pre_append)
			tmp["accept_mode"] = fortiAPISubPartPatch(v, "SystemInterface-Vrrp-AcceptMode")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "adv_interval"
		if _, ok := i["adv-interval"]; ok {
			v := flattenSystemInterfaceVrrpAdvInterval(i["adv-interval"], d, pre_append)
			tmp["adv_interval"] = fortiAPISubPartPatch(v, "SystemInterface-Vrrp-AdvInterval")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "ignore_default_route"
		if _, ok := i["ignore-default-route"]; ok {
			v := flattenSystemInterfaceVrrpIgnoreDefaultRoute(i["ignore-default-route"], d, pre_append)
			tmp["ignore_default_route"] = fortiAPISubPartPatch(v, "SystemInterface-Vrrp-IgnoreDefaultRoute")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "preempt"
		if _, ok := i["preempt"]; ok {
			v := flattenSystemInterfaceVrrpPreempt(i["preempt"], d, pre_append)
			tmp["preempt"] = fortiAPISubPartPatch(v, "SystemInterface-Vrrp-Preempt")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "priority"
		if _, ok := i["priority"]; ok {
			v := flattenSystemInterfaceVrrpPriority(i["priority"], d, pre_append)
			tmp["priority"] = fortiAPISubPartPatch(v, "SystemInterface-Vrrp-Priority")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "proxy_arp"
		if _, ok := i["proxy-arp"]; ok {
			v := flattenSystemInterfaceVrrpProxyArp(i["proxy-arp"], d, pre_append)
			tmp["proxy_arp"] = fortiAPISubPartPatch(v, "SystemInterface-Vrrp-ProxyArp")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "start_time"
		if _, ok := i["start-time"]; ok {
			v := flattenSystemInterfaceVrrpStartTime(i["start-time"], d, pre_append)
			tmp["start_time"] = fortiAPISubPartPatch(v, "SystemInterface-Vrrp-StartTime")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "status"
		if _, ok := i["status"]; ok {
			v := flattenSystemInterfaceVrrpStatus(i["status"], d, pre_append)
			tmp["status"] = fortiAPISubPartPatch(v, "SystemInterface-Vrrp-Status")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "version"
		if _, ok := i["version"]; ok {
			v := flattenSystemInterfaceVrrpVersion(i["version"], d, pre_append)
			tmp["version"] = fortiAPISubPartPatch(v, "SystemInterface-Vrrp-Version")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrdst"
		if _, ok := i["vrdst"]; ok {
			v := flattenSystemInterfaceVrrpVrdst(i["vrdst"], d, pre_append)
			tmp["vrdst"] = fortiAPISubPartPatch(v, "SystemInterface-Vrrp-Vrdst")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrdst_priority"
		if _, ok := i["vrdst-priority"]; ok {
			v := flattenSystemInterfaceVrrpVrdstPriority(i["vrdst-priority"], d, pre_append)
			tmp["vrdst_priority"] = fortiAPISubPartPatch(v, "SystemInterface-Vrrp-VrdstPriority")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrgrp"
		if _, ok := i["vrgrp"]; ok {
			v := flattenSystemInterfaceVrrpVrgrp(i["vrgrp"], d, pre_append)
			tmp["vrgrp"] = fortiAPISubPartPatch(v, "SystemInterface-Vrrp-Vrgrp")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrid"
		if _, ok := i["vrid"]; ok {
			v := flattenSystemInterfaceVrrpVrid(i["vrid"], d, pre_append)
			tmp["vrid"] = fortiAPISubPartPatch(v, "SystemInterface-Vrrp-Vrid")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrip"
		if _, ok := i["vrip"]; ok {
			v := flattenSystemInterfaceVrrpVrip(i["vrip"], d, pre_append)
			tmp["vrip"] = fortiAPISubPartPatch(v, "SystemInterface-Vrrp-Vrip")
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result
}

func flattenSystemInterfaceVrrpAcceptMode(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpAdvInterval(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpIgnoreDefaultRoute(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpPreempt(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpPriority(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpProxyArp(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "id"
		if _, ok := i["id"]; ok {
			v := flattenSystemInterfaceVrrpProxyArpId(i["id"], d, pre_append)
			tmp["id"] = fortiAPISubPartPatch(v, "SystemInterfaceVrrp-ProxyArp-Id")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "ip"
		if _, ok := i["ip"]; ok {
			v := flattenSystemInterfaceVrrpProxyArpIp(i["ip"], d, pre_append)
			tmp["ip"] = fortiAPISubPartPatch(v, "SystemInterfaceVrrp-ProxyArp-Ip")
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result
}

func flattenSystemInterfaceVrrpProxyArpId(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpProxyArpIp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpStartTime(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpStatus(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpVersion(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpVrdst(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceVrrpVrdstPriority(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpVrgrp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpVrid(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpVrip(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceVrrpVirtualMac(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWccp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWeight(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifi5GThreshold(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiAcl(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiApBand(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiAuth(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiAutoConnect(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiAutoSave(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiBroadcastSsid(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiDnsServer1(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiDnsServer2(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiEncrypt(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiFragmentThreshold(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiGateway(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiKeyindex(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiMacFilter(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiNetworks(v interface{}, d *schema.ResourceData, pre string) []map[string]interface{} {
	if v == nil {
		return nil
	}

	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	result := make([]map[string]interface{}, 0, len(l))

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})

		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "id"
		if _, ok := i["id"]; ok {
			v := flattenSystemInterfaceWifiNetworksId(i["id"], d, pre_append)
			tmp["id"] = fortiAPISubPartPatch(v, "SystemInterface-WifiNetworks-Id")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "obsolete_security_options"
		if _, ok := i["obsolete-security-options"]; ok {
			v := flattenSystemInterfaceWifiNetworksObsoleteSecurityOptions(i["obsolete-security-options"], d, pre_append)
			tmp["obsolete_security_options"] = fortiAPISubPartPatch(v, "SystemInterface-WifiNetworks-ObsoleteSecurityOptions")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_ca_certificate"
		if _, ok := i["wifi-ca-certificate"]; ok {
			v := flattenSystemInterfaceWifiNetworksWifiCaCertificate(i["wifi-ca-certificate"], d, pre_append)
			tmp["wifi_ca_certificate"] = fortiAPISubPartPatch(v, "SystemInterface-WifiNetworks-WifiCaCertificate")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_client_certificate"
		if _, ok := i["wifi-client-certificate"]; ok {
			v := flattenSystemInterfaceWifiNetworksWifiClientCertificate(i["wifi-client-certificate"], d, pre_append)
			tmp["wifi_client_certificate"] = fortiAPISubPartPatch(v, "SystemInterface-WifiNetworks-WifiClientCertificate")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_eap_type"
		if _, ok := i["wifi-eap-type"]; ok {
			v := flattenSystemInterfaceWifiNetworksWifiEapType(i["wifi-eap-type"], d, pre_append)
			tmp["wifi_eap_type"] = fortiAPISubPartPatch(v, "SystemInterface-WifiNetworks-WifiEapType")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_encrypt"
		if _, ok := i["wifi-encrypt"]; ok {
			v := flattenSystemInterfaceWifiNetworksWifiEncrypt(i["wifi-encrypt"], d, pre_append)
			tmp["wifi_encrypt"] = fortiAPISubPartPatch(v, "SystemInterface-WifiNetworks-WifiEncrypt")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_keyindex"
		if _, ok := i["wifi-keyindex"]; ok {
			v := flattenSystemInterfaceWifiNetworksWifiKeyindex(i["wifi-keyindex"], d, pre_append)
			tmp["wifi_keyindex"] = fortiAPISubPartPatch(v, "SystemInterface-WifiNetworks-WifiKeyindex")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_private_key"
		if _, ok := i["wifi-private-key"]; ok {
			v := flattenSystemInterfaceWifiNetworksWifiPrivateKey(i["wifi-private-key"], d, pre_append)
			tmp["wifi_private_key"] = fortiAPISubPartPatch(v, "SystemInterface-WifiNetworks-WifiPrivateKey")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_security"
		if _, ok := i["wifi-security"]; ok {
			v := flattenSystemInterfaceWifiNetworksWifiSecurity(i["wifi-security"], d, pre_append)
			tmp["wifi_security"] = fortiAPISubPartPatch(v, "SystemInterface-WifiNetworks-WifiSecurity")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_ssid"
		if _, ok := i["wifi-ssid"]; ok {
			v := flattenSystemInterfaceWifiNetworksWifiSsid(i["wifi-ssid"], d, pre_append)
			tmp["wifi_ssid"] = fortiAPISubPartPatch(v, "SystemInterface-WifiNetworks-WifiSsid")
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_username"
		if _, ok := i["wifi-username"]; ok {
			v := flattenSystemInterfaceWifiNetworksWifiUsername(i["wifi-username"], d, pre_append)
			tmp["wifi_username"] = fortiAPISubPartPatch(v, "SystemInterface-WifiNetworks-WifiUsername")
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result
}

func flattenSystemInterfaceWifiNetworksId(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiNetworksObsoleteSecurityOptions(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiNetworksWifiCaCertificate(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceWifiNetworksWifiClientCertificate(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceWifiNetworksWifiEapType(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiNetworksWifiEncrypt(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiNetworksWifiKeyindex(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiNetworksWifiPrivateKey(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiNetworksWifiSecurity(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiNetworksWifiSsid(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiNetworksWifiUsername(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiRadiusServer(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return flattenStringList(v)
}

func flattenSystemInterfaceWifiRtsThreshold(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiSecurity(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiSsid(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWifiUsergroup(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func flattenSystemInterfaceWinsIp(v interface{}, d *schema.ResourceData, pre string) interface{} {
	return v
}

func refreshObjectSystemInterface(d *schema.ResourceData, o map[string]interface{}) error {
	var err error

	if dssValue := d.Get("dynamic_sort_subtable"); dssValue == "" {
		d.Set("dynamic_sort_subtable", "false")
	}

	if err = d.Set("ac_name", flattenSystemInterfaceAcName(o["ac-name"], d, "ac_name")); err != nil {
		if vv, ok := fortiAPIPatch(o["ac-name"], "SystemInterface-AcName"); ok {
			if err = d.Set("ac_name", vv); err != nil {
				return fmt.Errorf("Error reading ac_name: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading ac_name: %v", err)
		}
	}

	if err = d.Set("aggregate", flattenSystemInterfaceAggregate(o["aggregate"], d, "aggregate")); err != nil {
		if vv, ok := fortiAPIPatch(o["aggregate"], "SystemInterface-Aggregate"); ok {
			if err = d.Set("aggregate", vv); err != nil {
				return fmt.Errorf("Error reading aggregate: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading aggregate: %v", err)
		}
	}

	if err = d.Set("aggregate_type", flattenSystemInterfaceAggregateType(o["aggregate-type"], d, "aggregate_type")); err != nil {
		if vv, ok := fortiAPIPatch(o["aggregate-type"], "SystemInterface-AggregateType"); ok {
			if err = d.Set("aggregate_type", vv); err != nil {
				return fmt.Errorf("Error reading aggregate_type: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading aggregate_type: %v", err)
		}
	}

	if err = d.Set("algorithm", flattenSystemInterfaceAlgorithm(o["algorithm"], d, "algorithm")); err != nil {
		if vv, ok := fortiAPIPatch(o["algorithm"], "SystemInterface-Algorithm"); ok {
			if err = d.Set("algorithm", vv); err != nil {
				return fmt.Errorf("Error reading algorithm: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading algorithm: %v", err)
		}
	}

	if err = d.Set("alias", flattenSystemInterfaceAlias(o["alias"], d, "alias")); err != nil {
		if vv, ok := fortiAPIPatch(o["alias"], "SystemInterface-Alias"); ok {
			if err = d.Set("alias", vv); err != nil {
				return fmt.Errorf("Error reading alias: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading alias: %v", err)
		}
	}

	if err = d.Set("allowaccess", flattenSystemInterfaceAllowaccess(o["allowaccess"], d, "allowaccess")); err != nil {
		if vv, ok := fortiAPIPatch(o["allowaccess"], "SystemInterface-Allowaccess"); ok {
			if err = d.Set("allowaccess", vv); err != nil {
				return fmt.Errorf("Error reading allowaccess: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading allowaccess: %v", err)
		}
	}

	if err = d.Set("annex", flattenSystemInterfaceAnnex(o["annex"], d, "annex")); err != nil {
		if vv, ok := fortiAPIPatch(o["annex"], "SystemInterface-Annex"); ok {
			if err = d.Set("annex", vv); err != nil {
				return fmt.Errorf("Error reading annex: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading annex: %v", err)
		}
	}

	if err = d.Set("ap_discover", flattenSystemInterfaceApDiscover(o["ap-discover"], d, "ap_discover")); err != nil {
		if vv, ok := fortiAPIPatch(o["ap-discover"], "SystemInterface-ApDiscover"); ok {
			if err = d.Set("ap_discover", vv); err != nil {
				return fmt.Errorf("Error reading ap_discover: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading ap_discover: %v", err)
		}
	}

	if err = d.Set("arpforward", flattenSystemInterfaceArpforward(o["arpforward"], d, "arpforward")); err != nil {
		if vv, ok := fortiAPIPatch(o["arpforward"], "SystemInterface-Arpforward"); ok {
			if err = d.Set("arpforward", vv); err != nil {
				return fmt.Errorf("Error reading arpforward: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading arpforward: %v", err)
		}
	}

	if err = d.Set("atm_protocol", flattenSystemInterfaceAtmProtocol(o["atm-protocol"], d, "atm_protocol")); err != nil {
		if vv, ok := fortiAPIPatch(o["atm-protocol"], "SystemInterface-AtmProtocol"); ok {
			if err = d.Set("atm_protocol", vv); err != nil {
				return fmt.Errorf("Error reading atm_protocol: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading atm_protocol: %v", err)
		}
	}

	if err = d.Set("auth_cert", flattenSystemInterfaceAuthCert(o["auth-cert"], d, "auth_cert")); err != nil {
		if vv, ok := fortiAPIPatch(o["auth-cert"], "SystemInterface-AuthCert"); ok {
			if err = d.Set("auth_cert", vv); err != nil {
				return fmt.Errorf("Error reading auth_cert: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading auth_cert: %v", err)
		}
	}

	if err = d.Set("auth_portal_addr", flattenSystemInterfaceAuthPortalAddr(o["auth-portal-addr"], d, "auth_portal_addr")); err != nil {
		if vv, ok := fortiAPIPatch(o["auth-portal-addr"], "SystemInterface-AuthPortalAddr"); ok {
			if err = d.Set("auth_portal_addr", vv); err != nil {
				return fmt.Errorf("Error reading auth_portal_addr: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading auth_portal_addr: %v", err)
		}
	}

	if err = d.Set("auth_type", flattenSystemInterfaceAuthType(o["auth-type"], d, "auth_type")); err != nil {
		if vv, ok := fortiAPIPatch(o["auth-type"], "SystemInterface-AuthType"); ok {
			if err = d.Set("auth_type", vv); err != nil {
				return fmt.Errorf("Error reading auth_type: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading auth_type: %v", err)
		}
	}

	if err = d.Set("auto_auth_extension_device", flattenSystemInterfaceAutoAuthExtensionDevice(o["auto-auth-extension-device"], d, "auto_auth_extension_device")); err != nil {
		if vv, ok := fortiAPIPatch(o["auto-auth-extension-device"], "SystemInterface-AutoAuthExtensionDevice"); ok {
			if err = d.Set("auto_auth_extension_device", vv); err != nil {
				return fmt.Errorf("Error reading auto_auth_extension_device: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading auto_auth_extension_device: %v", err)
		}
	}

	if err = d.Set("bandwidth_measure_time", flattenSystemInterfaceBandwidthMeasureTime(o["bandwidth-measure-time"], d, "bandwidth_measure_time")); err != nil {
		if vv, ok := fortiAPIPatch(o["bandwidth-measure-time"], "SystemInterface-BandwidthMeasureTime"); ok {
			if err = d.Set("bandwidth_measure_time", vv); err != nil {
				return fmt.Errorf("Error reading bandwidth_measure_time: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading bandwidth_measure_time: %v", err)
		}
	}

	if err = d.Set("bfd", flattenSystemInterfaceBfd(o["bfd"], d, "bfd")); err != nil {
		if vv, ok := fortiAPIPatch(o["bfd"], "SystemInterface-Bfd"); ok {
			if err = d.Set("bfd", vv); err != nil {
				return fmt.Errorf("Error reading bfd: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading bfd: %v", err)
		}
	}

	if err = d.Set("bfd_desired_min_tx", flattenSystemInterfaceBfdDesiredMinTx(o["bfd-desired-min-tx"], d, "bfd_desired_min_tx")); err != nil {
		if vv, ok := fortiAPIPatch(o["bfd-desired-min-tx"], "SystemInterface-BfdDesiredMinTx"); ok {
			if err = d.Set("bfd_desired_min_tx", vv); err != nil {
				return fmt.Errorf("Error reading bfd_desired_min_tx: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading bfd_desired_min_tx: %v", err)
		}
	}

	if err = d.Set("bfd_detect_mult", flattenSystemInterfaceBfdDetectMult(o["bfd-detect-mult"], d, "bfd_detect_mult")); err != nil {
		if vv, ok := fortiAPIPatch(o["bfd-detect-mult"], "SystemInterface-BfdDetectMult"); ok {
			if err = d.Set("bfd_detect_mult", vv); err != nil {
				return fmt.Errorf("Error reading bfd_detect_mult: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading bfd_detect_mult: %v", err)
		}
	}

	if err = d.Set("bfd_required_min_rx", flattenSystemInterfaceBfdRequiredMinRx(o["bfd-required-min-rx"], d, "bfd_required_min_rx")); err != nil {
		if vv, ok := fortiAPIPatch(o["bfd-required-min-rx"], "SystemInterface-BfdRequiredMinRx"); ok {
			if err = d.Set("bfd_required_min_rx", vv); err != nil {
				return fmt.Errorf("Error reading bfd_required_min_rx: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading bfd_required_min_rx: %v", err)
		}
	}

	if err = d.Set("broadcast_forticlient_discovery", flattenSystemInterfaceBroadcastForticlientDiscovery(o["broadcast-forticlient-discovery"], d, "broadcast_forticlient_discovery")); err != nil {
		if vv, ok := fortiAPIPatch(o["broadcast-forticlient-discovery"], "SystemInterface-BroadcastForticlientDiscovery"); ok {
			if err = d.Set("broadcast_forticlient_discovery", vv); err != nil {
				return fmt.Errorf("Error reading broadcast_forticlient_discovery: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading broadcast_forticlient_discovery: %v", err)
		}
	}

	if err = d.Set("broadcast_forward", flattenSystemInterfaceBroadcastForward(o["broadcast-forward"], d, "broadcast_forward")); err != nil {
		if vv, ok := fortiAPIPatch(o["broadcast-forward"], "SystemInterface-BroadcastForward"); ok {
			if err = d.Set("broadcast_forward", vv); err != nil {
				return fmt.Errorf("Error reading broadcast_forward: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading broadcast_forward: %v", err)
		}
	}

	if err = d.Set("captive_portal", flattenSystemInterfaceCaptivePortal(o["captive-portal"], d, "captive_portal")); err != nil {
		if vv, ok := fortiAPIPatch(o["captive-portal"], "SystemInterface-CaptivePortal"); ok {
			if err = d.Set("captive_portal", vv); err != nil {
				return fmt.Errorf("Error reading captive_portal: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading captive_portal: %v", err)
		}
	}

	if err = d.Set("cli_conn_status", flattenSystemInterfaceCliConnStatus(o["cli-conn-status"], d, "cli_conn_status")); err != nil {
		if vv, ok := fortiAPIPatch(o["cli-conn-status"], "SystemInterface-CliConnStatus"); ok {
			if err = d.Set("cli_conn_status", vv); err != nil {
				return fmt.Errorf("Error reading cli_conn_status: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading cli_conn_status: %v", err)
		}
	}

	if isImportTable() {
		if err = d.Set("client_options", flattenSystemInterfaceClientOptions(o["client-options"], d, "client_options")); err != nil {
			if vv, ok := fortiAPIPatch(o["client-options"], "SystemInterface-ClientOptions"); ok {
				if err = d.Set("client_options", vv); err != nil {
					return fmt.Errorf("Error reading client_options: %v", err)
				}
			} else {
				return fmt.Errorf("Error reading client_options: %v", err)
			}
		}
	} else {
		if _, ok := d.GetOk("client_options"); ok {
			if err = d.Set("client_options", flattenSystemInterfaceClientOptions(o["client-options"], d, "client_options")); err != nil {
				if vv, ok := fortiAPIPatch(o["client-options"], "SystemInterface-ClientOptions"); ok {
					if err = d.Set("client_options", vv); err != nil {
						return fmt.Errorf("Error reading client_options: %v", err)
					}
				} else {
					return fmt.Errorf("Error reading client_options: %v", err)
				}
			}
		}
	}

	if err = d.Set("color", flattenSystemInterfaceColor(o["color"], d, "color")); err != nil {
		if vv, ok := fortiAPIPatch(o["color"], "SystemInterface-Color"); ok {
			if err = d.Set("color", vv); err != nil {
				return fmt.Errorf("Error reading color: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading color: %v", err)
		}
	}

	if err = d.Set("dedicated_to", flattenSystemInterfaceDedicatedTo(o["dedicated-to"], d, "dedicated_to")); err != nil {
		if vv, ok := fortiAPIPatch(o["dedicated-to"], "SystemInterface-DedicatedTo"); ok {
			if err = d.Set("dedicated_to", vv); err != nil {
				return fmt.Errorf("Error reading dedicated_to: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dedicated_to: %v", err)
		}
	}

	if err = d.Set("default_purdue_level", flattenSystemInterfaceDefaultPurdueLevel(o["default-purdue-level"], d, "default_purdue_level")); err != nil {
		if vv, ok := fortiAPIPatch(o["default-purdue-level"], "SystemInterface-DefaultPurdueLevel"); ok {
			if err = d.Set("default_purdue_level", vv); err != nil {
				return fmt.Errorf("Error reading default_purdue_level: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading default_purdue_level: %v", err)
		}
	}

	if err = d.Set("defaultgw", flattenSystemInterfaceDefaultgw(o["defaultgw"], d, "defaultgw")); err != nil {
		if vv, ok := fortiAPIPatch(o["defaultgw"], "SystemInterface-Defaultgw"); ok {
			if err = d.Set("defaultgw", vv); err != nil {
				return fmt.Errorf("Error reading defaultgw: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading defaultgw: %v", err)
		}
	}

	if err = d.Set("description", flattenSystemInterfaceDescription(o["description"], d, "description")); err != nil {
		if vv, ok := fortiAPIPatch(o["description"], "SystemInterface-Description"); ok {
			if err = d.Set("description", vv); err != nil {
				return fmt.Errorf("Error reading description: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading description: %v", err)
		}
	}

	if err = d.Set("detected_peer_mtu", flattenSystemInterfaceDetectedPeerMtu(o["detected-peer-mtu"], d, "detected_peer_mtu")); err != nil {
		if vv, ok := fortiAPIPatch(o["detected-peer-mtu"], "SystemInterface-DetectedPeerMtu"); ok {
			if err = d.Set("detected_peer_mtu", vv); err != nil {
				return fmt.Errorf("Error reading detected_peer_mtu: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading detected_peer_mtu: %v", err)
		}
	}

	if err = d.Set("device_identification", flattenSystemInterfaceDeviceIdentification(o["device-identification"], d, "device_identification")); err != nil {
		if vv, ok := fortiAPIPatch(o["device-identification"], "SystemInterface-DeviceIdentification"); ok {
			if err = d.Set("device_identification", vv); err != nil {
				return fmt.Errorf("Error reading device_identification: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading device_identification: %v", err)
		}
	}

	if err = d.Set("device_user_identification", flattenSystemInterfaceDeviceUserIdentification(o["device-user-identification"], d, "device_user_identification")); err != nil {
		if vv, ok := fortiAPIPatch(o["device-user-identification"], "SystemInterface-DeviceUserIdentification"); ok {
			if err = d.Set("device_user_identification", vv); err != nil {
				return fmt.Errorf("Error reading device_user_identification: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading device_user_identification: %v", err)
		}
	}

	if err = d.Set("devindex", flattenSystemInterfaceDevindex(o["devindex"], d, "devindex")); err != nil {
		if vv, ok := fortiAPIPatch(o["devindex"], "SystemInterface-Devindex"); ok {
			if err = d.Set("devindex", vv); err != nil {
				return fmt.Errorf("Error reading devindex: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading devindex: %v", err)
		}
	}

	if err = d.Set("dhcp_broadcast_flag", flattenSystemInterfaceDhcpBroadcastFlag(o["dhcp-broadcast-flag"], d, "dhcp_broadcast_flag")); err != nil {
		if vv, ok := fortiAPIPatch(o["dhcp-broadcast-flag"], "SystemInterface-DhcpBroadcastFlag"); ok {
			if err = d.Set("dhcp_broadcast_flag", vv); err != nil {
				return fmt.Errorf("Error reading dhcp_broadcast_flag: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dhcp_broadcast_flag: %v", err)
		}
	}

	if err = d.Set("dhcp_classless_route_addition", flattenSystemInterfaceDhcpClasslessRouteAddition(o["dhcp-classless-route-addition"], d, "dhcp_classless_route_addition")); err != nil {
		if vv, ok := fortiAPIPatch(o["dhcp-classless-route-addition"], "SystemInterface-DhcpClasslessRouteAddition"); ok {
			if err = d.Set("dhcp_classless_route_addition", vv); err != nil {
				return fmt.Errorf("Error reading dhcp_classless_route_addition: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dhcp_classless_route_addition: %v", err)
		}
	}

	if err = d.Set("dhcp_client_identifier", flattenSystemInterfaceDhcpClientIdentifier(o["dhcp-client-identifier"], d, "dhcp_client_identifier")); err != nil {
		if vv, ok := fortiAPIPatch(o["dhcp-client-identifier"], "SystemInterface-DhcpClientIdentifier"); ok {
			if err = d.Set("dhcp_client_identifier", vv); err != nil {
				return fmt.Errorf("Error reading dhcp_client_identifier: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dhcp_client_identifier: %v", err)
		}
	}

	if err = d.Set("dhcp_relay_agent_option", flattenSystemInterfaceDhcpRelayAgentOption(o["dhcp-relay-agent-option"], d, "dhcp_relay_agent_option")); err != nil {
		if vv, ok := fortiAPIPatch(o["dhcp-relay-agent-option"], "SystemInterface-DhcpRelayAgentOption"); ok {
			if err = d.Set("dhcp_relay_agent_option", vv); err != nil {
				return fmt.Errorf("Error reading dhcp_relay_agent_option: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dhcp_relay_agent_option: %v", err)
		}
	}

	if err = d.Set("dhcp_relay_allow_no_end_option", flattenSystemInterfaceDhcpRelayAllowNoEndOption(o["dhcp-relay-allow-no-end-option"], d, "dhcp_relay_allow_no_end_option")); err != nil {
		if vv, ok := fortiAPIPatch(o["dhcp-relay-allow-no-end-option"], "SystemInterface-DhcpRelayAllowNoEndOption"); ok {
			if err = d.Set("dhcp_relay_allow_no_end_option", vv); err != nil {
				return fmt.Errorf("Error reading dhcp_relay_allow_no_end_option: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dhcp_relay_allow_no_end_option: %v", err)
		}
	}

	if err = d.Set("dhcp_relay_circuit_id", flattenSystemInterfaceDhcpRelayCircuitId(o["dhcp-relay-circuit-id"], d, "dhcp_relay_circuit_id")); err != nil {
		if vv, ok := fortiAPIPatch(o["dhcp-relay-circuit-id"], "SystemInterface-DhcpRelayCircuitId"); ok {
			if err = d.Set("dhcp_relay_circuit_id", vv); err != nil {
				return fmt.Errorf("Error reading dhcp_relay_circuit_id: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dhcp_relay_circuit_id: %v", err)
		}
	}

	if err = d.Set("dhcp_relay_interface", flattenSystemInterfaceDhcpRelayInterface(o["dhcp-relay-interface"], d, "dhcp_relay_interface")); err != nil {
		if vv, ok := fortiAPIPatch(o["dhcp-relay-interface"], "SystemInterface-DhcpRelayInterface"); ok {
			if err = d.Set("dhcp_relay_interface", vv); err != nil {
				return fmt.Errorf("Error reading dhcp_relay_interface: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dhcp_relay_interface: %v", err)
		}
	}

	if err = d.Set("dhcp_relay_interface_select_method", flattenSystemInterfaceDhcpRelayInterfaceSelectMethod(o["dhcp-relay-interface-select-method"], d, "dhcp_relay_interface_select_method")); err != nil {
		if vv, ok := fortiAPIPatch(o["dhcp-relay-interface-select-method"], "SystemInterface-DhcpRelayInterfaceSelectMethod"); ok {
			if err = d.Set("dhcp_relay_interface_select_method", vv); err != nil {
				return fmt.Errorf("Error reading dhcp_relay_interface_select_method: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dhcp_relay_interface_select_method: %v", err)
		}
	}

	if err = d.Set("dhcp_relay_ip", flattenSystemInterfaceDhcpRelayIp(o["dhcp-relay-ip"], d, "dhcp_relay_ip")); err != nil {
		if vv, ok := fortiAPIPatch(o["dhcp-relay-ip"], "SystemInterface-DhcpRelayIp"); ok {
			if err = d.Set("dhcp_relay_ip", vv); err != nil {
				return fmt.Errorf("Error reading dhcp_relay_ip: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dhcp_relay_ip: %v", err)
		}
	}

	if err = d.Set("dhcp_relay_link_selection", flattenSystemInterfaceDhcpRelayLinkSelection(o["dhcp-relay-link-selection"], d, "dhcp_relay_link_selection")); err != nil {
		if vv, ok := fortiAPIPatch(o["dhcp-relay-link-selection"], "SystemInterface-DhcpRelayLinkSelection"); ok {
			if err = d.Set("dhcp_relay_link_selection", vv); err != nil {
				return fmt.Errorf("Error reading dhcp_relay_link_selection: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dhcp_relay_link_selection: %v", err)
		}
	}

	if err = d.Set("dhcp_relay_request_all_server", flattenSystemInterfaceDhcpRelayRequestAllServer(o["dhcp-relay-request-all-server"], d, "dhcp_relay_request_all_server")); err != nil {
		if vv, ok := fortiAPIPatch(o["dhcp-relay-request-all-server"], "SystemInterface-DhcpRelayRequestAllServer"); ok {
			if err = d.Set("dhcp_relay_request_all_server", vv); err != nil {
				return fmt.Errorf("Error reading dhcp_relay_request_all_server: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dhcp_relay_request_all_server: %v", err)
		}
	}

	if err = d.Set("dhcp_relay_service", flattenSystemInterfaceDhcpRelayService(o["dhcp-relay-service"], d, "dhcp_relay_service")); err != nil {
		if vv, ok := fortiAPIPatch(o["dhcp-relay-service"], "SystemInterface-DhcpRelayService"); ok {
			if err = d.Set("dhcp_relay_service", vv); err != nil {
				return fmt.Errorf("Error reading dhcp_relay_service: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dhcp_relay_service: %v", err)
		}
	}

	if err = d.Set("dhcp_relay_source_ip", flattenSystemInterfaceDhcpRelaySourceIp(o["dhcp-relay-source-ip"], d, "dhcp_relay_source_ip")); err != nil {
		if vv, ok := fortiAPIPatch(o["dhcp-relay-source-ip"], "SystemInterface-DhcpRelaySourceIp"); ok {
			if err = d.Set("dhcp_relay_source_ip", vv); err != nil {
				return fmt.Errorf("Error reading dhcp_relay_source_ip: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dhcp_relay_source_ip: %v", err)
		}
	}

	if err = d.Set("dhcp_relay_type", flattenSystemInterfaceDhcpRelayType(o["dhcp-relay-type"], d, "dhcp_relay_type")); err != nil {
		if vv, ok := fortiAPIPatch(o["dhcp-relay-type"], "SystemInterface-DhcpRelayType"); ok {
			if err = d.Set("dhcp_relay_type", vv); err != nil {
				return fmt.Errorf("Error reading dhcp_relay_type: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dhcp_relay_type: %v", err)
		}
	}

	if err = d.Set("dhcp_relay_vrf_select", flattenSystemInterfaceDhcpRelayVrfSelect(o["dhcp-relay-vrf-select"], d, "dhcp_relay_vrf_select")); err != nil {
		if vv, ok := fortiAPIPatch(o["dhcp-relay-vrf-select"], "SystemInterface-DhcpRelayVrfSelect"); ok {
			if err = d.Set("dhcp_relay_vrf_select", vv); err != nil {
				return fmt.Errorf("Error reading dhcp_relay_vrf_select: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dhcp_relay_vrf_select: %v", err)
		}
	}

	if err = d.Set("dhcp_renew_time", flattenSystemInterfaceDhcpRenewTime(o["dhcp-renew-time"], d, "dhcp_renew_time")); err != nil {
		if vv, ok := fortiAPIPatch(o["dhcp-renew-time"], "SystemInterface-DhcpRenewTime"); ok {
			if err = d.Set("dhcp_renew_time", vv); err != nil {
				return fmt.Errorf("Error reading dhcp_renew_time: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dhcp_renew_time: %v", err)
		}
	}

	if err = d.Set("dhcp_smart_relay", flattenSystemInterfaceDhcpSmartRelay(o["dhcp-smart-relay"], d, "dhcp_smart_relay")); err != nil {
		if vv, ok := fortiAPIPatch(o["dhcp-smart-relay"], "SystemInterface-DhcpSmartRelay"); ok {
			if err = d.Set("dhcp_smart_relay", vv); err != nil {
				return fmt.Errorf("Error reading dhcp_smart_relay: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dhcp_smart_relay: %v", err)
		}
	}

	if isImportTable() {
		if err = d.Set("dhcp_snooping_server_list", flattenSystemInterfaceDhcpSnoopingServerList(o["dhcp-snooping-server-list"], d, "dhcp_snooping_server_list")); err != nil {
			if vv, ok := fortiAPIPatch(o["dhcp-snooping-server-list"], "SystemInterface-DhcpSnoopingServerList"); ok {
				if err = d.Set("dhcp_snooping_server_list", vv); err != nil {
					return fmt.Errorf("Error reading dhcp_snooping_server_list: %v", err)
				}
			} else {
				return fmt.Errorf("Error reading dhcp_snooping_server_list: %v", err)
			}
		}
	} else {
		if _, ok := d.GetOk("dhcp_snooping_server_list"); ok {
			if err = d.Set("dhcp_snooping_server_list", flattenSystemInterfaceDhcpSnoopingServerList(o["dhcp-snooping-server-list"], d, "dhcp_snooping_server_list")); err != nil {
				if vv, ok := fortiAPIPatch(o["dhcp-snooping-server-list"], "SystemInterface-DhcpSnoopingServerList"); ok {
					if err = d.Set("dhcp_snooping_server_list", vv); err != nil {
						return fmt.Errorf("Error reading dhcp_snooping_server_list: %v", err)
					}
				} else {
					return fmt.Errorf("Error reading dhcp_snooping_server_list: %v", err)
				}
			}
		}
	}

	if err = d.Set("disc_retry_timeout", flattenSystemInterfaceDiscRetryTimeout(o["disc-retry-timeout"], d, "disc_retry_timeout")); err != nil {
		if vv, ok := fortiAPIPatch(o["disc-retry-timeout"], "SystemInterface-DiscRetryTimeout"); ok {
			if err = d.Set("disc_retry_timeout", vv); err != nil {
				return fmt.Errorf("Error reading disc_retry_timeout: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading disc_retry_timeout: %v", err)
		}
	}

	if err = d.Set("disconnect_threshold", flattenSystemInterfaceDisconnectThreshold(o["disconnect-threshold"], d, "disconnect_threshold")); err != nil {
		if vv, ok := fortiAPIPatch(o["disconnect-threshold"], "SystemInterface-DisconnectThreshold"); ok {
			if err = d.Set("disconnect_threshold", vv); err != nil {
				return fmt.Errorf("Error reading disconnect_threshold: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading disconnect_threshold: %v", err)
		}
	}

	if err = d.Set("distance", flattenSystemInterfaceDistance(o["distance"], d, "distance")); err != nil {
		if vv, ok := fortiAPIPatch(o["distance"], "SystemInterface-Distance"); ok {
			if err = d.Set("distance", vv); err != nil {
				return fmt.Errorf("Error reading distance: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading distance: %v", err)
		}
	}

	if err = d.Set("dns_server_override", flattenSystemInterfaceDnsServerOverride(o["dns-server-override"], d, "dns_server_override")); err != nil {
		if vv, ok := fortiAPIPatch(o["dns-server-override"], "SystemInterface-DnsServerOverride"); ok {
			if err = d.Set("dns_server_override", vv); err != nil {
				return fmt.Errorf("Error reading dns_server_override: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dns_server_override: %v", err)
		}
	}

	if err = d.Set("dns_server_protocol", flattenSystemInterfaceDnsServerProtocol(o["dns-server-protocol"], d, "dns_server_protocol")); err != nil {
		if vv, ok := fortiAPIPatch(o["dns-server-protocol"], "SystemInterface-DnsServerProtocol"); ok {
			if err = d.Set("dns_server_protocol", vv); err != nil {
				return fmt.Errorf("Error reading dns_server_protocol: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading dns_server_protocol: %v", err)
		}
	}

	if err = d.Set("drop_fragment", flattenSystemInterfaceDropFragment(o["drop-fragment"], d, "drop_fragment")); err != nil {
		if vv, ok := fortiAPIPatch(o["drop-fragment"], "SystemInterface-DropFragment"); ok {
			if err = d.Set("drop_fragment", vv); err != nil {
				return fmt.Errorf("Error reading drop_fragment: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading drop_fragment: %v", err)
		}
	}

	if err = d.Set("drop_overlapped_fragment", flattenSystemInterfaceDropOverlappedFragment(o["drop-overlapped-fragment"], d, "drop_overlapped_fragment")); err != nil {
		if vv, ok := fortiAPIPatch(o["drop-overlapped-fragment"], "SystemInterface-DropOverlappedFragment"); ok {
			if err = d.Set("drop_overlapped_fragment", vv); err != nil {
				return fmt.Errorf("Error reading drop_overlapped_fragment: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading drop_overlapped_fragment: %v", err)
		}
	}

	if err = d.Set("eap_ca_cert", flattenSystemInterfaceEapCaCert(o["eap-ca-cert"], d, "eap_ca_cert")); err != nil {
		if vv, ok := fortiAPIPatch(o["eap-ca-cert"], "SystemInterface-EapCaCert"); ok {
			if err = d.Set("eap_ca_cert", vv); err != nil {
				return fmt.Errorf("Error reading eap_ca_cert: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading eap_ca_cert: %v", err)
		}
	}

	if err = d.Set("eap_identity", flattenSystemInterfaceEapIdentity(o["eap-identity"], d, "eap_identity")); err != nil {
		if vv, ok := fortiAPIPatch(o["eap-identity"], "SystemInterface-EapIdentity"); ok {
			if err = d.Set("eap_identity", vv); err != nil {
				return fmt.Errorf("Error reading eap_identity: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading eap_identity: %v", err)
		}
	}

	if err = d.Set("eap_method", flattenSystemInterfaceEapMethod(o["eap-method"], d, "eap_method")); err != nil {
		if vv, ok := fortiAPIPatch(o["eap-method"], "SystemInterface-EapMethod"); ok {
			if err = d.Set("eap_method", vv); err != nil {
				return fmt.Errorf("Error reading eap_method: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading eap_method: %v", err)
		}
	}

	if err = d.Set("eap_supplicant", flattenSystemInterfaceEapSupplicant(o["eap-supplicant"], d, "eap_supplicant")); err != nil {
		if vv, ok := fortiAPIPatch(o["eap-supplicant"], "SystemInterface-EapSupplicant"); ok {
			if err = d.Set("eap_supplicant", vv); err != nil {
				return fmt.Errorf("Error reading eap_supplicant: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading eap_supplicant: %v", err)
		}
	}

	if err = d.Set("eap_user_cert", flattenSystemInterfaceEapUserCert(o["eap-user-cert"], d, "eap_user_cert")); err != nil {
		if vv, ok := fortiAPIPatch(o["eap-user-cert"], "SystemInterface-EapUserCert"); ok {
			if err = d.Set("eap_user_cert", vv); err != nil {
				return fmt.Errorf("Error reading eap_user_cert: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading eap_user_cert: %v", err)
		}
	}

	if err = d.Set("egress_cos", flattenSystemInterfaceEgressCos(o["egress-cos"], d, "egress_cos")); err != nil {
		if vv, ok := fortiAPIPatch(o["egress-cos"], "SystemInterface-EgressCos"); ok {
			if err = d.Set("egress_cos", vv); err != nil {
				return fmt.Errorf("Error reading egress_cos: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading egress_cos: %v", err)
		}
	}

	if isImportTable() {
		if err = d.Set("egress_queues", flattenSystemInterfaceEgressQueues(o["egress-queues"], d, "egress_queues")); err != nil {
			if vv, ok := fortiAPIPatch(o["egress-queues"], "SystemInterface-EgressQueues"); ok {
				if err = d.Set("egress_queues", vv); err != nil {
					return fmt.Errorf("Error reading egress_queues: %v", err)
				}
			} else {
				return fmt.Errorf("Error reading egress_queues: %v", err)
			}
		}
	} else {
		if _, ok := d.GetOk("egress_queues"); ok {
			if err = d.Set("egress_queues", flattenSystemInterfaceEgressQueues(o["egress-queues"], d, "egress_queues")); err != nil {
				if vv, ok := fortiAPIPatch(o["egress-queues"], "SystemInterface-EgressQueues"); ok {
					if err = d.Set("egress_queues", vv); err != nil {
						return fmt.Errorf("Error reading egress_queues: %v", err)
					}
				} else {
					return fmt.Errorf("Error reading egress_queues: %v", err)
				}
			}
		}
	}

	if err = d.Set("egress_shaping_profile", flattenSystemInterfaceEgressShapingProfile(o["egress-shaping-profile"], d, "egress_shaping_profile")); err != nil {
		if vv, ok := fortiAPIPatch(o["egress-shaping-profile"], "SystemInterface-EgressShapingProfile"); ok {
			if err = d.Set("egress_shaping_profile", vv); err != nil {
				return fmt.Errorf("Error reading egress_shaping_profile: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading egress_shaping_profile: %v", err)
		}
	}

	if err = d.Set("eip", flattenSystemInterfaceEip(o["eip"], d, "eip")); err != nil {
		if vv, ok := fortiAPIPatch(o["eip"], "SystemInterface-Eip"); ok {
			if err = d.Set("eip", vv); err != nil {
				return fmt.Errorf("Error reading eip: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading eip: %v", err)
		}
	}

	if err = d.Set("estimated_downstream_bandwidth", flattenSystemInterfaceEstimatedDownstreamBandwidth(o["estimated-downstream-bandwidth"], d, "estimated_downstream_bandwidth")); err != nil {
		if vv, ok := fortiAPIPatch(o["estimated-downstream-bandwidth"], "SystemInterface-EstimatedDownstreamBandwidth"); ok {
			if err = d.Set("estimated_downstream_bandwidth", vv); err != nil {
				return fmt.Errorf("Error reading estimated_downstream_bandwidth: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading estimated_downstream_bandwidth: %v", err)
		}
	}

	if err = d.Set("estimated_upstream_bandwidth", flattenSystemInterfaceEstimatedUpstreamBandwidth(o["estimated-upstream-bandwidth"], d, "estimated_upstream_bandwidth")); err != nil {
		if vv, ok := fortiAPIPatch(o["estimated-upstream-bandwidth"], "SystemInterface-EstimatedUpstreamBandwidth"); ok {
			if err = d.Set("estimated_upstream_bandwidth", vv); err != nil {
				return fmt.Errorf("Error reading estimated_upstream_bandwidth: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading estimated_upstream_bandwidth: %v", err)
		}
	}

	if err = d.Set("exclude_signatures", flattenSystemInterfaceExcludeSignatures(o["exclude-signatures"], d, "exclude_signatures")); err != nil {
		if vv, ok := fortiAPIPatch(o["exclude-signatures"], "SystemInterface-ExcludeSignatures"); ok {
			if err = d.Set("exclude_signatures", vv); err != nil {
				return fmt.Errorf("Error reading exclude_signatures: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading exclude_signatures: %v", err)
		}
	}

	if err = d.Set("explicit_ftp_proxy", flattenSystemInterfaceExplicitFtpProxy(o["explicit-ftp-proxy"], d, "explicit_ftp_proxy")); err != nil {
		if vv, ok := fortiAPIPatch(o["explicit-ftp-proxy"], "SystemInterface-ExplicitFtpProxy"); ok {
			if err = d.Set("explicit_ftp_proxy", vv); err != nil {
				return fmt.Errorf("Error reading explicit_ftp_proxy: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading explicit_ftp_proxy: %v", err)
		}
	}

	if err = d.Set("explicit_web_proxy", flattenSystemInterfaceExplicitWebProxy(o["explicit-web-proxy"], d, "explicit_web_proxy")); err != nil {
		if vv, ok := fortiAPIPatch(o["explicit-web-proxy"], "SystemInterface-ExplicitWebProxy"); ok {
			if err = d.Set("explicit_web_proxy", vv); err != nil {
				return fmt.Errorf("Error reading explicit_web_proxy: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading explicit_web_proxy: %v", err)
		}
	}

	if err = d.Set("external", flattenSystemInterfaceExternal(o["external"], d, "external")); err != nil {
		if vv, ok := fortiAPIPatch(o["external"], "SystemInterface-External"); ok {
			if err = d.Set("external", vv); err != nil {
				return fmt.Errorf("Error reading external: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading external: %v", err)
		}
	}

	if err = d.Set("fail_action_on_extender", flattenSystemInterfaceFailActionOnExtender(o["fail-action-on-extender"], d, "fail_action_on_extender")); err != nil {
		if vv, ok := fortiAPIPatch(o["fail-action-on-extender"], "SystemInterface-FailActionOnExtender"); ok {
			if err = d.Set("fail_action_on_extender", vv); err != nil {
				return fmt.Errorf("Error reading fail_action_on_extender: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading fail_action_on_extender: %v", err)
		}
	}

	if err = d.Set("fail_alert_interfaces", flattenSystemInterfaceFailAlertInterfaces(o["fail-alert-interfaces"], d, "fail_alert_interfaces")); err != nil {
		if vv, ok := fortiAPIPatch(o["fail-alert-interfaces"], "SystemInterface-FailAlertInterfaces"); ok {
			if err = d.Set("fail_alert_interfaces", vv); err != nil {
				return fmt.Errorf("Error reading fail_alert_interfaces: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading fail_alert_interfaces: %v", err)
		}
	}

	if err = d.Set("fail_alert_method", flattenSystemInterfaceFailAlertMethod(o["fail-alert-method"], d, "fail_alert_method")); err != nil {
		if vv, ok := fortiAPIPatch(o["fail-alert-method"], "SystemInterface-FailAlertMethod"); ok {
			if err = d.Set("fail_alert_method", vv); err != nil {
				return fmt.Errorf("Error reading fail_alert_method: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading fail_alert_method: %v", err)
		}
	}

	if err = d.Set("fail_detect", flattenSystemInterfaceFailDetect(o["fail-detect"], d, "fail_detect")); err != nil {
		if vv, ok := fortiAPIPatch(o["fail-detect"], "SystemInterface-FailDetect"); ok {
			if err = d.Set("fail_detect", vv); err != nil {
				return fmt.Errorf("Error reading fail_detect: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading fail_detect: %v", err)
		}
	}

	if err = d.Set("fail_detect_option", flattenSystemInterfaceFailDetectOption(o["fail-detect-option"], d, "fail_detect_option")); err != nil {
		if vv, ok := fortiAPIPatch(o["fail-detect-option"], "SystemInterface-FailDetectOption"); ok {
			if err = d.Set("fail_detect_option", vv); err != nil {
				return fmt.Errorf("Error reading fail_detect_option: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading fail_detect_option: %v", err)
		}
	}

	if err = d.Set("fortilink", flattenSystemInterfaceFortilink(o["fortilink"], d, "fortilink")); err != nil {
		if vv, ok := fortiAPIPatch(o["fortilink"], "SystemInterface-Fortilink"); ok {
			if err = d.Set("fortilink", vv); err != nil {
				return fmt.Errorf("Error reading fortilink: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading fortilink: %v", err)
		}
	}

	if err = d.Set("fortilink_backup_link", flattenSystemInterfaceFortilinkBackupLink(o["fortilink-backup-link"], d, "fortilink_backup_link")); err != nil {
		if vv, ok := fortiAPIPatch(o["fortilink-backup-link"], "SystemInterface-FortilinkBackupLink"); ok {
			if err = d.Set("fortilink_backup_link", vv); err != nil {
				return fmt.Errorf("Error reading fortilink_backup_link: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading fortilink_backup_link: %v", err)
		}
	}

	if err = d.Set("fortilink_neighbor_detect", flattenSystemInterfaceFortilinkNeighborDetect(o["fortilink-neighbor-detect"], d, "fortilink_neighbor_detect")); err != nil {
		if vv, ok := fortiAPIPatch(o["fortilink-neighbor-detect"], "SystemInterface-FortilinkNeighborDetect"); ok {
			if err = d.Set("fortilink_neighbor_detect", vv); err != nil {
				return fmt.Errorf("Error reading fortilink_neighbor_detect: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading fortilink_neighbor_detect: %v", err)
		}
	}

	if err = d.Set("fortilink_split_interface", flattenSystemInterfaceFortilinkSplitInterface(o["fortilink-split-interface"], d, "fortilink_split_interface")); err != nil {
		if vv, ok := fortiAPIPatch(o["fortilink-split-interface"], "SystemInterface-FortilinkSplitInterface"); ok {
			if err = d.Set("fortilink_split_interface", vv); err != nil {
				return fmt.Errorf("Error reading fortilink_split_interface: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading fortilink_split_interface: %v", err)
		}
	}

	if err = d.Set("fortilink_stacking", flattenSystemInterfaceFortilinkStacking(o["fortilink-stacking"], d, "fortilink_stacking")); err != nil {
		if vv, ok := fortiAPIPatch(o["fortilink-stacking"], "SystemInterface-FortilinkStacking"); ok {
			if err = d.Set("fortilink_stacking", vv); err != nil {
				return fmt.Errorf("Error reading fortilink_stacking: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading fortilink_stacking: %v", err)
		}
	}

	if err = d.Set("forward_domain", flattenSystemInterfaceForwardDomain(o["forward-domain"], d, "forward_domain")); err != nil {
		if vv, ok := fortiAPIPatch(o["forward-domain"], "SystemInterface-ForwardDomain"); ok {
			if err = d.Set("forward_domain", vv); err != nil {
				return fmt.Errorf("Error reading forward_domain: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading forward_domain: %v", err)
		}
	}

	if err = d.Set("forward_error_correction", flattenSystemInterfaceForwardErrorCorrection(o["forward-error-correction"], d, "forward_error_correction")); err != nil {
		if vv, ok := fortiAPIPatch(o["forward-error-correction"], "SystemInterface-ForwardErrorCorrection"); ok {
			if err = d.Set("forward_error_correction", vv); err != nil {
				return fmt.Errorf("Error reading forward_error_correction: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading forward_error_correction: %v", err)
		}
	}

	if err = d.Set("gateway_address", flattenSystemInterfaceGatewayAddress(o["gateway-address"], d, "gateway_address")); err != nil {
		if vv, ok := fortiAPIPatch(o["gateway-address"], "SystemInterface-GatewayAddress"); ok {
			if err = d.Set("gateway_address", vv); err != nil {
				return fmt.Errorf("Error reading gateway_address: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading gateway_address: %v", err)
		}
	}

	if err = d.Set("gi_gk", flattenSystemInterfaceGiGk(o["gi-gk"], d, "gi_gk")); err != nil {
		if vv, ok := fortiAPIPatch(o["gi-gk"], "SystemInterface-GiGk"); ok {
			if err = d.Set("gi_gk", vv); err != nil {
				return fmt.Errorf("Error reading gi_gk: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading gi_gk: %v", err)
		}
	}

	if err = d.Set("icmp_accept_redirect", flattenSystemInterfaceIcmpAcceptRedirect(o["icmp-accept-redirect"], d, "icmp_accept_redirect")); err != nil {
		if vv, ok := fortiAPIPatch(o["icmp-accept-redirect"], "SystemInterface-IcmpAcceptRedirect"); ok {
			if err = d.Set("icmp_accept_redirect", vv); err != nil {
				return fmt.Errorf("Error reading icmp_accept_redirect: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading icmp_accept_redirect: %v", err)
		}
	}

	if err = d.Set("icmp_send_redirect", flattenSystemInterfaceIcmpSendRedirect(o["icmp-send-redirect"], d, "icmp_send_redirect")); err != nil {
		if vv, ok := fortiAPIPatch(o["icmp-send-redirect"], "SystemInterface-IcmpSendRedirect"); ok {
			if err = d.Set("icmp_send_redirect", vv); err != nil {
				return fmt.Errorf("Error reading icmp_send_redirect: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading icmp_send_redirect: %v", err)
		}
	}

	if err = d.Set("ident_accept", flattenSystemInterfaceIdentAccept(o["ident-accept"], d, "ident_accept")); err != nil {
		if vv, ok := fortiAPIPatch(o["ident-accept"], "SystemInterface-IdentAccept"); ok {
			if err = d.Set("ident_accept", vv); err != nil {
				return fmt.Errorf("Error reading ident_accept: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading ident_accept: %v", err)
		}
	}

	if err = d.Set("idle_timeout", flattenSystemInterfaceIdleTimeout(o["idle-timeout"], d, "idle_timeout")); err != nil {
		if vv, ok := fortiAPIPatch(o["idle-timeout"], "SystemInterface-IdleTimeout"); ok {
			if err = d.Set("idle_timeout", vv); err != nil {
				return fmt.Errorf("Error reading idle_timeout: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading idle_timeout: %v", err)
		}
	}

	if err = d.Set("ike_saml_server", flattenSystemInterfaceIkeSamlServer(o["ike-saml-server"], d, "ike_saml_server")); err != nil {
		if vv, ok := fortiAPIPatch(o["ike-saml-server"], "SystemInterface-IkeSamlServer"); ok {
			if err = d.Set("ike_saml_server", vv); err != nil {
				return fmt.Errorf("Error reading ike_saml_server: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading ike_saml_server: %v", err)
		}
	}

	if err = d.Set("inbandwidth", flattenSystemInterfaceInbandwidth(o["inbandwidth"], d, "inbandwidth")); err != nil {
		if vv, ok := fortiAPIPatch(o["inbandwidth"], "SystemInterface-Inbandwidth"); ok {
			if err = d.Set("inbandwidth", vv); err != nil {
				return fmt.Errorf("Error reading inbandwidth: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading inbandwidth: %v", err)
		}
	}

	if err = d.Set("ingress_cos", flattenSystemInterfaceIngressCos(o["ingress-cos"], d, "ingress_cos")); err != nil {
		if vv, ok := fortiAPIPatch(o["ingress-cos"], "SystemInterface-IngressCos"); ok {
			if err = d.Set("ingress_cos", vv); err != nil {
				return fmt.Errorf("Error reading ingress_cos: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading ingress_cos: %v", err)
		}
	}

	if err = d.Set("ingress_shaping_profile", flattenSystemInterfaceIngressShapingProfile(o["ingress-shaping-profile"], d, "ingress_shaping_profile")); err != nil {
		if vv, ok := fortiAPIPatch(o["ingress-shaping-profile"], "SystemInterface-IngressShapingProfile"); ok {
			if err = d.Set("ingress_shaping_profile", vv); err != nil {
				return fmt.Errorf("Error reading ingress_shaping_profile: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading ingress_shaping_profile: %v", err)
		}
	}

	if err = d.Set("ingress_spillover_threshold", flattenSystemInterfaceIngressSpilloverThreshold(o["ingress-spillover-threshold"], d, "ingress_spillover_threshold")); err != nil {
		if vv, ok := fortiAPIPatch(o["ingress-spillover-threshold"], "SystemInterface-IngressSpilloverThreshold"); ok {
			if err = d.Set("ingress_spillover_threshold", vv); err != nil {
				return fmt.Errorf("Error reading ingress_spillover_threshold: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading ingress_spillover_threshold: %v", err)
		}
	}

	if err = d.Set("interconnect_profile", flattenSystemInterfaceInterconnectProfile(o["interconnect-profile"], d, "interconnect_profile")); err != nil {
		if vv, ok := fortiAPIPatch(o["interconnect-profile"], "SystemInterface-InterconnectProfile"); ok {
			if err = d.Set("interconnect_profile", vv); err != nil {
				return fmt.Errorf("Error reading interconnect_profile: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading interconnect_profile: %v", err)
		}
	}

	if err = d.Set("interface", flattenSystemInterfaceInterface(o["interface"], d, "interface")); err != nil {
		if vv, ok := fortiAPIPatch(o["interface"], "SystemInterface-Interface"); ok {
			if err = d.Set("interface", vv); err != nil {
				return fmt.Errorf("Error reading interface: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading interface: %v", err)
		}
	}

	if err = d.Set("internal", flattenSystemInterfaceInternal(o["internal"], d, "internal")); err != nil {
		if vv, ok := fortiAPIPatch(o["internal"], "SystemInterface-Internal"); ok {
			if err = d.Set("internal", vv); err != nil {
				return fmt.Errorf("Error reading internal: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading internal: %v", err)
		}
	}

	if err = d.Set("ip", flattenSystemInterfaceIp(o["ip"], d, "ip")); err != nil {
		if vv, ok := fortiAPIPatch(o["ip"], "SystemInterface-Ip"); ok {
			if err = d.Set("ip", vv); err != nil {
				return fmt.Errorf("Error reading ip: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading ip: %v", err)
		}
	}

	if err = d.Set("ip_managed_by_fortiipam", flattenSystemInterfaceIpManagedByFortiipam(o["ip-managed-by-fortiipam"], d, "ip_managed_by_fortiipam")); err != nil {
		if vv, ok := fortiAPIPatch(o["ip-managed-by-fortiipam"], "SystemInterface-IpManagedByFortiipam"); ok {
			if err = d.Set("ip_managed_by_fortiipam", vv); err != nil {
				return fmt.Errorf("Error reading ip_managed_by_fortiipam: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading ip_managed_by_fortiipam: %v", err)
		}
	}

	if err = d.Set("ipmac", flattenSystemInterfaceIpmac(o["ipmac"], d, "ipmac")); err != nil {
		if vv, ok := fortiAPIPatch(o["ipmac"], "SystemInterface-Ipmac"); ok {
			if err = d.Set("ipmac", vv); err != nil {
				return fmt.Errorf("Error reading ipmac: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading ipmac: %v", err)
		}
	}

	if err = d.Set("ips_sniffer_mode", flattenSystemInterfaceIpsSnifferMode(o["ips-sniffer-mode"], d, "ips_sniffer_mode")); err != nil {
		if vv, ok := fortiAPIPatch(o["ips-sniffer-mode"], "SystemInterface-IpsSnifferMode"); ok {
			if err = d.Set("ips_sniffer_mode", vv); err != nil {
				return fmt.Errorf("Error reading ips_sniffer_mode: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading ips_sniffer_mode: %v", err)
		}
	}

	if err = d.Set("ipunnumbered", flattenSystemInterfaceIpunnumbered(o["ipunnumbered"], d, "ipunnumbered")); err != nil {
		if vv, ok := fortiAPIPatch(o["ipunnumbered"], "SystemInterface-Ipunnumbered"); ok {
			if err = d.Set("ipunnumbered", vv); err != nil {
				return fmt.Errorf("Error reading ipunnumbered: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading ipunnumbered: %v", err)
		}
	}

	if isImportTable() {
		if err = d.Set("ipv6", flattenSystemInterfaceIpv6(o["ipv6"], d, "ipv6")); err != nil {
			if vv, ok := fortiAPIPatch(o["ipv6"], "SystemInterface-Ipv6"); ok {
				if err = d.Set("ipv6", vv); err != nil {
					return fmt.Errorf("Error reading ipv6: %v", err)
				}
			} else {
				return fmt.Errorf("Error reading ipv6: %v", err)
			}
		}
	} else {
		if _, ok := d.GetOk("ipv6"); ok {
			if err = d.Set("ipv6", flattenSystemInterfaceIpv6(o["ipv6"], d, "ipv6")); err != nil {
				if vv, ok := fortiAPIPatch(o["ipv6"], "SystemInterface-Ipv6"); ok {
					if err = d.Set("ipv6", vv); err != nil {
						return fmt.Errorf("Error reading ipv6: %v", err)
					}
				} else {
					return fmt.Errorf("Error reading ipv6: %v", err)
				}
			}
		}
	}

	if err = d.Set("l2forward", flattenSystemInterfaceL2Forward(o["l2forward"], d, "l2forward")); err != nil {
		if vv, ok := fortiAPIPatch(o["l2forward"], "SystemInterface-L2Forward"); ok {
			if err = d.Set("l2forward", vv); err != nil {
				return fmt.Errorf("Error reading l2forward: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading l2forward: %v", err)
		}
	}

	if err = d.Set("l2tp_client", flattenSystemInterfaceL2TpClient(o["l2tp-client"], d, "l2tp_client")); err != nil {
		if vv, ok := fortiAPIPatch(o["l2tp-client"], "SystemInterface-L2TpClient"); ok {
			if err = d.Set("l2tp_client", vv); err != nil {
				return fmt.Errorf("Error reading l2tp_client: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading l2tp_client: %v", err)
		}
	}

	if isImportTable() {
		if err = d.Set("l2tp_client_settings", flattenSystemInterfaceL2TpClientSettings(o["l2tp-client-settings"], d, "l2tp_client_settings")); err != nil {
			if vv, ok := fortiAPIPatch(o["l2tp-client-settings"], "SystemInterface-L2TpClientSettings"); ok {
				if err = d.Set("l2tp_client_settings", vv); err != nil {
					return fmt.Errorf("Error reading l2tp_client_settings: %v", err)
				}
			} else {
				return fmt.Errorf("Error reading l2tp_client_settings: %v", err)
			}
		}
	} else {
		if _, ok := d.GetOk("l2tp_client_settings"); ok {
			if err = d.Set("l2tp_client_settings", flattenSystemInterfaceL2TpClientSettings(o["l2tp-client-settings"], d, "l2tp_client_settings")); err != nil {
				if vv, ok := fortiAPIPatch(o["l2tp-client-settings"], "SystemInterface-L2TpClientSettings"); ok {
					if err = d.Set("l2tp_client_settings", vv); err != nil {
						return fmt.Errorf("Error reading l2tp_client_settings: %v", err)
					}
				} else {
					return fmt.Errorf("Error reading l2tp_client_settings: %v", err)
				}
			}
		}
	}

	if err = d.Set("lacp_ha_secondary", flattenSystemInterfaceLacpHaSecondary(o["lacp-ha-secondary"], d, "lacp_ha_secondary")); err != nil {
		if vv, ok := fortiAPIPatch(o["lacp-ha-secondary"], "SystemInterface-LacpHaSecondary"); ok {
			if err = d.Set("lacp_ha_secondary", vv); err != nil {
				return fmt.Errorf("Error reading lacp_ha_secondary: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading lacp_ha_secondary: %v", err)
		}
	}

	if err = d.Set("lacp_ha_slave", flattenSystemInterfaceLacpHaSlave(o["lacp-ha-slave"], d, "lacp_ha_slave")); err != nil {
		if vv, ok := fortiAPIPatch(o["lacp-ha-slave"], "SystemInterface-LacpHaSlave"); ok {
			if err = d.Set("lacp_ha_slave", vv); err != nil {
				return fmt.Errorf("Error reading lacp_ha_slave: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading lacp_ha_slave: %v", err)
		}
	}

	if err = d.Set("lacp_mode", flattenSystemInterfaceLacpMode(o["lacp-mode"], d, "lacp_mode")); err != nil {
		if vv, ok := fortiAPIPatch(o["lacp-mode"], "SystemInterface-LacpMode"); ok {
			if err = d.Set("lacp_mode", vv); err != nil {
				return fmt.Errorf("Error reading lacp_mode: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading lacp_mode: %v", err)
		}
	}

	if err = d.Set("lacp_speed", flattenSystemInterfaceLacpSpeed(o["lacp-speed"], d, "lacp_speed")); err != nil {
		if vv, ok := fortiAPIPatch(o["lacp-speed"], "SystemInterface-LacpSpeed"); ok {
			if err = d.Set("lacp_speed", vv); err != nil {
				return fmt.Errorf("Error reading lacp_speed: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading lacp_speed: %v", err)
		}
	}

	if err = d.Set("lcp_echo_interval", flattenSystemInterfaceLcpEchoInterval(o["lcp-echo-interval"], d, "lcp_echo_interval")); err != nil {
		if vv, ok := fortiAPIPatch(o["lcp-echo-interval"], "SystemInterface-LcpEchoInterval"); ok {
			if err = d.Set("lcp_echo_interval", vv); err != nil {
				return fmt.Errorf("Error reading lcp_echo_interval: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading lcp_echo_interval: %v", err)
		}
	}

	if err = d.Set("lcp_max_echo_fails", flattenSystemInterfaceLcpMaxEchoFails(o["lcp-max-echo-fails"], d, "lcp_max_echo_fails")); err != nil {
		if vv, ok := fortiAPIPatch(o["lcp-max-echo-fails"], "SystemInterface-LcpMaxEchoFails"); ok {
			if err = d.Set("lcp_max_echo_fails", vv); err != nil {
				return fmt.Errorf("Error reading lcp_max_echo_fails: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading lcp_max_echo_fails: %v", err)
		}
	}

	if err = d.Set("link_up_delay", flattenSystemInterfaceLinkUpDelay(o["link-up-delay"], d, "link_up_delay")); err != nil {
		if vv, ok := fortiAPIPatch(o["link-up-delay"], "SystemInterface-LinkUpDelay"); ok {
			if err = d.Set("link_up_delay", vv); err != nil {
				return fmt.Errorf("Error reading link_up_delay: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading link_up_delay: %v", err)
		}
	}

	if err = d.Set("lldp_network_policy", flattenSystemInterfaceLldpNetworkPolicy(o["lldp-network-policy"], d, "lldp_network_policy")); err != nil {
		if vv, ok := fortiAPIPatch(o["lldp-network-policy"], "SystemInterface-LldpNetworkPolicy"); ok {
			if err = d.Set("lldp_network_policy", vv); err != nil {
				return fmt.Errorf("Error reading lldp_network_policy: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading lldp_network_policy: %v", err)
		}
	}

	if err = d.Set("lldp_reception", flattenSystemInterfaceLldpReception(o["lldp-reception"], d, "lldp_reception")); err != nil {
		if vv, ok := fortiAPIPatch(o["lldp-reception"], "SystemInterface-LldpReception"); ok {
			if err = d.Set("lldp_reception", vv); err != nil {
				return fmt.Errorf("Error reading lldp_reception: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading lldp_reception: %v", err)
		}
	}

	if err = d.Set("lldp_transmission", flattenSystemInterfaceLldpTransmission(o["lldp-transmission"], d, "lldp_transmission")); err != nil {
		if vv, ok := fortiAPIPatch(o["lldp-transmission"], "SystemInterface-LldpTransmission"); ok {
			if err = d.Set("lldp_transmission", vv); err != nil {
				return fmt.Errorf("Error reading lldp_transmission: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading lldp_transmission: %v", err)
		}
	}

	if err = d.Set("macaddr", flattenSystemInterfaceMacaddr(o["macaddr"], d, "macaddr")); err != nil {
		if vv, ok := fortiAPIPatch(o["macaddr"], "SystemInterface-Macaddr"); ok {
			if err = d.Set("macaddr", vv); err != nil {
				return fmt.Errorf("Error reading macaddr: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading macaddr: %v", err)
		}
	}

	if err = d.Set("managed_subnetwork_size", flattenSystemInterfaceManagedSubnetworkSize(o["managed-subnetwork-size"], d, "managed_subnetwork_size")); err != nil {
		if vv, ok := fortiAPIPatch(o["managed-subnetwork-size"], "SystemInterface-ManagedSubnetworkSize"); ok {
			if err = d.Set("managed_subnetwork_size", vv); err != nil {
				return fmt.Errorf("Error reading managed_subnetwork_size: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading managed_subnetwork_size: %v", err)
		}
	}

	if err = d.Set("management_ip", flattenSystemInterfaceManagementIp(o["management-ip"], d, "management_ip")); err != nil {
		if vv, ok := fortiAPIPatch(o["management-ip"], "SystemInterface-ManagementIp"); ok {
			if err = d.Set("management_ip", vv); err != nil {
				return fmt.Errorf("Error reading management_ip: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading management_ip: %v", err)
		}
	}

	if err = d.Set("max_egress_burst_rate", flattenSystemInterfaceMaxEgressBurstRate(o["max-egress-burst-rate"], d, "max_egress_burst_rate")); err != nil {
		if vv, ok := fortiAPIPatch(o["max-egress-burst-rate"], "SystemInterface-MaxEgressBurstRate"); ok {
			if err = d.Set("max_egress_burst_rate", vv); err != nil {
				return fmt.Errorf("Error reading max_egress_burst_rate: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading max_egress_burst_rate: %v", err)
		}
	}

	if err = d.Set("max_egress_rate", flattenSystemInterfaceMaxEgressRate(o["max-egress-rate"], d, "max_egress_rate")); err != nil {
		if vv, ok := fortiAPIPatch(o["max-egress-rate"], "SystemInterface-MaxEgressRate"); ok {
			if err = d.Set("max_egress_rate", vv); err != nil {
				return fmt.Errorf("Error reading max_egress_rate: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading max_egress_rate: %v", err)
		}
	}

	if err = d.Set("measured_downstream_bandwidth", flattenSystemInterfaceMeasuredDownstreamBandwidth(o["measured-downstream-bandwidth"], d, "measured_downstream_bandwidth")); err != nil {
		if vv, ok := fortiAPIPatch(o["measured-downstream-bandwidth"], "SystemInterface-MeasuredDownstreamBandwidth"); ok {
			if err = d.Set("measured_downstream_bandwidth", vv); err != nil {
				return fmt.Errorf("Error reading measured_downstream_bandwidth: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading measured_downstream_bandwidth: %v", err)
		}
	}

	if err = d.Set("measured_upstream_bandwidth", flattenSystemInterfaceMeasuredUpstreamBandwidth(o["measured-upstream-bandwidth"], d, "measured_upstream_bandwidth")); err != nil {
		if vv, ok := fortiAPIPatch(o["measured-upstream-bandwidth"], "SystemInterface-MeasuredUpstreamBandwidth"); ok {
			if err = d.Set("measured_upstream_bandwidth", vv); err != nil {
				return fmt.Errorf("Error reading measured_upstream_bandwidth: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading measured_upstream_bandwidth: %v", err)
		}
	}

	if err = d.Set("mediatype", flattenSystemInterfaceMediatype(o["mediatype"], d, "mediatype")); err != nil {
		if vv, ok := fortiAPIPatch(o["mediatype"], "SystemInterface-Mediatype"); ok {
			if err = d.Set("mediatype", vv); err != nil {
				return fmt.Errorf("Error reading mediatype: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading mediatype: %v", err)
		}
	}

	if err = d.Set("member", flattenSystemInterfaceMember(o["member"], d, "member")); err != nil {
		if vv, ok := fortiAPIPatch(o["member"], "SystemInterface-Member"); ok {
			if err = d.Set("member", vv); err != nil {
				return fmt.Errorf("Error reading member: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading member: %v", err)
		}
	}

	if err = d.Set("min_links", flattenSystemInterfaceMinLinks(o["min-links"], d, "min_links")); err != nil {
		if vv, ok := fortiAPIPatch(o["min-links"], "SystemInterface-MinLinks"); ok {
			if err = d.Set("min_links", vv); err != nil {
				return fmt.Errorf("Error reading min_links: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading min_links: %v", err)
		}
	}

	if err = d.Set("min_links_down", flattenSystemInterfaceMinLinksDown(o["min-links-down"], d, "min_links_down")); err != nil {
		if vv, ok := fortiAPIPatch(o["min-links-down"], "SystemInterface-MinLinksDown"); ok {
			if err = d.Set("min_links_down", vv); err != nil {
				return fmt.Errorf("Error reading min_links_down: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading min_links_down: %v", err)
		}
	}

	if err = d.Set("mirroring_direction", flattenSystemInterfaceMirroringDirection(o["mirroring-direction"], d, "mirroring_direction")); err != nil {
		if vv, ok := fortiAPIPatch(o["mirroring-direction"], "SystemInterface-MirroringDirection"); ok {
			if err = d.Set("mirroring_direction", vv); err != nil {
				return fmt.Errorf("Error reading mirroring_direction: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading mirroring_direction: %v", err)
		}
	}

	if isImportTable() {
		if err = d.Set("mirroring_filter", flattenSystemInterfaceMirroringFilter(o["mirroring-filter"], d, "mirroring_filter")); err != nil {
			if vv, ok := fortiAPIPatch(o["mirroring-filter"], "SystemInterface-MirroringFilter"); ok {
				if err = d.Set("mirroring_filter", vv); err != nil {
					return fmt.Errorf("Error reading mirroring_filter: %v", err)
				}
			} else {
				return fmt.Errorf("Error reading mirroring_filter: %v", err)
			}
		}
	} else {
		if _, ok := d.GetOk("mirroring_filter"); ok {
			if err = d.Set("mirroring_filter", flattenSystemInterfaceMirroringFilter(o["mirroring-filter"], d, "mirroring_filter")); err != nil {
				if vv, ok := fortiAPIPatch(o["mirroring-filter"], "SystemInterface-MirroringFilter"); ok {
					if err = d.Set("mirroring_filter", vv); err != nil {
						return fmt.Errorf("Error reading mirroring_filter: %v", err)
					}
				} else {
					return fmt.Errorf("Error reading mirroring_filter: %v", err)
				}
			}
		}
	}

	if err = d.Set("mirroring_port", flattenSystemInterfaceMirroringPort(o["mirroring-port"], d, "mirroring_port")); err != nil {
		if vv, ok := fortiAPIPatch(o["mirroring-port"], "SystemInterface-MirroringPort"); ok {
			if err = d.Set("mirroring_port", vv); err != nil {
				return fmt.Errorf("Error reading mirroring_port: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading mirroring_port: %v", err)
		}
	}

	if err = d.Set("mode", flattenSystemInterfaceMode(o["mode"], d, "mode")); err != nil {
		if vv, ok := fortiAPIPatch(o["mode"], "SystemInterface-Mode"); ok {
			if err = d.Set("mode", vv); err != nil {
				return fmt.Errorf("Error reading mode: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading mode: %v", err)
		}
	}

	if err = d.Set("monitor_bandwidth", flattenSystemInterfaceMonitorBandwidth(o["monitor-bandwidth"], d, "monitor_bandwidth")); err != nil {
		if vv, ok := fortiAPIPatch(o["monitor-bandwidth"], "SystemInterface-MonitorBandwidth"); ok {
			if err = d.Set("monitor_bandwidth", vv); err != nil {
				return fmt.Errorf("Error reading monitor_bandwidth: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading monitor_bandwidth: %v", err)
		}
	}

	if err = d.Set("mtu", flattenSystemInterfaceMtu(o["mtu"], d, "mtu")); err != nil {
		if vv, ok := fortiAPIPatch(o["mtu"], "SystemInterface-Mtu"); ok {
			if err = d.Set("mtu", vv); err != nil {
				return fmt.Errorf("Error reading mtu: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading mtu: %v", err)
		}
	}

	if err = d.Set("mtu_override", flattenSystemInterfaceMtuOverride(o["mtu-override"], d, "mtu_override")); err != nil {
		if vv, ok := fortiAPIPatch(o["mtu-override"], "SystemInterface-MtuOverride"); ok {
			if err = d.Set("mtu_override", vv); err != nil {
				return fmt.Errorf("Error reading mtu_override: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading mtu_override: %v", err)
		}
	}

	if err = d.Set("mux_type", flattenSystemInterfaceMuxType(o["mux-type"], d, "mux_type")); err != nil {
		if vv, ok := fortiAPIPatch(o["mux-type"], "SystemInterface-MuxType"); ok {
			if err = d.Set("mux_type", vv); err != nil {
				return fmt.Errorf("Error reading mux_type: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading mux_type: %v", err)
		}
	}

	if err = d.Set("name", flattenSystemInterfaceName(o["name"], d, "name")); err != nil {
		if vv, ok := fortiAPIPatch(o["name"], "SystemInterface-Name"); ok {
			if err = d.Set("name", vv); err != nil {
				return fmt.Errorf("Error reading name: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading name: %v", err)
		}
	}

	if err = d.Set("ndiscforward", flattenSystemInterfaceNdiscforward(o["ndiscforward"], d, "ndiscforward")); err != nil {
		if vv, ok := fortiAPIPatch(o["ndiscforward"], "SystemInterface-Ndiscforward"); ok {
			if err = d.Set("ndiscforward", vv); err != nil {
				return fmt.Errorf("Error reading ndiscforward: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading ndiscforward: %v", err)
		}
	}

	if err = d.Set("netbios_forward", flattenSystemInterfaceNetbiosForward(o["netbios-forward"], d, "netbios_forward")); err != nil {
		if vv, ok := fortiAPIPatch(o["netbios-forward"], "SystemInterface-NetbiosForward"); ok {
			if err = d.Set("netbios_forward", vv); err != nil {
				return fmt.Errorf("Error reading netbios_forward: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading netbios_forward: %v", err)
		}
	}

	if err = d.Set("netflow_sample_rate", flattenSystemInterfaceNetflowSampleRate(o["netflow-sample-rate"], d, "netflow_sample_rate")); err != nil {
		if vv, ok := fortiAPIPatch(o["netflow-sample-rate"], "SystemInterface-NetflowSampleRate"); ok {
			if err = d.Set("netflow_sample_rate", vv); err != nil {
				return fmt.Errorf("Error reading netflow_sample_rate: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading netflow_sample_rate: %v", err)
		}
	}

	if err = d.Set("netflow_sampler", flattenSystemInterfaceNetflowSampler(o["netflow-sampler"], d, "netflow_sampler")); err != nil {
		if vv, ok := fortiAPIPatch(o["netflow-sampler"], "SystemInterface-NetflowSampler"); ok {
			if err = d.Set("netflow_sampler", vv); err != nil {
				return fmt.Errorf("Error reading netflow_sampler: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading netflow_sampler: %v", err)
		}
	}

	if err = d.Set("netflow_sampler_id", flattenSystemInterfaceNetflowSamplerId(o["netflow-sampler-id"], d, "netflow_sampler_id")); err != nil {
		if vv, ok := fortiAPIPatch(o["netflow-sampler-id"], "SystemInterface-NetflowSamplerId"); ok {
			if err = d.Set("netflow_sampler_id", vv); err != nil {
				return fmt.Errorf("Error reading netflow_sampler_id: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading netflow_sampler_id: %v", err)
		}
	}

	if err = d.Set("np_qos_profile", flattenSystemInterfaceNpQosProfile(o["np-qos-profile"], d, "np_qos_profile")); err != nil {
		if vv, ok := fortiAPIPatch(o["np-qos-profile"], "SystemInterface-NpQosProfile"); ok {
			if err = d.Set("np_qos_profile", vv); err != nil {
				return fmt.Errorf("Error reading np_qos_profile: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading np_qos_profile: %v", err)
		}
	}

	if err = d.Set("outbandwidth", flattenSystemInterfaceOutbandwidth(o["outbandwidth"], d, "outbandwidth")); err != nil {
		if vv, ok := fortiAPIPatch(o["outbandwidth"], "SystemInterface-Outbandwidth"); ok {
			if err = d.Set("outbandwidth", vv); err != nil {
				return fmt.Errorf("Error reading outbandwidth: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading outbandwidth: %v", err)
		}
	}

	if err = d.Set("padt_retry_timeout", flattenSystemInterfacePadtRetryTimeout(o["padt-retry-timeout"], d, "padt_retry_timeout")); err != nil {
		if vv, ok := fortiAPIPatch(o["padt-retry-timeout"], "SystemInterface-PadtRetryTimeout"); ok {
			if err = d.Set("padt_retry_timeout", vv); err != nil {
				return fmt.Errorf("Error reading padt_retry_timeout: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading padt_retry_timeout: %v", err)
		}
	}

	if err = d.Set("phy_mode", flattenSystemInterfacePhyMode(o["phy-mode"], d, "phy_mode")); err != nil {
		if vv, ok := fortiAPIPatch(o["phy-mode"], "SystemInterface-PhyMode"); ok {
			if err = d.Set("phy_mode", vv); err != nil {
				return fmt.Errorf("Error reading phy_mode: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading phy_mode: %v", err)
		}
	}

	if isImportTable() {
		if err = d.Set("phy_setting", flattenSystemInterfacePhySetting(o["phy-setting"], d, "phy_setting")); err != nil {
			if vv, ok := fortiAPIPatch(o["phy-setting"], "SystemInterface-PhySetting"); ok {
				if err = d.Set("phy_setting", vv); err != nil {
					return fmt.Errorf("Error reading phy_setting: %v", err)
				}
			} else {
				return fmt.Errorf("Error reading phy_setting: %v", err)
			}
		}
	} else {
		if _, ok := d.GetOk("phy_setting"); ok {
			if err = d.Set("phy_setting", flattenSystemInterfacePhySetting(o["phy-setting"], d, "phy_setting")); err != nil {
				if vv, ok := fortiAPIPatch(o["phy-setting"], "SystemInterface-PhySetting"); ok {
					if err = d.Set("phy_setting", vv); err != nil {
						return fmt.Errorf("Error reading phy_setting: %v", err)
					}
				} else {
					return fmt.Errorf("Error reading phy_setting: %v", err)
				}
			}
		}
	}

	if err = d.Set("poe", flattenSystemInterfacePoe(o["poe"], d, "poe")); err != nil {
		if vv, ok := fortiAPIPatch(o["poe"], "SystemInterface-Poe"); ok {
			if err = d.Set("poe", vv); err != nil {
				return fmt.Errorf("Error reading poe: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading poe: %v", err)
		}
	}

	if err = d.Set("polling_interval", flattenSystemInterfacePollingInterval(o["polling-interval"], d, "polling_interval")); err != nil {
		if vv, ok := fortiAPIPatch(o["polling-interval"], "SystemInterface-PollingInterval"); ok {
			if err = d.Set("polling_interval", vv); err != nil {
				return fmt.Errorf("Error reading polling_interval: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading polling_interval: %v", err)
		}
	}

	if err = d.Set("port_mirroring", flattenSystemInterfacePortMirroring(o["port-mirroring"], d, "port_mirroring")); err != nil {
		if vv, ok := fortiAPIPatch(o["port-mirroring"], "SystemInterface-PortMirroring"); ok {
			if err = d.Set("port_mirroring", vv); err != nil {
				return fmt.Errorf("Error reading port_mirroring: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading port_mirroring: %v", err)
		}
	}

	if err = d.Set("pppoe_egress_cos", flattenSystemInterfacePppoeEgressCos(o["pppoe-egress-cos"], d, "pppoe_egress_cos")); err != nil {
		if vv, ok := fortiAPIPatch(o["pppoe-egress-cos"], "SystemInterface-PppoeEgressCos"); ok {
			if err = d.Set("pppoe_egress_cos", vv); err != nil {
				return fmt.Errorf("Error reading pppoe_egress_cos: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading pppoe_egress_cos: %v", err)
		}
	}

	if err = d.Set("pppoe_unnumbered_negotiate", flattenSystemInterfacePppoeUnnumberedNegotiate(o["pppoe-unnumbered-negotiate"], d, "pppoe_unnumbered_negotiate")); err != nil {
		if vv, ok := fortiAPIPatch(o["pppoe-unnumbered-negotiate"], "SystemInterface-PppoeUnnumberedNegotiate"); ok {
			if err = d.Set("pppoe_unnumbered_negotiate", vv); err != nil {
				return fmt.Errorf("Error reading pppoe_unnumbered_negotiate: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading pppoe_unnumbered_negotiate: %v", err)
		}
	}

	if err = d.Set("pptp_auth_type", flattenSystemInterfacePptpAuthType(o["pptp-auth-type"], d, "pptp_auth_type")); err != nil {
		if vv, ok := fortiAPIPatch(o["pptp-auth-type"], "SystemInterface-PptpAuthType"); ok {
			if err = d.Set("pptp_auth_type", vv); err != nil {
				return fmt.Errorf("Error reading pptp_auth_type: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading pptp_auth_type: %v", err)
		}
	}

	if err = d.Set("pptp_client", flattenSystemInterfacePptpClient(o["pptp-client"], d, "pptp_client")); err != nil {
		if vv, ok := fortiAPIPatch(o["pptp-client"], "SystemInterface-PptpClient"); ok {
			if err = d.Set("pptp_client", vv); err != nil {
				return fmt.Errorf("Error reading pptp_client: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading pptp_client: %v", err)
		}
	}

	if err = d.Set("pptp_server_ip", flattenSystemInterfacePptpServerIp(o["pptp-server-ip"], d, "pptp_server_ip")); err != nil {
		if vv, ok := fortiAPIPatch(o["pptp-server-ip"], "SystemInterface-PptpServerIp"); ok {
			if err = d.Set("pptp_server_ip", vv); err != nil {
				return fmt.Errorf("Error reading pptp_server_ip: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading pptp_server_ip: %v", err)
		}
	}

	if err = d.Set("pptp_timeout", flattenSystemInterfacePptpTimeout(o["pptp-timeout"], d, "pptp_timeout")); err != nil {
		if vv, ok := fortiAPIPatch(o["pptp-timeout"], "SystemInterface-PptpTimeout"); ok {
			if err = d.Set("pptp_timeout", vv); err != nil {
				return fmt.Errorf("Error reading pptp_timeout: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading pptp_timeout: %v", err)
		}
	}

	if err = d.Set("pptp_user", flattenSystemInterfacePptpUser(o["pptp-user"], d, "pptp_user")); err != nil {
		if vv, ok := fortiAPIPatch(o["pptp-user"], "SystemInterface-PptpUser"); ok {
			if err = d.Set("pptp_user", vv); err != nil {
				return fmt.Errorf("Error reading pptp_user: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading pptp_user: %v", err)
		}
	}

	if err = d.Set("preserve_session_route", flattenSystemInterfacePreserveSessionRoute(o["preserve-session-route"], d, "preserve_session_route")); err != nil {
		if vv, ok := fortiAPIPatch(o["preserve-session-route"], "SystemInterface-PreserveSessionRoute"); ok {
			if err = d.Set("preserve_session_route", vv); err != nil {
				return fmt.Errorf("Error reading preserve_session_route: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading preserve_session_route: %v", err)
		}
	}

	if err = d.Set("priority", flattenSystemInterfacePriority(o["priority"], d, "priority")); err != nil {
		if vv, ok := fortiAPIPatch(o["priority"], "SystemInterface-Priority"); ok {
			if err = d.Set("priority", vv); err != nil {
				return fmt.Errorf("Error reading priority: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading priority: %v", err)
		}
	}

	if err = d.Set("priority_override", flattenSystemInterfacePriorityOverride(o["priority-override"], d, "priority_override")); err != nil {
		if vv, ok := fortiAPIPatch(o["priority-override"], "SystemInterface-PriorityOverride"); ok {
			if err = d.Set("priority_override", vv); err != nil {
				return fmt.Errorf("Error reading priority_override: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading priority_override: %v", err)
		}
	}

	if err = d.Set("proxy_captive_portal", flattenSystemInterfaceProxyCaptivePortal(o["proxy-captive-portal"], d, "proxy_captive_portal")); err != nil {
		if vv, ok := fortiAPIPatch(o["proxy-captive-portal"], "SystemInterface-ProxyCaptivePortal"); ok {
			if err = d.Set("proxy_captive_portal", vv); err != nil {
				return fmt.Errorf("Error reading proxy_captive_portal: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading proxy_captive_portal: %v", err)
		}
	}

	if err = d.Set("pvc_atm_qos", flattenSystemInterfacePvcAtmQos(o["pvc-atm-qos"], d, "pvc_atm_qos")); err != nil {
		if vv, ok := fortiAPIPatch(o["pvc-atm-qos"], "SystemInterface-PvcAtmQos"); ok {
			if err = d.Set("pvc_atm_qos", vv); err != nil {
				return fmt.Errorf("Error reading pvc_atm_qos: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading pvc_atm_qos: %v", err)
		}
	}

	if err = d.Set("pvc_chan", flattenSystemInterfacePvcChan(o["pvc-chan"], d, "pvc_chan")); err != nil {
		if vv, ok := fortiAPIPatch(o["pvc-chan"], "SystemInterface-PvcChan"); ok {
			if err = d.Set("pvc_chan", vv); err != nil {
				return fmt.Errorf("Error reading pvc_chan: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading pvc_chan: %v", err)
		}
	}

	if err = d.Set("pvc_crc", flattenSystemInterfacePvcCrc(o["pvc-crc"], d, "pvc_crc")); err != nil {
		if vv, ok := fortiAPIPatch(o["pvc-crc"], "SystemInterface-PvcCrc"); ok {
			if err = d.Set("pvc_crc", vv); err != nil {
				return fmt.Errorf("Error reading pvc_crc: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading pvc_crc: %v", err)
		}
	}

	if err = d.Set("pvc_pcr", flattenSystemInterfacePvcPcr(o["pvc-pcr"], d, "pvc_pcr")); err != nil {
		if vv, ok := fortiAPIPatch(o["pvc-pcr"], "SystemInterface-PvcPcr"); ok {
			if err = d.Set("pvc_pcr", vv); err != nil {
				return fmt.Errorf("Error reading pvc_pcr: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading pvc_pcr: %v", err)
		}
	}

	if err = d.Set("pvc_scr", flattenSystemInterfacePvcScr(o["pvc-scr"], d, "pvc_scr")); err != nil {
		if vv, ok := fortiAPIPatch(o["pvc-scr"], "SystemInterface-PvcScr"); ok {
			if err = d.Set("pvc_scr", vv); err != nil {
				return fmt.Errorf("Error reading pvc_scr: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading pvc_scr: %v", err)
		}
	}

	if err = d.Set("pvc_vlan_id", flattenSystemInterfacePvcVlanId(o["pvc-vlan-id"], d, "pvc_vlan_id")); err != nil {
		if vv, ok := fortiAPIPatch(o["pvc-vlan-id"], "SystemInterface-PvcVlanId"); ok {
			if err = d.Set("pvc_vlan_id", vv); err != nil {
				return fmt.Errorf("Error reading pvc_vlan_id: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading pvc_vlan_id: %v", err)
		}
	}

	if err = d.Set("pvc_vlan_rx_id", flattenSystemInterfacePvcVlanRxId(o["pvc-vlan-rx-id"], d, "pvc_vlan_rx_id")); err != nil {
		if vv, ok := fortiAPIPatch(o["pvc-vlan-rx-id"], "SystemInterface-PvcVlanRxId"); ok {
			if err = d.Set("pvc_vlan_rx_id", vv); err != nil {
				return fmt.Errorf("Error reading pvc_vlan_rx_id: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading pvc_vlan_rx_id: %v", err)
		}
	}

	if err = d.Set("pvc_vlan_rx_op", flattenSystemInterfacePvcVlanRxOp(o["pvc-vlan-rx-op"], d, "pvc_vlan_rx_op")); err != nil {
		if vv, ok := fortiAPIPatch(o["pvc-vlan-rx-op"], "SystemInterface-PvcVlanRxOp"); ok {
			if err = d.Set("pvc_vlan_rx_op", vv); err != nil {
				return fmt.Errorf("Error reading pvc_vlan_rx_op: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading pvc_vlan_rx_op: %v", err)
		}
	}

	if err = d.Set("pvc_vlan_tx_id", flattenSystemInterfacePvcVlanTxId(o["pvc-vlan-tx-id"], d, "pvc_vlan_tx_id")); err != nil {
		if vv, ok := fortiAPIPatch(o["pvc-vlan-tx-id"], "SystemInterface-PvcVlanTxId"); ok {
			if err = d.Set("pvc_vlan_tx_id", vv); err != nil {
				return fmt.Errorf("Error reading pvc_vlan_tx_id: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading pvc_vlan_tx_id: %v", err)
		}
	}

	if err = d.Set("pvc_vlan_tx_op", flattenSystemInterfacePvcVlanTxOp(o["pvc-vlan-tx-op"], d, "pvc_vlan_tx_op")); err != nil {
		if vv, ok := fortiAPIPatch(o["pvc-vlan-tx-op"], "SystemInterface-PvcVlanTxOp"); ok {
			if err = d.Set("pvc_vlan_tx_op", vv); err != nil {
				return fmt.Errorf("Error reading pvc_vlan_tx_op: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading pvc_vlan_tx_op: %v", err)
		}
	}

	if err = d.Set("reachable_time", flattenSystemInterfaceReachableTime(o["reachable-time"], d, "reachable_time")); err != nil {
		if vv, ok := fortiAPIPatch(o["reachable-time"], "SystemInterface-ReachableTime"); ok {
			if err = d.Set("reachable_time", vv); err != nil {
				return fmt.Errorf("Error reading reachable_time: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading reachable_time: %v", err)
		}
	}

	if err = d.Set("redundant_interface", flattenSystemInterfaceRedundantInterface(o["redundant-interface"], d, "redundant_interface")); err != nil {
		if vv, ok := fortiAPIPatch(o["redundant-interface"], "SystemInterface-RedundantInterface"); ok {
			if err = d.Set("redundant_interface", vv); err != nil {
				return fmt.Errorf("Error reading redundant_interface: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading redundant_interface: %v", err)
		}
	}

	if err = d.Set("remote_ip", flattenSystemInterfaceRemoteIp(o["remote-ip"], d, "remote_ip")); err != nil {
		if vv, ok := fortiAPIPatch(o["remote-ip"], "SystemInterface-RemoteIp"); ok {
			if err = d.Set("remote_ip", vv); err != nil {
				return fmt.Errorf("Error reading remote_ip: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading remote_ip: %v", err)
		}
	}

	if err = d.Set("replacemsg_override_group", flattenSystemInterfaceReplacemsgOverrideGroup(o["replacemsg-override-group"], d, "replacemsg_override_group")); err != nil {
		if vv, ok := fortiAPIPatch(o["replacemsg-override-group"], "SystemInterface-ReplacemsgOverrideGroup"); ok {
			if err = d.Set("replacemsg_override_group", vv); err != nil {
				return fmt.Errorf("Error reading replacemsg_override_group: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading replacemsg_override_group: %v", err)
		}
	}

	if err = d.Set("retransmission", flattenSystemInterfaceRetransmission(o["retransmission"], d, "retransmission")); err != nil {
		if vv, ok := fortiAPIPatch(o["retransmission"], "SystemInterface-Retransmission"); ok {
			if err = d.Set("retransmission", vv); err != nil {
				return fmt.Errorf("Error reading retransmission: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading retransmission: %v", err)
		}
	}

	if err = d.Set("ring_rx", flattenSystemInterfaceRingRx(o["ring-rx"], d, "ring_rx")); err != nil {
		if vv, ok := fortiAPIPatch(o["ring-rx"], "SystemInterface-RingRx"); ok {
			if err = d.Set("ring_rx", vv); err != nil {
				return fmt.Errorf("Error reading ring_rx: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading ring_rx: %v", err)
		}
	}

	if err = d.Set("ring_tx", flattenSystemInterfaceRingTx(o["ring-tx"], d, "ring_tx")); err != nil {
		if vv, ok := fortiAPIPatch(o["ring-tx"], "SystemInterface-RingTx"); ok {
			if err = d.Set("ring_tx", vv); err != nil {
				return fmt.Errorf("Error reading ring_tx: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading ring_tx: %v", err)
		}
	}

	if err = d.Set("role", flattenSystemInterfaceRole(o["role"], d, "role")); err != nil {
		if vv, ok := fortiAPIPatch(o["role"], "SystemInterface-Role"); ok {
			if err = d.Set("role", vv); err != nil {
				return fmt.Errorf("Error reading role: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading role: %v", err)
		}
	}

	if err = d.Set("sample_direction", flattenSystemInterfaceSampleDirection(o["sample-direction"], d, "sample_direction")); err != nil {
		if vv, ok := fortiAPIPatch(o["sample-direction"], "SystemInterface-SampleDirection"); ok {
			if err = d.Set("sample_direction", vv); err != nil {
				return fmt.Errorf("Error reading sample_direction: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading sample_direction: %v", err)
		}
	}

	if err = d.Set("sample_rate", flattenSystemInterfaceSampleRate(o["sample-rate"], d, "sample_rate")); err != nil {
		if vv, ok := fortiAPIPatch(o["sample-rate"], "SystemInterface-SampleRate"); ok {
			if err = d.Set("sample_rate", vv); err != nil {
				return fmt.Errorf("Error reading sample_rate: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading sample_rate: %v", err)
		}
	}

	if err = d.Set("secondary_ip", flattenSystemInterfaceSecondaryIp(o["secondary-IP"], d, "secondary_ip")); err != nil {
		if vv, ok := fortiAPIPatch(o["secondary-IP"], "SystemInterface-SecondaryIp"); ok {
			if err = d.Set("secondary_ip", vv); err != nil {
				return fmt.Errorf("Error reading secondary_ip: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading secondary_ip: %v", err)
		}
	}

	if isImportTable() {
		if err = d.Set("secondaryip", flattenSystemInterfaceSecondaryip(o["secondaryip"], d, "secondaryip")); err != nil {
			if vv, ok := fortiAPIPatch(o["secondaryip"], "SystemInterface-Secondaryip"); ok {
				if err = d.Set("secondaryip", vv); err != nil {
					return fmt.Errorf("Error reading secondaryip: %v", err)
				}
			} else {
				return fmt.Errorf("Error reading secondaryip: %v", err)
			}
		}
	} else {
		if _, ok := d.GetOk("secondaryip"); ok {
			if err = d.Set("secondaryip", flattenSystemInterfaceSecondaryip(o["secondaryip"], d, "secondaryip")); err != nil {
				if vv, ok := fortiAPIPatch(o["secondaryip"], "SystemInterface-Secondaryip"); ok {
					if err = d.Set("secondaryip", vv); err != nil {
						return fmt.Errorf("Error reading secondaryip: %v", err)
					}
				} else {
					return fmt.Errorf("Error reading secondaryip: %v", err)
				}
			}
		}
	}

	if err = d.Set("security_8021x_dynamic_vlan_id", flattenSystemInterfaceSecurity8021XDynamicVlanId(o["security-8021x-dynamic-vlan-id"], d, "security_8021x_dynamic_vlan_id")); err != nil {
		if vv, ok := fortiAPIPatch(o["security-8021x-dynamic-vlan-id"], "SystemInterface-Security8021XDynamicVlanId"); ok {
			if err = d.Set("security_8021x_dynamic_vlan_id", vv); err != nil {
				return fmt.Errorf("Error reading security_8021x_dynamic_vlan_id: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading security_8021x_dynamic_vlan_id: %v", err)
		}
	}

	if err = d.Set("security_8021x_master", flattenSystemInterfaceSecurity8021XMaster(o["security-8021x-master"], d, "security_8021x_master")); err != nil {
		if vv, ok := fortiAPIPatch(o["security-8021x-master"], "SystemInterface-Security8021XMaster"); ok {
			if err = d.Set("security_8021x_master", vv); err != nil {
				return fmt.Errorf("Error reading security_8021x_master: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading security_8021x_master: %v", err)
		}
	}

	if err = d.Set("security_8021x_member_mode", flattenSystemInterfaceSecurity8021XMemberMode(o["security-8021x-member-mode"], d, "security_8021x_member_mode")); err != nil {
		if vv, ok := fortiAPIPatch(o["security-8021x-member-mode"], "SystemInterface-Security8021XMemberMode"); ok {
			if err = d.Set("security_8021x_member_mode", vv); err != nil {
				return fmt.Errorf("Error reading security_8021x_member_mode: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading security_8021x_member_mode: %v", err)
		}
	}

	if err = d.Set("security_8021x_mode", flattenSystemInterfaceSecurity8021XMode(o["security-8021x-mode"], d, "security_8021x_mode")); err != nil {
		if vv, ok := fortiAPIPatch(o["security-8021x-mode"], "SystemInterface-Security8021XMode"); ok {
			if err = d.Set("security_8021x_mode", vv); err != nil {
				return fmt.Errorf("Error reading security_8021x_mode: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading security_8021x_mode: %v", err)
		}
	}

	if err = d.Set("security_exempt_list", flattenSystemInterfaceSecurityExemptList(o["security-exempt-list"], d, "security_exempt_list")); err != nil {
		if vv, ok := fortiAPIPatch(o["security-exempt-list"], "SystemInterface-SecurityExemptList"); ok {
			if err = d.Set("security_exempt_list", vv); err != nil {
				return fmt.Errorf("Error reading security_exempt_list: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading security_exempt_list: %v", err)
		}
	}

	if err = d.Set("security_external_logout", flattenSystemInterfaceSecurityExternalLogout(o["security-external-logout"], d, "security_external_logout")); err != nil {
		if vv, ok := fortiAPIPatch(o["security-external-logout"], "SystemInterface-SecurityExternalLogout"); ok {
			if err = d.Set("security_external_logout", vv); err != nil {
				return fmt.Errorf("Error reading security_external_logout: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading security_external_logout: %v", err)
		}
	}

	if err = d.Set("security_external_web", flattenSystemInterfaceSecurityExternalWeb(o["security-external-web"], d, "security_external_web")); err != nil {
		if vv, ok := fortiAPIPatch(o["security-external-web"], "SystemInterface-SecurityExternalWeb"); ok {
			if err = d.Set("security_external_web", vv); err != nil {
				return fmt.Errorf("Error reading security_external_web: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading security_external_web: %v", err)
		}
	}

	if err = d.Set("security_groups", flattenSystemInterfaceSecurityGroups(o["security-groups"], d, "security_groups")); err != nil {
		if vv, ok := fortiAPIPatch(o["security-groups"], "SystemInterface-SecurityGroups"); ok {
			if err = d.Set("security_groups", vv); err != nil {
				return fmt.Errorf("Error reading security_groups: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading security_groups: %v", err)
		}
	}

	if err = d.Set("security_ip_auth_bypass", flattenSystemInterfaceSecurityIpAuthBypass(o["security-ip-auth-bypass"], d, "security_ip_auth_bypass")); err != nil {
		if vv, ok := fortiAPIPatch(o["security-ip-auth-bypass"], "SystemInterface-SecurityIpAuthBypass"); ok {
			if err = d.Set("security_ip_auth_bypass", vv); err != nil {
				return fmt.Errorf("Error reading security_ip_auth_bypass: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading security_ip_auth_bypass: %v", err)
		}
	}

	if err = d.Set("security_mac_auth_bypass", flattenSystemInterfaceSecurityMacAuthBypass(o["security-mac-auth-bypass"], d, "security_mac_auth_bypass")); err != nil {
		if vv, ok := fortiAPIPatch(o["security-mac-auth-bypass"], "SystemInterface-SecurityMacAuthBypass"); ok {
			if err = d.Set("security_mac_auth_bypass", vv); err != nil {
				return fmt.Errorf("Error reading security_mac_auth_bypass: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading security_mac_auth_bypass: %v", err)
		}
	}

	if err = d.Set("security_mode", flattenSystemInterfaceSecurityMode(o["security-mode"], d, "security_mode")); err != nil {
		if vv, ok := fortiAPIPatch(o["security-mode"], "SystemInterface-SecurityMode"); ok {
			if err = d.Set("security_mode", vv); err != nil {
				return fmt.Errorf("Error reading security_mode: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading security_mode: %v", err)
		}
	}

	if err = d.Set("security_redirect_url", flattenSystemInterfaceSecurityRedirectUrl(o["security-redirect-url"], d, "security_redirect_url")); err != nil {
		if vv, ok := fortiAPIPatch(o["security-redirect-url"], "SystemInterface-SecurityRedirectUrl"); ok {
			if err = d.Set("security_redirect_url", vv); err != nil {
				return fmt.Errorf("Error reading security_redirect_url: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading security_redirect_url: %v", err)
		}
	}

	if err = d.Set("select_profile_30a_35b", flattenSystemInterfaceSelectProfile30A35B(o["select-profile-30a-35b"], d, "select_profile_30a_35b")); err != nil {
		if vv, ok := fortiAPIPatch(o["select-profile-30a-35b"], "SystemInterface-SelectProfile30A35B"); ok {
			if err = d.Set("select_profile_30a_35b", vv); err != nil {
				return fmt.Errorf("Error reading select_profile_30a_35b: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading select_profile_30a_35b: %v", err)
		}
	}

	if err = d.Set("service_name", flattenSystemInterfaceServiceName(o["service-name"], d, "service_name")); err != nil {
		if vv, ok := fortiAPIPatch(o["service-name"], "SystemInterface-ServiceName"); ok {
			if err = d.Set("service_name", vv); err != nil {
				return fmt.Errorf("Error reading service_name: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading service_name: %v", err)
		}
	}

	if err = d.Set("sflow_sampler", flattenSystemInterfaceSflowSampler(o["sflow-sampler"], d, "sflow_sampler")); err != nil {
		if vv, ok := fortiAPIPatch(o["sflow-sampler"], "SystemInterface-SflowSampler"); ok {
			if err = d.Set("sflow_sampler", vv); err != nil {
				return fmt.Errorf("Error reading sflow_sampler: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading sflow_sampler: %v", err)
		}
	}

	if err = d.Set("sfp_dsl", flattenSystemInterfaceSfpDsl(o["sfp-dsl"], d, "sfp_dsl")); err != nil {
		if vv, ok := fortiAPIPatch(o["sfp-dsl"], "SystemInterface-SfpDsl"); ok {
			if err = d.Set("sfp_dsl", vv); err != nil {
				return fmt.Errorf("Error reading sfp_dsl: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading sfp_dsl: %v", err)
		}
	}

	if err = d.Set("sfp_dsl_adsl_fallback", flattenSystemInterfaceSfpDslAdslFallback(o["sfp-dsl-adsl-fallback"], d, "sfp_dsl_adsl_fallback")); err != nil {
		if vv, ok := fortiAPIPatch(o["sfp-dsl-adsl-fallback"], "SystemInterface-SfpDslAdslFallback"); ok {
			if err = d.Set("sfp_dsl_adsl_fallback", vv); err != nil {
				return fmt.Errorf("Error reading sfp_dsl_adsl_fallback: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading sfp_dsl_adsl_fallback: %v", err)
		}
	}

	if err = d.Set("sfp_dsl_autodetect", flattenSystemInterfaceSfpDslAutodetect(o["sfp-dsl-autodetect"], d, "sfp_dsl_autodetect")); err != nil {
		if vv, ok := fortiAPIPatch(o["sfp-dsl-autodetect"], "SystemInterface-SfpDslAutodetect"); ok {
			if err = d.Set("sfp_dsl_autodetect", vv); err != nil {
				return fmt.Errorf("Error reading sfp_dsl_autodetect: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading sfp_dsl_autodetect: %v", err)
		}
	}

	if err = d.Set("sfp_dsl_mac", flattenSystemInterfaceSfpDslMac(o["sfp-dsl-mac"], d, "sfp_dsl_mac")); err != nil {
		if vv, ok := fortiAPIPatch(o["sfp-dsl-mac"], "SystemInterface-SfpDslMac"); ok {
			if err = d.Set("sfp_dsl_mac", vv); err != nil {
				return fmt.Errorf("Error reading sfp_dsl_mac: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading sfp_dsl_mac: %v", err)
		}
	}

	if err = d.Set("snmp_index", flattenSystemInterfaceSnmpIndex(o["snmp-index"], d, "snmp_index")); err != nil {
		if vv, ok := fortiAPIPatch(o["snmp-index"], "SystemInterface-SnmpIndex"); ok {
			if err = d.Set("snmp_index", vv); err != nil {
				return fmt.Errorf("Error reading snmp_index: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading snmp_index: %v", err)
		}
	}

	if err = d.Set("speed", flattenSystemInterfaceSpeed(o["speed"], d, "speed")); err != nil {
		if vv, ok := fortiAPIPatch(o["speed"], "SystemInterface-Speed"); ok {
			if err = d.Set("speed", vv); err != nil {
				return fmt.Errorf("Error reading speed: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading speed: %v", err)
		}
	}

	if err = d.Set("spillover_threshold", flattenSystemInterfaceSpilloverThreshold(o["spillover-threshold"], d, "spillover_threshold")); err != nil {
		if vv, ok := fortiAPIPatch(o["spillover-threshold"], "SystemInterface-SpilloverThreshold"); ok {
			if err = d.Set("spillover_threshold", vv); err != nil {
				return fmt.Errorf("Error reading spillover_threshold: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading spillover_threshold: %v", err)
		}
	}

	if err = d.Set("src_check", flattenSystemInterfaceSrcCheck(o["src-check"], d, "src_check")); err != nil {
		if vv, ok := fortiAPIPatch(o["src-check"], "SystemInterface-SrcCheck"); ok {
			if err = d.Set("src_check", vv); err != nil {
				return fmt.Errorf("Error reading src_check: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading src_check: %v", err)
		}
	}

	if err = d.Set("status", flattenSystemInterfaceStatus(o["status"], d, "status")); err != nil {
		if vv, ok := fortiAPIPatch(o["status"], "SystemInterface-Status"); ok {
			if err = d.Set("status", vv); err != nil {
				return fmt.Errorf("Error reading status: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading status: %v", err)
		}
	}

	if err = d.Set("stp", flattenSystemInterfaceStp(o["stp"], d, "stp")); err != nil {
		if vv, ok := fortiAPIPatch(o["stp"], "SystemInterface-Stp"); ok {
			if err = d.Set("stp", vv); err != nil {
				return fmt.Errorf("Error reading stp: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading stp: %v", err)
		}
	}

	if err = d.Set("stp_ha_slave", flattenSystemInterfaceStpHaSlave(o["stp-ha-slave"], d, "stp_ha_slave")); err != nil {
		if vv, ok := fortiAPIPatch(o["stp-ha-slave"], "SystemInterface-StpHaSlave"); ok {
			if err = d.Set("stp_ha_slave", vv); err != nil {
				return fmt.Errorf("Error reading stp_ha_slave: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading stp_ha_slave: %v", err)
		}
	}

	if err = d.Set("stp_edge", flattenSystemInterfaceStpEdge(o["stp-edge"], d, "stp_edge")); err != nil {
		if vv, ok := fortiAPIPatch(o["stp-edge"], "SystemInterface-StpEdge"); ok {
			if err = d.Set("stp_edge", vv); err != nil {
				return fmt.Errorf("Error reading stp_edge: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading stp_edge: %v", err)
		}
	}

	if err = d.Set("stp_ha_secondary", flattenSystemInterfaceStpHaSecondary(o["stp-ha-secondary"], d, "stp_ha_secondary")); err != nil {
		if vv, ok := fortiAPIPatch(o["stp-ha-secondary"], "SystemInterface-StpHaSecondary"); ok {
			if err = d.Set("stp_ha_secondary", vv); err != nil {
				return fmt.Errorf("Error reading stp_ha_secondary: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading stp_ha_secondary: %v", err)
		}
	}

	if err = d.Set("stpforward", flattenSystemInterfaceStpforward(o["stpforward"], d, "stpforward")); err != nil {
		if vv, ok := fortiAPIPatch(o["stpforward"], "SystemInterface-Stpforward"); ok {
			if err = d.Set("stpforward", vv); err != nil {
				return fmt.Errorf("Error reading stpforward: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading stpforward: %v", err)
		}
	}

	if err = d.Set("stpforward_mode", flattenSystemInterfaceStpforwardMode(o["stpforward-mode"], d, "stpforward_mode")); err != nil {
		if vv, ok := fortiAPIPatch(o["stpforward-mode"], "SystemInterface-StpforwardMode"); ok {
			if err = d.Set("stpforward_mode", vv); err != nil {
				return fmt.Errorf("Error reading stpforward_mode: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading stpforward_mode: %v", err)
		}
	}

	if err = d.Set("subst", flattenSystemInterfaceSubst(o["subst"], d, "subst")); err != nil {
		if vv, ok := fortiAPIPatch(o["subst"], "SystemInterface-Subst"); ok {
			if err = d.Set("subst", vv); err != nil {
				return fmt.Errorf("Error reading subst: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading subst: %v", err)
		}
	}

	if err = d.Set("substitute_dst_mac", flattenSystemInterfaceSubstituteDstMac(o["substitute-dst-mac"], d, "substitute_dst_mac")); err != nil {
		if vv, ok := fortiAPIPatch(o["substitute-dst-mac"], "SystemInterface-SubstituteDstMac"); ok {
			if err = d.Set("substitute_dst_mac", vv); err != nil {
				return fmt.Errorf("Error reading substitute_dst_mac: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading substitute_dst_mac: %v", err)
		}
	}

	if err = d.Set("sw_algorithm", flattenSystemInterfaceSwAlgorithm(o["sw-algorithm"], d, "sw_algorithm")); err != nil {
		if vv, ok := fortiAPIPatch(o["sw-algorithm"], "SystemInterface-SwAlgorithm"); ok {
			if err = d.Set("sw_algorithm", vv); err != nil {
				return fmt.Errorf("Error reading sw_algorithm: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading sw_algorithm: %v", err)
		}
	}

	if err = d.Set("swc_first_create", flattenSystemInterfaceSwcFirstCreate(o["swc-first-create"], d, "swc_first_create")); err != nil {
		if vv, ok := fortiAPIPatch(o["swc-first-create"], "SystemInterface-SwcFirstCreate"); ok {
			if err = d.Set("swc_first_create", vv); err != nil {
				return fmt.Errorf("Error reading swc_first_create: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading swc_first_create: %v", err)
		}
	}

	if err = d.Set("swc_vlan", flattenSystemInterfaceSwcVlan(o["swc-vlan"], d, "swc_vlan")); err != nil {
		if vv, ok := fortiAPIPatch(o["swc-vlan"], "SystemInterface-SwcVlan"); ok {
			if err = d.Set("swc_vlan", vv); err != nil {
				return fmt.Errorf("Error reading swc_vlan: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading swc_vlan: %v", err)
		}
	}

	if err = d.Set("switch", flattenSystemInterfaceSwitch(o["switch"], d, "switch")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch"], "SystemInterface-Switch"); ok {
			if err = d.Set("switch", vv); err != nil {
				return fmt.Errorf("Error reading switch: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch: %v", err)
		}
	}

	if err = d.Set("switch_controller_access_vlan", flattenSystemInterfaceSwitchControllerAccessVlan(o["switch-controller-access-vlan"], d, "switch_controller_access_vlan")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-access-vlan"], "SystemInterface-SwitchControllerAccessVlan"); ok {
			if err = d.Set("switch_controller_access_vlan", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_access_vlan: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_access_vlan: %v", err)
		}
	}

	if err = d.Set("switch_controller_arp_inspection", flattenSystemInterfaceSwitchControllerArpInspection(o["switch-controller-arp-inspection"], d, "switch_controller_arp_inspection")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-arp-inspection"], "SystemInterface-SwitchControllerArpInspection"); ok {
			if err = d.Set("switch_controller_arp_inspection", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_arp_inspection: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_arp_inspection: %v", err)
		}
	}

	if err = d.Set("switch_controller_dhcp_snooping", flattenSystemInterfaceSwitchControllerDhcpSnooping(o["switch-controller-dhcp-snooping"], d, "switch_controller_dhcp_snooping")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-dhcp-snooping"], "SystemInterface-SwitchControllerDhcpSnooping"); ok {
			if err = d.Set("switch_controller_dhcp_snooping", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_dhcp_snooping: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_dhcp_snooping: %v", err)
		}
	}

	if err = d.Set("switch_controller_dhcp_snooping_option82", flattenSystemInterfaceSwitchControllerDhcpSnoopingOption82(o["switch-controller-dhcp-snooping-option82"], d, "switch_controller_dhcp_snooping_option82")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-dhcp-snooping-option82"], "SystemInterface-SwitchControllerDhcpSnoopingOption82"); ok {
			if err = d.Set("switch_controller_dhcp_snooping_option82", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_dhcp_snooping_option82: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_dhcp_snooping_option82: %v", err)
		}
	}

	if err = d.Set("switch_controller_dhcp_snooping_verify_mac", flattenSystemInterfaceSwitchControllerDhcpSnoopingVerifyMac(o["switch-controller-dhcp-snooping-verify-mac"], d, "switch_controller_dhcp_snooping_verify_mac")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-dhcp-snooping-verify-mac"], "SystemInterface-SwitchControllerDhcpSnoopingVerifyMac"); ok {
			if err = d.Set("switch_controller_dhcp_snooping_verify_mac", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_dhcp_snooping_verify_mac: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_dhcp_snooping_verify_mac: %v", err)
		}
	}

	if err = d.Set("switch_controller_dynamic", flattenSystemInterfaceSwitchControllerDynamic(o["switch-controller-dynamic"], d, "switch_controller_dynamic")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-dynamic"], "SystemInterface-SwitchControllerDynamic"); ok {
			if err = d.Set("switch_controller_dynamic", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_dynamic: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_dynamic: %v", err)
		}
	}

	if err = d.Set("switch_controller_feature", flattenSystemInterfaceSwitchControllerFeature(o["switch-controller-feature"], d, "switch_controller_feature")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-feature"], "SystemInterface-SwitchControllerFeature"); ok {
			if err = d.Set("switch_controller_feature", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_feature: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_feature: %v", err)
		}
	}

	if err = d.Set("switch_controller_igmp_snooping", flattenSystemInterfaceSwitchControllerIgmpSnooping(o["switch-controller-igmp-snooping"], d, "switch_controller_igmp_snooping")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-igmp-snooping"], "SystemInterface-SwitchControllerIgmpSnooping"); ok {
			if err = d.Set("switch_controller_igmp_snooping", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_igmp_snooping: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_igmp_snooping: %v", err)
		}
	}

	if err = d.Set("switch_controller_igmp_snooping_fast_leave", flattenSystemInterfaceSwitchControllerIgmpSnoopingFastLeave(o["switch-controller-igmp-snooping-fast-leave"], d, "switch_controller_igmp_snooping_fast_leave")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-igmp-snooping-fast-leave"], "SystemInterface-SwitchControllerIgmpSnoopingFastLeave"); ok {
			if err = d.Set("switch_controller_igmp_snooping_fast_leave", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_igmp_snooping_fast_leave: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_igmp_snooping_fast_leave: %v", err)
		}
	}

	if err = d.Set("switch_controller_igmp_snooping_proxy", flattenSystemInterfaceSwitchControllerIgmpSnoopingProxy(o["switch-controller-igmp-snooping-proxy"], d, "switch_controller_igmp_snooping_proxy")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-igmp-snooping-proxy"], "SystemInterface-SwitchControllerIgmpSnoopingProxy"); ok {
			if err = d.Set("switch_controller_igmp_snooping_proxy", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_igmp_snooping_proxy: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_igmp_snooping_proxy: %v", err)
		}
	}

	if err = d.Set("switch_controller_iot_scanning", flattenSystemInterfaceSwitchControllerIotScanning(o["switch-controller-iot-scanning"], d, "switch_controller_iot_scanning")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-iot-scanning"], "SystemInterface-SwitchControllerIotScanning"); ok {
			if err = d.Set("switch_controller_iot_scanning", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_iot_scanning: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_iot_scanning: %v", err)
		}
	}

	if err = d.Set("switch_controller_learning_limit", flattenSystemInterfaceSwitchControllerLearningLimit(o["switch-controller-learning-limit"], d, "switch_controller_learning_limit")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-learning-limit"], "SystemInterface-SwitchControllerLearningLimit"); ok {
			if err = d.Set("switch_controller_learning_limit", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_learning_limit: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_learning_limit: %v", err)
		}
	}

	if err = d.Set("switch_controller_mgmt_vlan", flattenSystemInterfaceSwitchControllerMgmtVlan(o["switch-controller-mgmt-vlan"], d, "switch_controller_mgmt_vlan")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-mgmt-vlan"], "SystemInterface-SwitchControllerMgmtVlan"); ok {
			if err = d.Set("switch_controller_mgmt_vlan", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_mgmt_vlan: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_mgmt_vlan: %v", err)
		}
	}

	if err = d.Set("switch_controller_nac", flattenSystemInterfaceSwitchControllerNac(o["switch-controller-nac"], d, "switch_controller_nac")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-nac"], "SystemInterface-SwitchControllerNac"); ok {
			if err = d.Set("switch_controller_nac", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_nac: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_nac: %v", err)
		}
	}

	if err = d.Set("switch_controller_netflow_collect", flattenSystemInterfaceSwitchControllerNetflowCollect(o["switch-controller-netflow-collect"], d, "switch_controller_netflow_collect")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-netflow-collect"], "SystemInterface-SwitchControllerNetflowCollect"); ok {
			if err = d.Set("switch_controller_netflow_collect", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_netflow_collect: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_netflow_collect: %v", err)
		}
	}

	if err = d.Set("switch_controller_offload", flattenSystemInterfaceSwitchControllerOffload(o["switch-controller-offload"], d, "switch_controller_offload")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-offload"], "SystemInterface-SwitchControllerOffload"); ok {
			if err = d.Set("switch_controller_offload", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_offload: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_offload: %v", err)
		}
	}

	if err = d.Set("switch_controller_offload_gw", flattenSystemInterfaceSwitchControllerOffloadGw(o["switch-controller-offload-gw"], d, "switch_controller_offload_gw")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-offload-gw"], "SystemInterface-SwitchControllerOffloadGw"); ok {
			if err = d.Set("switch_controller_offload_gw", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_offload_gw: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_offload_gw: %v", err)
		}
	}

	if err = d.Set("switch_controller_offload_ip", flattenSystemInterfaceSwitchControllerOffloadIp(o["switch-controller-offload-ip"], d, "switch_controller_offload_ip")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-offload-ip"], "SystemInterface-SwitchControllerOffloadIp"); ok {
			if err = d.Set("switch_controller_offload_ip", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_offload_ip: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_offload_ip: %v", err)
		}
	}

	if err = d.Set("switch_controller_rspan_mode", flattenSystemInterfaceSwitchControllerRspanMode(o["switch-controller-rspan-mode"], d, "switch_controller_rspan_mode")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-rspan-mode"], "SystemInterface-SwitchControllerRspanMode"); ok {
			if err = d.Set("switch_controller_rspan_mode", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_rspan_mode: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_rspan_mode: %v", err)
		}
	}

	if err = d.Set("switch_controller_source_ip", flattenSystemInterfaceSwitchControllerSourceIp(o["switch-controller-source-ip"], d, "switch_controller_source_ip")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-source-ip"], "SystemInterface-SwitchControllerSourceIp"); ok {
			if err = d.Set("switch_controller_source_ip", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_source_ip: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_source_ip: %v", err)
		}
	}

	if err = d.Set("switch_controller_traffic_policy", flattenSystemInterfaceSwitchControllerTrafficPolicy(o["switch-controller-traffic-policy"], d, "switch_controller_traffic_policy")); err != nil {
		if vv, ok := fortiAPIPatch(o["switch-controller-traffic-policy"], "SystemInterface-SwitchControllerTrafficPolicy"); ok {
			if err = d.Set("switch_controller_traffic_policy", vv); err != nil {
				return fmt.Errorf("Error reading switch_controller_traffic_policy: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading switch_controller_traffic_policy: %v", err)
		}
	}

	if err = d.Set("system_id", flattenSystemInterfaceSystemId(o["system-id"], d, "system_id")); err != nil {
		if vv, ok := fortiAPIPatch(o["system-id"], "SystemInterface-SystemId"); ok {
			if err = d.Set("system_id", vv); err != nil {
				return fmt.Errorf("Error reading system_id: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading system_id: %v", err)
		}
	}

	if err = d.Set("system_id_type", flattenSystemInterfaceSystemIdType(o["system-id-type"], d, "system_id_type")); err != nil {
		if vv, ok := fortiAPIPatch(o["system-id-type"], "SystemInterface-SystemIdType"); ok {
			if err = d.Set("system_id_type", vv); err != nil {
				return fmt.Errorf("Error reading system_id_type: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading system_id_type: %v", err)
		}
	}

	if isImportTable() {
		if err = d.Set("tagging", flattenSystemInterfaceTagging(o["tagging"], d, "tagging")); err != nil {
			if vv, ok := fortiAPIPatch(o["tagging"], "SystemInterface-Tagging"); ok {
				if err = d.Set("tagging", vv); err != nil {
					return fmt.Errorf("Error reading tagging: %v", err)
				}
			} else {
				return fmt.Errorf("Error reading tagging: %v", err)
			}
		}
	} else {
		if _, ok := d.GetOk("tagging"); ok {
			if err = d.Set("tagging", flattenSystemInterfaceTagging(o["tagging"], d, "tagging")); err != nil {
				if vv, ok := fortiAPIPatch(o["tagging"], "SystemInterface-Tagging"); ok {
					if err = d.Set("tagging", vv); err != nil {
						return fmt.Errorf("Error reading tagging: %v", err)
					}
				} else {
					return fmt.Errorf("Error reading tagging: %v", err)
				}
			}
		}
	}

	if err = d.Set("tc_mode", flattenSystemInterfaceTcMode(o["tc-mode"], d, "tc_mode")); err != nil {
		if vv, ok := fortiAPIPatch(o["tc-mode"], "SystemInterface-TcMode"); ok {
			if err = d.Set("tc_mode", vv); err != nil {
				return fmt.Errorf("Error reading tc_mode: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading tc_mode: %v", err)
		}
	}

	if err = d.Set("tcp_mss", flattenSystemInterfaceTcpMss(o["tcp-mss"], d, "tcp_mss")); err != nil {
		if vv, ok := fortiAPIPatch(o["tcp-mss"], "SystemInterface-TcpMss"); ok {
			if err = d.Set("tcp_mss", vv); err != nil {
				return fmt.Errorf("Error reading tcp_mss: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading tcp_mss: %v", err)
		}
	}

	if err = d.Set("trunk", flattenSystemInterfaceTrunk(o["trunk"], d, "trunk")); err != nil {
		if vv, ok := fortiAPIPatch(o["trunk"], "SystemInterface-Trunk"); ok {
			if err = d.Set("trunk", vv); err != nil {
				return fmt.Errorf("Error reading trunk: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading trunk: %v", err)
		}
	}

	if err = d.Set("trust_ip_1", flattenSystemInterfaceTrustIp1(o["trust-ip-1"], d, "trust_ip_1")); err != nil {
		if vv, ok := fortiAPIPatch(o["trust-ip-1"], "SystemInterface-TrustIp1"); ok {
			if err = d.Set("trust_ip_1", vv); err != nil {
				return fmt.Errorf("Error reading trust_ip_1: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading trust_ip_1: %v", err)
		}
	}

	if err = d.Set("trust_ip_2", flattenSystemInterfaceTrustIp2(o["trust-ip-2"], d, "trust_ip_2")); err != nil {
		if vv, ok := fortiAPIPatch(o["trust-ip-2"], "SystemInterface-TrustIp2"); ok {
			if err = d.Set("trust_ip_2", vv); err != nil {
				return fmt.Errorf("Error reading trust_ip_2: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading trust_ip_2: %v", err)
		}
	}

	if err = d.Set("trust_ip_3", flattenSystemInterfaceTrustIp3(o["trust-ip-3"], d, "trust_ip_3")); err != nil {
		if vv, ok := fortiAPIPatch(o["trust-ip-3"], "SystemInterface-TrustIp3"); ok {
			if err = d.Set("trust_ip_3", vv); err != nil {
				return fmt.Errorf("Error reading trust_ip_3: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading trust_ip_3: %v", err)
		}
	}

	if err = d.Set("trust_ip6_1", flattenSystemInterfaceTrustIp61(o["trust-ip6-1"], d, "trust_ip6_1")); err != nil {
		if vv, ok := fortiAPIPatch(o["trust-ip6-1"], "SystemInterface-TrustIp61"); ok {
			if err = d.Set("trust_ip6_1", vv); err != nil {
				return fmt.Errorf("Error reading trust_ip6_1: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading trust_ip6_1: %v", err)
		}
	}

	if err = d.Set("trust_ip6_2", flattenSystemInterfaceTrustIp62(o["trust-ip6-2"], d, "trust_ip6_2")); err != nil {
		if vv, ok := fortiAPIPatch(o["trust-ip6-2"], "SystemInterface-TrustIp62"); ok {
			if err = d.Set("trust_ip6_2", vv); err != nil {
				return fmt.Errorf("Error reading trust_ip6_2: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading trust_ip6_2: %v", err)
		}
	}

	if err = d.Set("trust_ip6_3", flattenSystemInterfaceTrustIp63(o["trust-ip6-3"], d, "trust_ip6_3")); err != nil {
		if vv, ok := fortiAPIPatch(o["trust-ip6-3"], "SystemInterface-TrustIp63"); ok {
			if err = d.Set("trust_ip6_3", vv); err != nil {
				return fmt.Errorf("Error reading trust_ip6_3: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading trust_ip6_3: %v", err)
		}
	}

	if err = d.Set("type", flattenSystemInterfaceType(o["type"], d, "type")); err != nil {
		if vv, ok := fortiAPIPatch(o["type"], "SystemInterface-Type"); ok {
			if err = d.Set("type", vv); err != nil {
				return fmt.Errorf("Error reading type: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading type: %v", err)
		}
	}

	if err = d.Set("username", flattenSystemInterfaceUsername(o["username"], d, "username")); err != nil {
		if vv, ok := fortiAPIPatch(o["username"], "SystemInterface-Username"); ok {
			if err = d.Set("username", vv); err != nil {
				return fmt.Errorf("Error reading username: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading username: %v", err)
		}
	}

	if err = d.Set("vci", flattenSystemInterfaceVci(o["vci"], d, "vci")); err != nil {
		if vv, ok := fortiAPIPatch(o["vci"], "SystemInterface-Vci"); ok {
			if err = d.Set("vci", vv); err != nil {
				return fmt.Errorf("Error reading vci: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading vci: %v", err)
		}
	}

	if err = d.Set("vdom", flattenSystemInterfaceVdom(o["vdom"], d, "vdom")); err != nil {
		if vv, ok := fortiAPIPatch(o["vdom"], "SystemInterface-Vdom"); ok {
			if err = d.Set("vdom", vv); err != nil {
				return fmt.Errorf("Error reading vdom: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading vdom: %v", err)
		}
	}

	if err = d.Set("vectoring", flattenSystemInterfaceVectoring(o["vectoring"], d, "vectoring")); err != nil {
		if vv, ok := fortiAPIPatch(o["vectoring"], "SystemInterface-Vectoring"); ok {
			if err = d.Set("vectoring", vv); err != nil {
				return fmt.Errorf("Error reading vectoring: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading vectoring: %v", err)
		}
	}

	if err = d.Set("vindex", flattenSystemInterfaceVindex(o["vindex"], d, "vindex")); err != nil {
		if vv, ok := fortiAPIPatch(o["vindex"], "SystemInterface-Vindex"); ok {
			if err = d.Set("vindex", vv); err != nil {
				return fmt.Errorf("Error reading vindex: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading vindex: %v", err)
		}
	}

	if err = d.Set("virtual_mac", flattenSystemInterfaceVirtualMac(o["virtual-mac"], d, "virtual_mac")); err != nil {
		if vv, ok := fortiAPIPatch(o["virtual-mac"], "SystemInterface-VirtualMac"); ok {
			if err = d.Set("virtual_mac", vv); err != nil {
				return fmt.Errorf("Error reading virtual_mac: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading virtual_mac: %v", err)
		}
	}

	if err = d.Set("vlan_id", flattenSystemInterfaceVlanId(o["vlan-id"], d, "vlan_id")); err != nil {
		if vv, ok := fortiAPIPatch(o["vlan-id"], "SystemInterface-VlanId"); ok {
			if err = d.Set("vlan_id", vv); err != nil {
				return fmt.Errorf("Error reading vlan_id: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading vlan_id: %v", err)
		}
	}

	if err = d.Set("vlan_op_mode", flattenSystemInterfaceVlanOpMode(o["vlan-op-mode"], d, "vlan_op_mode")); err != nil {
		if vv, ok := fortiAPIPatch(o["vlan-op-mode"], "SystemInterface-VlanOpMode"); ok {
			if err = d.Set("vlan_op_mode", vv); err != nil {
				return fmt.Errorf("Error reading vlan_op_mode: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading vlan_op_mode: %v", err)
		}
	}

	if err = d.Set("vlan_protocol", flattenSystemInterfaceVlanProtocol(o["vlan-protocol"], d, "vlan_protocol")); err != nil {
		if vv, ok := fortiAPIPatch(o["vlan-protocol"], "SystemInterface-VlanProtocol"); ok {
			if err = d.Set("vlan_protocol", vv); err != nil {
				return fmt.Errorf("Error reading vlan_protocol: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading vlan_protocol: %v", err)
		}
	}

	if err = d.Set("vlanforward", flattenSystemInterfaceVlanforward(o["vlanforward"], d, "vlanforward")); err != nil {
		if vv, ok := fortiAPIPatch(o["vlanforward"], "SystemInterface-Vlanforward"); ok {
			if err = d.Set("vlanforward", vv); err != nil {
				return fmt.Errorf("Error reading vlanforward: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading vlanforward: %v", err)
		}
	}

	if err = d.Set("vlanid", flattenSystemInterfaceVlanid(o["vlanid"], d, "vlanid")); err != nil {
		if vv, ok := fortiAPIPatch(o["vlanid"], "SystemInterface-Vlanid"); ok {
			if err = d.Set("vlanid", vv); err != nil {
				return fmt.Errorf("Error reading vlanid: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading vlanid: %v", err)
		}
	}

	if err = d.Set("vpi", flattenSystemInterfaceVpi(o["vpi"], d, "vpi")); err != nil {
		if vv, ok := fortiAPIPatch(o["vpi"], "SystemInterface-Vpi"); ok {
			if err = d.Set("vpi", vv); err != nil {
				return fmt.Errorf("Error reading vpi: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading vpi: %v", err)
		}
	}

	if err = d.Set("vrf", flattenSystemInterfaceVrf(o["vrf"], d, "vrf")); err != nil {
		if vv, ok := fortiAPIPatch(o["vrf"], "SystemInterface-Vrf"); ok {
			if err = d.Set("vrf", vv); err != nil {
				return fmt.Errorf("Error reading vrf: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading vrf: %v", err)
		}
	}

	if isImportTable() {
		if err = d.Set("vrrp", flattenSystemInterfaceVrrp(o["vrrp"], d, "vrrp")); err != nil {
			if vv, ok := fortiAPIPatch(o["vrrp"], "SystemInterface-Vrrp"); ok {
				if err = d.Set("vrrp", vv); err != nil {
					return fmt.Errorf("Error reading vrrp: %v", err)
				}
			} else {
				return fmt.Errorf("Error reading vrrp: %v", err)
			}
		}
	} else {
		if _, ok := d.GetOk("vrrp"); ok {
			if err = d.Set("vrrp", flattenSystemInterfaceVrrp(o["vrrp"], d, "vrrp")); err != nil {
				if vv, ok := fortiAPIPatch(o["vrrp"], "SystemInterface-Vrrp"); ok {
					if err = d.Set("vrrp", vv); err != nil {
						return fmt.Errorf("Error reading vrrp: %v", err)
					}
				} else {
					return fmt.Errorf("Error reading vrrp: %v", err)
				}
			}
		}
	}

	if err = d.Set("vrrp_virtual_mac", flattenSystemInterfaceVrrpVirtualMac(o["vrrp-virtual-mac"], d, "vrrp_virtual_mac")); err != nil {
		if vv, ok := fortiAPIPatch(o["vrrp-virtual-mac"], "SystemInterface-VrrpVirtualMac"); ok {
			if err = d.Set("vrrp_virtual_mac", vv); err != nil {
				return fmt.Errorf("Error reading vrrp_virtual_mac: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading vrrp_virtual_mac: %v", err)
		}
	}

	if err = d.Set("wccp", flattenSystemInterfaceWccp(o["wccp"], d, "wccp")); err != nil {
		if vv, ok := fortiAPIPatch(o["wccp"], "SystemInterface-Wccp"); ok {
			if err = d.Set("wccp", vv); err != nil {
				return fmt.Errorf("Error reading wccp: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wccp: %v", err)
		}
	}

	if err = d.Set("weight", flattenSystemInterfaceWeight(o["weight"], d, "weight")); err != nil {
		if vv, ok := fortiAPIPatch(o["weight"], "SystemInterface-Weight"); ok {
			if err = d.Set("weight", vv); err != nil {
				return fmt.Errorf("Error reading weight: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading weight: %v", err)
		}
	}

	if err = d.Set("wifi_5g_threshold", flattenSystemInterfaceWifi5GThreshold(o["wifi-5g-threshold"], d, "wifi_5g_threshold")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-5g-threshold"], "SystemInterface-Wifi5GThreshold"); ok {
			if err = d.Set("wifi_5g_threshold", vv); err != nil {
				return fmt.Errorf("Error reading wifi_5g_threshold: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_5g_threshold: %v", err)
		}
	}

	if err = d.Set("wifi_acl", flattenSystemInterfaceWifiAcl(o["wifi-acl"], d, "wifi_acl")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-acl"], "SystemInterface-WifiAcl"); ok {
			if err = d.Set("wifi_acl", vv); err != nil {
				return fmt.Errorf("Error reading wifi_acl: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_acl: %v", err)
		}
	}

	if err = d.Set("wifi_ap_band", flattenSystemInterfaceWifiApBand(o["wifi-ap-band"], d, "wifi_ap_band")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-ap-band"], "SystemInterface-WifiApBand"); ok {
			if err = d.Set("wifi_ap_band", vv); err != nil {
				return fmt.Errorf("Error reading wifi_ap_band: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_ap_band: %v", err)
		}
	}

	if err = d.Set("wifi_auth", flattenSystemInterfaceWifiAuth(o["wifi-auth"], d, "wifi_auth")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-auth"], "SystemInterface-WifiAuth"); ok {
			if err = d.Set("wifi_auth", vv); err != nil {
				return fmt.Errorf("Error reading wifi_auth: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_auth: %v", err)
		}
	}

	if err = d.Set("wifi_auto_connect", flattenSystemInterfaceWifiAutoConnect(o["wifi-auto-connect"], d, "wifi_auto_connect")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-auto-connect"], "SystemInterface-WifiAutoConnect"); ok {
			if err = d.Set("wifi_auto_connect", vv); err != nil {
				return fmt.Errorf("Error reading wifi_auto_connect: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_auto_connect: %v", err)
		}
	}

	if err = d.Set("wifi_auto_save", flattenSystemInterfaceWifiAutoSave(o["wifi-auto-save"], d, "wifi_auto_save")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-auto-save"], "SystemInterface-WifiAutoSave"); ok {
			if err = d.Set("wifi_auto_save", vv); err != nil {
				return fmt.Errorf("Error reading wifi_auto_save: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_auto_save: %v", err)
		}
	}

	if err = d.Set("wifi_broadcast_ssid", flattenSystemInterfaceWifiBroadcastSsid(o["wifi-broadcast-ssid"], d, "wifi_broadcast_ssid")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-broadcast-ssid"], "SystemInterface-WifiBroadcastSsid"); ok {
			if err = d.Set("wifi_broadcast_ssid", vv); err != nil {
				return fmt.Errorf("Error reading wifi_broadcast_ssid: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_broadcast_ssid: %v", err)
		}
	}

	if err = d.Set("wifi_dns_server1", flattenSystemInterfaceWifiDnsServer1(o["wifi-dns-server1"], d, "wifi_dns_server1")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-dns-server1"], "SystemInterface-WifiDnsServer1"); ok {
			if err = d.Set("wifi_dns_server1", vv); err != nil {
				return fmt.Errorf("Error reading wifi_dns_server1: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_dns_server1: %v", err)
		}
	}

	if err = d.Set("wifi_dns_server2", flattenSystemInterfaceWifiDnsServer2(o["wifi-dns-server2"], d, "wifi_dns_server2")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-dns-server2"], "SystemInterface-WifiDnsServer2"); ok {
			if err = d.Set("wifi_dns_server2", vv); err != nil {
				return fmt.Errorf("Error reading wifi_dns_server2: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_dns_server2: %v", err)
		}
	}

	if err = d.Set("wifi_encrypt", flattenSystemInterfaceWifiEncrypt(o["wifi-encrypt"], d, "wifi_encrypt")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-encrypt"], "SystemInterface-WifiEncrypt"); ok {
			if err = d.Set("wifi_encrypt", vv); err != nil {
				return fmt.Errorf("Error reading wifi_encrypt: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_encrypt: %v", err)
		}
	}

	if err = d.Set("wifi_fragment_threshold", flattenSystemInterfaceWifiFragmentThreshold(o["wifi-fragment-threshold"], d, "wifi_fragment_threshold")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-fragment-threshold"], "SystemInterface-WifiFragmentThreshold"); ok {
			if err = d.Set("wifi_fragment_threshold", vv); err != nil {
				return fmt.Errorf("Error reading wifi_fragment_threshold: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_fragment_threshold: %v", err)
		}
	}

	if err = d.Set("wifi_gateway", flattenSystemInterfaceWifiGateway(o["wifi-gateway"], d, "wifi_gateway")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-gateway"], "SystemInterface-WifiGateway"); ok {
			if err = d.Set("wifi_gateway", vv); err != nil {
				return fmt.Errorf("Error reading wifi_gateway: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_gateway: %v", err)
		}
	}

	if err = d.Set("wifi_keyindex", flattenSystemInterfaceWifiKeyindex(o["wifi-keyindex"], d, "wifi_keyindex")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-keyindex"], "SystemInterface-WifiKeyindex"); ok {
			if err = d.Set("wifi_keyindex", vv); err != nil {
				return fmt.Errorf("Error reading wifi_keyindex: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_keyindex: %v", err)
		}
	}

	if err = d.Set("wifi_mac_filter", flattenSystemInterfaceWifiMacFilter(o["wifi-mac-filter"], d, "wifi_mac_filter")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-mac-filter"], "SystemInterface-WifiMacFilter"); ok {
			if err = d.Set("wifi_mac_filter", vv); err != nil {
				return fmt.Errorf("Error reading wifi_mac_filter: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_mac_filter: %v", err)
		}
	}

	if isImportTable() {
		if err = d.Set("wifi_networks", flattenSystemInterfaceWifiNetworks(o["wifi-networks"], d, "wifi_networks")); err != nil {
			if vv, ok := fortiAPIPatch(o["wifi-networks"], "SystemInterface-WifiNetworks"); ok {
				if err = d.Set("wifi_networks", vv); err != nil {
					return fmt.Errorf("Error reading wifi_networks: %v", err)
				}
			} else {
				return fmt.Errorf("Error reading wifi_networks: %v", err)
			}
		}
	} else {
		if _, ok := d.GetOk("wifi_networks"); ok {
			if err = d.Set("wifi_networks", flattenSystemInterfaceWifiNetworks(o["wifi-networks"], d, "wifi_networks")); err != nil {
				if vv, ok := fortiAPIPatch(o["wifi-networks"], "SystemInterface-WifiNetworks"); ok {
					if err = d.Set("wifi_networks", vv); err != nil {
						return fmt.Errorf("Error reading wifi_networks: %v", err)
					}
				} else {
					return fmt.Errorf("Error reading wifi_networks: %v", err)
				}
			}
		}
	}

	if err = d.Set("wifi_radius_server", flattenSystemInterfaceWifiRadiusServer(o["wifi-radius-server"], d, "wifi_radius_server")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-radius-server"], "SystemInterface-WifiRadiusServer"); ok {
			if err = d.Set("wifi_radius_server", vv); err != nil {
				return fmt.Errorf("Error reading wifi_radius_server: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_radius_server: %v", err)
		}
	}

	if err = d.Set("wifi_rts_threshold", flattenSystemInterfaceWifiRtsThreshold(o["wifi-rts-threshold"], d, "wifi_rts_threshold")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-rts-threshold"], "SystemInterface-WifiRtsThreshold"); ok {
			if err = d.Set("wifi_rts_threshold", vv); err != nil {
				return fmt.Errorf("Error reading wifi_rts_threshold: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_rts_threshold: %v", err)
		}
	}

	if err = d.Set("wifi_security", flattenSystemInterfaceWifiSecurity(o["wifi-security"], d, "wifi_security")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-security"], "SystemInterface-WifiSecurity"); ok {
			if err = d.Set("wifi_security", vv); err != nil {
				return fmt.Errorf("Error reading wifi_security: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_security: %v", err)
		}
	}

	if err = d.Set("wifi_ssid", flattenSystemInterfaceWifiSsid(o["wifi-ssid"], d, "wifi_ssid")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-ssid"], "SystemInterface-WifiSsid"); ok {
			if err = d.Set("wifi_ssid", vv); err != nil {
				return fmt.Errorf("Error reading wifi_ssid: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_ssid: %v", err)
		}
	}

	if err = d.Set("wifi_usergroup", flattenSystemInterfaceWifiUsergroup(o["wifi-usergroup"], d, "wifi_usergroup")); err != nil {
		if vv, ok := fortiAPIPatch(o["wifi-usergroup"], "SystemInterface-WifiUsergroup"); ok {
			if err = d.Set("wifi_usergroup", vv); err != nil {
				return fmt.Errorf("Error reading wifi_usergroup: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wifi_usergroup: %v", err)
		}
	}

	if err = d.Set("wins_ip", flattenSystemInterfaceWinsIp(o["wins-ip"], d, "wins_ip")); err != nil {
		if vv, ok := fortiAPIPatch(o["wins-ip"], "SystemInterface-WinsIp"); ok {
			if err = d.Set("wins_ip", vv); err != nil {
				return fmt.Errorf("Error reading wins_ip: %v", err)
			}
		} else {
			return fmt.Errorf("Error reading wins_ip: %v", err)
		}
	}

	return nil
}

func flattenSystemInterfaceFortiTestDebug(d *schema.ResourceData, fosdebugsn int, fosdebugbeg int, fosdebugend int) {
	log.Printf(strconv.Itoa(fosdebugsn))
	e := validation.IntBetween(fosdebugbeg, fosdebugend)
	log.Printf("ER List: %v", e)
}

func expandSystemInterfaceAcName(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceAggregate(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceAggregateType(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceAlgorithm(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceAlias(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceAllowaccess(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceAnnex(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceApDiscover(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceArpforward(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceAtmProtocol(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceAuthCert(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceAuthPortalAddr(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceAuthType(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceAutoAuthExtensionDevice(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceBandwidthMeasureTime(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceBfd(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceBfdDesiredMinTx(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceBfdDetectMult(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceBfdRequiredMinRx(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceBroadcastForticlientDiscovery(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceBroadcastForward(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceCaptivePortal(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceCliConnStatus(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceClientOptions(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "code"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["code"], _ = expandSystemInterfaceClientOptionsCode(d, i["code"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "id"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["id"], _ = expandSystemInterfaceClientOptionsId(d, i["id"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "ip"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["ip"], _ = expandSystemInterfaceClientOptionsIp(d, i["ip"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "type"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["type"], _ = expandSystemInterfaceClientOptionsType(d, i["type"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "value"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["value"], _ = expandSystemInterfaceClientOptionsValue(d, i["value"], pre_append)
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceClientOptionsCode(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceClientOptionsId(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceClientOptionsIp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceClientOptionsType(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceClientOptionsValue(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceColor(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDedicatedTo(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDefaultPurdueLevel(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDefaultgw(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDescription(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDetectedPeerMtu(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDeviceIdentification(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDeviceUserIdentification(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDevindex(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpBroadcastFlag(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpClasslessRouteAddition(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpClientIdentifier(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpRelayAgentOption(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpRelayAllowNoEndOption(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpRelayCircuitId(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpRelayInterface(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceDhcpRelayInterfaceSelectMethod(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpRelayIp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceDhcpRelayLinkSelection(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpRelayRequestAllServer(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpRelayService(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpRelaySourceIp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpRelayType(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpRelayVrfSelect(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpRenewTime(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpSmartRelay(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpSnoopingServerList(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "name"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["name"], _ = expandSystemInterfaceDhcpSnoopingServerListName(d, i["name"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "server_ip"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["server-ip"], _ = expandSystemInterfaceDhcpSnoopingServerListServerIp(d, i["server_ip"], pre_append)
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceDhcpSnoopingServerListName(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDhcpSnoopingServerListServerIp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDiscRetryTimeout(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDisconnectThreshold(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDistance(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDnsServerOverride(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDnsServerProtocol(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceDropFragment(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceDropOverlappedFragment(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceEapCaCert(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceEapIdentity(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceEapMethod(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceEapPassword(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceEapSupplicant(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceEapUserCert(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceEgressCos(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceEgressQueues(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}

	i := l[0].(map[string]interface{})
	result := make(map[string]interface{})

	pre_append := "" // complex
	pre_append = pre + ".0." + "cos0"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["cos0"], _ = expandSystemInterfaceEgressQueuesCos0(d, i["cos0"], pre_append)
	}
	pre_append = pre + ".0." + "cos1"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["cos1"], _ = expandSystemInterfaceEgressQueuesCos1(d, i["cos1"], pre_append)
	}
	pre_append = pre + ".0." + "cos2"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["cos2"], _ = expandSystemInterfaceEgressQueuesCos2(d, i["cos2"], pre_append)
	}
	pre_append = pre + ".0." + "cos3"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["cos3"], _ = expandSystemInterfaceEgressQueuesCos3(d, i["cos3"], pre_append)
	}
	pre_append = pre + ".0." + "cos4"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["cos4"], _ = expandSystemInterfaceEgressQueuesCos4(d, i["cos4"], pre_append)
	}
	pre_append = pre + ".0." + "cos5"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["cos5"], _ = expandSystemInterfaceEgressQueuesCos5(d, i["cos5"], pre_append)
	}
	pre_append = pre + ".0." + "cos6"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["cos6"], _ = expandSystemInterfaceEgressQueuesCos6(d, i["cos6"], pre_append)
	}
	pre_append = pre + ".0." + "cos7"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["cos7"], _ = expandSystemInterfaceEgressQueuesCos7(d, i["cos7"], pre_append)
	}

	return result, nil
}

func expandSystemInterfaceEgressQueuesCos0(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceEgressQueuesCos1(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceEgressQueuesCos2(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceEgressQueuesCos3(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceEgressQueuesCos4(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceEgressQueuesCos5(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceEgressQueuesCos6(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceEgressQueuesCos7(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceEgressShapingProfile(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceEip(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceEstimatedDownstreamBandwidth(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceEstimatedUpstreamBandwidth(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceExcludeSignatures(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceExplicitFtpProxy(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceExplicitWebProxy(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceExternal(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceFailActionOnExtender(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceFailAlertInterfaces(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceFailAlertMethod(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceFailDetect(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceFailDetectOption(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceFortilink(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceFortilinkBackupLink(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceFortilinkNeighborDetect(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceFortilinkSplitInterface(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceFortilinkStacking(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceForwardDomain(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceForwardErrorCorrection(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceGatewayAddress(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceGiGk(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIcmpAcceptRedirect(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIcmpSendRedirect(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIdentAccept(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIdleTimeout(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIkeSamlServer(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceInbandwidth(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIngressCos(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIngressShapingProfile(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceIngressSpilloverThreshold(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceInterconnectProfile(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceInterface(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceInternal(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.([]interface{})), nil
}

func expandSystemInterfaceIpManagedByFortiipam(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpmac(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpsSnifferMode(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpunnumbered(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}

	i := l[0].(map[string]interface{})
	result := make(map[string]interface{})

	pre_append := "" // complex
	pre_append = pre + ".0." + "autoconf"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["autoconf"], _ = expandSystemInterfaceIpv6Autoconf(d, i["autoconf"], pre_append)
	}
	pre_append = pre + ".0." + "cli_conn6_status"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["cli-conn6-status"], _ = expandSystemInterfaceIpv6CliConn6Status(d, i["cli_conn6_status"], pre_append)
	}
	pre_append = pre + ".0." + "client_options"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		t, err := expandSystemInterfaceIpv6ClientOptions(d, i["client_options"], pre_append)
		if err != nil {
			return result, err
		} else if t != nil {
			result["client-options"] = t
		}
	}
	pre_append = pre + ".0." + "dhcp6_client_options"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["dhcp6-client-options"], _ = expandSystemInterfaceIpv6Dhcp6ClientOptions(d, i["dhcp6_client_options"], pre_append)
	}
	pre_append = pre + ".0." + "dhcp6_iapd_list"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		t, err := expandSystemInterfaceIpv6Dhcp6IapdList(d, i["dhcp6_iapd_list"], pre_append)
		if err != nil {
			return result, err
		} else if t != nil {
			result["dhcp6-iapd-list"] = t
		}
	}
	pre_append = pre + ".0." + "dhcp6_information_request"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["dhcp6-information-request"], _ = expandSystemInterfaceIpv6Dhcp6InformationRequest(d, i["dhcp6_information_request"], pre_append)
	}
	pre_append = pre + ".0." + "dhcp6_prefix_delegation"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["dhcp6-prefix-delegation"], _ = expandSystemInterfaceIpv6Dhcp6PrefixDelegation(d, i["dhcp6_prefix_delegation"], pre_append)
	}
	pre_append = pre + ".0." + "dhcp6_prefix_hint"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["dhcp6-prefix-hint"], _ = expandSystemInterfaceIpv6Dhcp6PrefixHint(d, i["dhcp6_prefix_hint"], pre_append)
	}
	pre_append = pre + ".0." + "dhcp6_prefix_hint_plt"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["dhcp6-prefix-hint-plt"], _ = expandSystemInterfaceIpv6Dhcp6PrefixHintPlt(d, i["dhcp6_prefix_hint_plt"], pre_append)
	}
	pre_append = pre + ".0." + "dhcp6_prefix_hint_vlt"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["dhcp6-prefix-hint-vlt"], _ = expandSystemInterfaceIpv6Dhcp6PrefixHintVlt(d, i["dhcp6_prefix_hint_vlt"], pre_append)
	}
	pre_append = pre + ".0." + "dhcp6_relay_interface_id"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["dhcp6-relay-interface-id"], _ = expandSystemInterfaceIpv6Dhcp6RelayInterfaceId(d, i["dhcp6_relay_interface_id"], pre_append)
	}
	pre_append = pre + ".0." + "dhcp6_relay_ip"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["dhcp6-relay-ip"], _ = expandSystemInterfaceIpv6Dhcp6RelayIp(d, i["dhcp6_relay_ip"], pre_append)
	}
	pre_append = pre + ".0." + "dhcp6_relay_service"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["dhcp6-relay-service"], _ = expandSystemInterfaceIpv6Dhcp6RelayService(d, i["dhcp6_relay_service"], pre_append)
	}
	pre_append = pre + ".0." + "dhcp6_relay_source_interface"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["dhcp6-relay-source-interface"], _ = expandSystemInterfaceIpv6Dhcp6RelaySourceInterface(d, i["dhcp6_relay_source_interface"], pre_append)
	}
	pre_append = pre + ".0." + "dhcp6_relay_source_ip"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["dhcp6-relay-source-ip"], _ = expandSystemInterfaceIpv6Dhcp6RelaySourceIp(d, i["dhcp6_relay_source_ip"], pre_append)
	}
	pre_append = pre + ".0." + "dhcp6_relay_type"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["dhcp6-relay-type"], _ = expandSystemInterfaceIpv6Dhcp6RelayType(d, i["dhcp6_relay_type"], pre_append)
	}
	pre_append = pre + ".0." + "icmp6_send_redirect"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["icmp6-send-redirect"], _ = expandSystemInterfaceIpv6Icmp6SendRedirect(d, i["icmp6_send_redirect"], pre_append)
	}
	pre_append = pre + ".0." + "interface_identifier"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["interface-identifier"], _ = expandSystemInterfaceIpv6InterfaceIdentifier(d, i["interface_identifier"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_address"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-address"], _ = expandSystemInterfaceIpv6Ip6Address(d, i["ip6_address"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_adv_rio"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-adv-rio"], _ = expandSystemInterfaceIpv6Ip6AdvRio(d, i["ip6_adv_rio"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_allowaccess"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-allowaccess"], _ = expandSystemInterfaceIpv6Ip6Allowaccess(d, i["ip6_allowaccess"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_default_life"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-default-life"], _ = expandSystemInterfaceIpv6Ip6DefaultLife(d, i["ip6_default_life"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_delegated_prefix_iaid"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-delegated-prefix-iaid"], _ = expandSystemInterfaceIpv6Ip6DelegatedPrefixIaid(d, i["ip6_delegated_prefix_iaid"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_delegated_prefix_list"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		t, err := expandSystemInterfaceIpv6Ip6DelegatedPrefixList(d, i["ip6_delegated_prefix_list"], pre_append)
		if err != nil {
			return result, err
		} else if t != nil {
			result["ip6-delegated-prefix-list"] = t
		}
	}
	pre_append = pre + ".0." + "ip6_dns_server_override"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-dns-server-override"], _ = expandSystemInterfaceIpv6Ip6DnsServerOverride(d, i["ip6_dns_server_override"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_dnssl_list"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		t, err := expandSystemInterfaceIpv6Ip6DnsslList(d, i["ip6_dnssl_list"], pre_append)
		if err != nil {
			return result, err
		} else if t != nil {
			result["ip6-dnssl-list"] = t
		}
	}
	pre_append = pre + ".0." + "ip6_extra_addr"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		t, err := expandSystemInterfaceIpv6Ip6ExtraAddr(d, i["ip6_extra_addr"], pre_append)
		if err != nil {
			return result, err
		} else if t != nil {
			result["ip6-extra-addr"] = t
		}
	}
	pre_append = pre + ".0." + "ip6_hop_limit"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-hop-limit"], _ = expandSystemInterfaceIpv6Ip6HopLimit(d, i["ip6_hop_limit"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_link_mtu"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-link-mtu"], _ = expandSystemInterfaceIpv6Ip6LinkMtu(d, i["ip6_link_mtu"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_manage_flag"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-manage-flag"], _ = expandSystemInterfaceIpv6Ip6ManageFlag(d, i["ip6_manage_flag"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_max_interval"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-max-interval"], _ = expandSystemInterfaceIpv6Ip6MaxInterval(d, i["ip6_max_interval"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_min_interval"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-min-interval"], _ = expandSystemInterfaceIpv6Ip6MinInterval(d, i["ip6_min_interval"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_mode"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-mode"], _ = expandSystemInterfaceIpv6Ip6Mode(d, i["ip6_mode"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_other_flag"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-other-flag"], _ = expandSystemInterfaceIpv6Ip6OtherFlag(d, i["ip6_other_flag"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_prefix_list"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		t, err := expandSystemInterfaceIpv6Ip6PrefixList(d, i["ip6_prefix_list"], pre_append)
		if err != nil {
			return result, err
		} else if t != nil {
			result["ip6-prefix-list"] = t
		}
	}
	pre_append = pre + ".0." + "ip6_prefix_mode"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-prefix-mode"], _ = expandSystemInterfaceIpv6Ip6PrefixMode(d, i["ip6_prefix_mode"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_rdnss_list"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		t, err := expandSystemInterfaceIpv6Ip6RdnssList(d, i["ip6_rdnss_list"], pre_append)
		if err != nil {
			return result, err
		} else if t != nil {
			result["ip6-rdnss-list"] = t
		}
	}
	pre_append = pre + ".0." + "ip6_reachable_time"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-reachable-time"], _ = expandSystemInterfaceIpv6Ip6ReachableTime(d, i["ip6_reachable_time"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_retrans_time"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-retrans-time"], _ = expandSystemInterfaceIpv6Ip6RetransTime(d, i["ip6_retrans_time"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_route_list"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		t, err := expandSystemInterfaceIpv6Ip6RouteList(d, i["ip6_route_list"], pre_append)
		if err != nil {
			return result, err
		} else if t != nil {
			result["ip6-route-list"] = t
		}
	}
	pre_append = pre + ".0." + "ip6_route_pref"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-route-pref"], _ = expandSystemInterfaceIpv6Ip6RoutePref(d, i["ip6_route_pref"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_send_adv"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-send-adv"], _ = expandSystemInterfaceIpv6Ip6SendAdv(d, i["ip6_send_adv"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_subnet"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-subnet"], _ = expandSystemInterfaceIpv6Ip6Subnet(d, i["ip6_subnet"], pre_append)
	}
	pre_append = pre + ".0." + "ip6_upstream_interface"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip6-upstream-interface"], _ = expandSystemInterfaceIpv6Ip6UpstreamInterface(d, i["ip6_upstream_interface"], pre_append)
	}
	pre_append = pre + ".0." + "nd_cert"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["nd-cert"], _ = expandSystemInterfaceIpv6NdCert(d, i["nd_cert"], pre_append)
	}
	pre_append = pre + ".0." + "nd_cga_modifier"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["nd-cga-modifier"], _ = expandSystemInterfaceIpv6NdCgaModifier(d, i["nd_cga_modifier"], pre_append)
	}
	pre_append = pre + ".0." + "nd_mode"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["nd-mode"], _ = expandSystemInterfaceIpv6NdMode(d, i["nd_mode"], pre_append)
	}
	pre_append = pre + ".0." + "nd_security_level"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["nd-security-level"], _ = expandSystemInterfaceIpv6NdSecurityLevel(d, i["nd_security_level"], pre_append)
	}
	pre_append = pre + ".0." + "nd_timestamp_delta"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["nd-timestamp-delta"], _ = expandSystemInterfaceIpv6NdTimestampDelta(d, i["nd_timestamp_delta"], pre_append)
	}
	pre_append = pre + ".0." + "nd_timestamp_fuzz"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["nd-timestamp-fuzz"], _ = expandSystemInterfaceIpv6NdTimestampFuzz(d, i["nd_timestamp_fuzz"], pre_append)
	}
	pre_append = pre + ".0." + "ra_send_mtu"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ra-send-mtu"], _ = expandSystemInterfaceIpv6RaSendMtu(d, i["ra_send_mtu"], pre_append)
	}
	pre_append = pre + ".0." + "unique_autoconf_addr"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["unique-autoconf-addr"], _ = expandSystemInterfaceIpv6UniqueAutoconfAddr(d, i["unique_autoconf_addr"], pre_append)
	}
	pre_append = pre + ".0." + "vrip6_link_local"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["vrip6_link_local"], _ = expandSystemInterfaceIpv6Vrip6LinkLocal(d, i["vrip6_link_local"], pre_append)
	}
	pre_append = pre + ".0." + "vrrp_virtual_mac6"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["vrrp-virtual-mac6"], _ = expandSystemInterfaceIpv6VrrpVirtualMac6(d, i["vrrp_virtual_mac6"], pre_append)
	}
	pre_append = pre + ".0." + "vrrp6"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		t, err := expandSystemInterfaceIpv6Vrrp6(d, i["vrrp6"], pre_append)
		if err != nil {
			return result, err
		} else if t != nil {
			result["vrrp6"] = t
		}
	}

	return result, nil
}

func expandSystemInterfaceIpv6Autoconf(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6CliConn6Status(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6ClientOptions(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "code"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["code"], _ = expandSystemInterfaceIpv6ClientOptionsCode(d, i["code"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "id"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["id"], _ = expandSystemInterfaceIpv6ClientOptionsId(d, i["id"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "ip6"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["ip6"], _ = expandSystemInterfaceIpv6ClientOptionsIp6(d, i["ip6"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "type"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["type"], _ = expandSystemInterfaceIpv6ClientOptionsType(d, i["type"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "value"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["value"], _ = expandSystemInterfaceIpv6ClientOptionsValue(d, i["value"], pre_append)
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceIpv6ClientOptionsCode(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6ClientOptionsId(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6ClientOptionsIp6(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6ClientOptionsType(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6ClientOptionsValue(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Dhcp6ClientOptions(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceIpv6Dhcp6IapdList(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "iaid"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["iaid"], _ = expandSystemInterfaceIpv6Dhcp6IapdListIaid(d, i["iaid"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "prefix_hint"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["prefix-hint"], _ = expandSystemInterfaceIpv6Dhcp6IapdListPrefixHint(d, i["prefix_hint"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "prefix_hint_plt"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["prefix-hint-plt"], _ = expandSystemInterfaceIpv6Dhcp6IapdListPrefixHintPlt(d, i["prefix_hint_plt"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "prefix_hint_vlt"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["prefix-hint-vlt"], _ = expandSystemInterfaceIpv6Dhcp6IapdListPrefixHintVlt(d, i["prefix_hint_vlt"], pre_append)
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceIpv6Dhcp6IapdListIaid(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Dhcp6IapdListPrefixHint(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Dhcp6IapdListPrefixHintPlt(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Dhcp6IapdListPrefixHintVlt(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Dhcp6InformationRequest(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Dhcp6PrefixDelegation(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Dhcp6PrefixHint(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Dhcp6PrefixHintPlt(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Dhcp6PrefixHintVlt(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Dhcp6RelayInterfaceId(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Dhcp6RelayIp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceIpv6Dhcp6RelayService(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Dhcp6RelaySourceInterface(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Dhcp6RelaySourceIp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Dhcp6RelayType(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Icmp6SendRedirect(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6InterfaceIdentifier(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6Address(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6AdvRio(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6Allowaccess(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceIpv6Ip6DefaultLife(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6DelegatedPrefixIaid(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6DelegatedPrefixList(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "autonomous_flag"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["autonomous-flag"], _ = expandSystemInterfaceIpv6Ip6DelegatedPrefixListAutonomousFlag(d, i["autonomous_flag"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "delegated_prefix_iaid"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["delegated-prefix-iaid"], _ = expandSystemInterfaceIpv6Ip6DelegatedPrefixListDelegatedPrefixIaid(d, i["delegated_prefix_iaid"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "onlink_flag"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["onlink-flag"], _ = expandSystemInterfaceIpv6Ip6DelegatedPrefixListOnlinkFlag(d, i["onlink_flag"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "prefix_id"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["prefix-id"], _ = expandSystemInterfaceIpv6Ip6DelegatedPrefixListPrefixId(d, i["prefix_id"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "rdnss"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["rdnss"], _ = expandSystemInterfaceIpv6Ip6DelegatedPrefixListRdnss(d, i["rdnss"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "rdnss_service"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["rdnss-service"], _ = expandSystemInterfaceIpv6Ip6DelegatedPrefixListRdnssService(d, i["rdnss_service"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "subnet"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["subnet"], _ = expandSystemInterfaceIpv6Ip6DelegatedPrefixListSubnet(d, i["subnet"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "upstream_interface"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["upstream-interface"], _ = expandSystemInterfaceIpv6Ip6DelegatedPrefixListUpstreamInterface(d, i["upstream_interface"], pre_append)
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceIpv6Ip6DelegatedPrefixListAutonomousFlag(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6DelegatedPrefixListDelegatedPrefixIaid(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6DelegatedPrefixListOnlinkFlag(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6DelegatedPrefixListPrefixId(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6DelegatedPrefixListRdnss(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceIpv6Ip6DelegatedPrefixListRdnssService(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6DelegatedPrefixListSubnet(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6DelegatedPrefixListUpstreamInterface(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceIpv6Ip6DnsServerOverride(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6DnsslList(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "dnssl_life_time"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["dnssl-life-time"], _ = expandSystemInterfaceIpv6Ip6DnsslListDnsslLifeTime(d, i["dnssl_life_time"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "domain"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["domain"], _ = expandSystemInterfaceIpv6Ip6DnsslListDomain(d, i["domain"], pre_append)
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceIpv6Ip6DnsslListDnsslLifeTime(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6DnsslListDomain(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6ExtraAddr(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "prefix"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["prefix"], _ = expandSystemInterfaceIpv6Ip6ExtraAddrPrefix(d, i["prefix"], pre_append)
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceIpv6Ip6ExtraAddrPrefix(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6HopLimit(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6LinkMtu(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6ManageFlag(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6MaxInterval(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6MinInterval(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6Mode(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6OtherFlag(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6PrefixList(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "autonomous_flag"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["autonomous-flag"], _ = expandSystemInterfaceIpv6Ip6PrefixListAutonomousFlag(d, i["autonomous_flag"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "dnssl"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["dnssl"], _ = expandSystemInterfaceIpv6Ip6PrefixListDnssl(d, i["dnssl"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "onlink_flag"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["onlink-flag"], _ = expandSystemInterfaceIpv6Ip6PrefixListOnlinkFlag(d, i["onlink_flag"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "preferred_life_time"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["preferred-life-time"], _ = expandSystemInterfaceIpv6Ip6PrefixListPreferredLifeTime(d, i["preferred_life_time"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "prefix"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["prefix"], _ = expandSystemInterfaceIpv6Ip6PrefixListPrefix(d, i["prefix"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "rdnss"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["rdnss"], _ = expandSystemInterfaceIpv6Ip6PrefixListRdnss(d, i["rdnss"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "valid_life_time"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["valid-life-time"], _ = expandSystemInterfaceIpv6Ip6PrefixListValidLifeTime(d, i["valid_life_time"], pre_append)
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceIpv6Ip6PrefixListAutonomousFlag(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6PrefixListDnssl(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceIpv6Ip6PrefixListOnlinkFlag(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6PrefixListPreferredLifeTime(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6PrefixListPrefix(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6PrefixListRdnss(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceIpv6Ip6PrefixListValidLifeTime(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6PrefixMode(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6RdnssList(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "rdnss"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["rdnss"], _ = expandSystemInterfaceIpv6Ip6RdnssListRdnss(d, i["rdnss"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "rdnss_life_time"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["rdnss-life-time"], _ = expandSystemInterfaceIpv6Ip6RdnssListRdnssLifeTime(d, i["rdnss_life_time"], pre_append)
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceIpv6Ip6RdnssListRdnss(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6RdnssListRdnssLifeTime(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6ReachableTime(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6RetransTime(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6RouteList(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "route"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["route"], _ = expandSystemInterfaceIpv6Ip6RouteListRoute(d, i["route"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "route_life_time"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["route-life-time"], _ = expandSystemInterfaceIpv6Ip6RouteListRouteLifeTime(d, i["route_life_time"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "route_pref"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["route-pref"], _ = expandSystemInterfaceIpv6Ip6RouteListRoutePref(d, i["route_pref"], pre_append)
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceIpv6Ip6RouteListRoute(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6RouteListRouteLifeTime(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6RouteListRoutePref(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6RoutePref(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6SendAdv(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6Subnet(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Ip6UpstreamInterface(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceIpv6NdCert(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceIpv6NdCgaModifier(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6NdMode(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6NdSecurityLevel(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6NdTimestampDelta(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6NdTimestampFuzz(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6RaSendMtu(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6UniqueAutoconfAddr(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrip6LinkLocal(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6VrrpVirtualMac6(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "accept_mode"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["accept-mode"], _ = expandSystemInterfaceIpv6Vrrp6AcceptMode(d, i["accept_mode"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "adv_interval"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["adv-interval"], _ = expandSystemInterfaceIpv6Vrrp6AdvInterval(d, i["adv_interval"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "ignore_default_route"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["ignore-default-route"], _ = expandSystemInterfaceIpv6Vrrp6IgnoreDefaultRoute(d, i["ignore_default_route"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "preempt"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["preempt"], _ = expandSystemInterfaceIpv6Vrrp6Preempt(d, i["preempt"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "priority"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["priority"], _ = expandSystemInterfaceIpv6Vrrp6Priority(d, i["priority"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "start_time"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["start-time"], _ = expandSystemInterfaceIpv6Vrrp6StartTime(d, i["start_time"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "status"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["status"], _ = expandSystemInterfaceIpv6Vrrp6Status(d, i["status"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrdst_priority"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["vrdst-priority"], _ = expandSystemInterfaceIpv6Vrrp6VrdstPriority(d, i["vrdst_priority"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrdst6"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["vrdst6"], _ = expandSystemInterfaceIpv6Vrrp6Vrdst6(d, i["vrdst6"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrgrp"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["vrgrp"], _ = expandSystemInterfaceIpv6Vrrp6Vrgrp(d, i["vrgrp"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrid"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["vrid"], _ = expandSystemInterfaceIpv6Vrrp6Vrid(d, i["vrid"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrip6"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["vrip6"], _ = expandSystemInterfaceIpv6Vrrp6Vrip6(d, i["vrip6"], pre_append)
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceIpv6Vrrp6AcceptMode(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6AdvInterval(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6IgnoreDefaultRoute(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6Preempt(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6Priority(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6StartTime(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6Status(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6VrdstPriority(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6Vrdst6(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceIpv6Vrrp6Vrgrp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6Vrid(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceIpv6Vrrp6Vrip6(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceL2Forward(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceL2TpClient(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceL2TpClientSettings(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}

	i := l[0].(map[string]interface{})
	result := make(map[string]interface{})

	pre_append := "" // complex
	pre_append = pre + ".0." + "auth_type"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["auth-type"], _ = expandSystemInterfaceL2TpClientSettingsAuthType(d, i["auth_type"], pre_append)
	}
	pre_append = pre + ".0." + "defaultgw"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["defaultgw"], _ = expandSystemInterfaceL2TpClientSettingsDefaultgw(d, i["defaultgw"], pre_append)
	}
	pre_append = pre + ".0." + "distance"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["distance"], _ = expandSystemInterfaceL2TpClientSettingsDistance(d, i["distance"], pre_append)
	}
	pre_append = pre + ".0." + "hello_interval"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["hello-interval"], _ = expandSystemInterfaceL2TpClientSettingsHelloInterval(d, i["hello_interval"], pre_append)
	}
	pre_append = pre + ".0." + "ip"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["ip"], _ = expandSystemInterfaceL2TpClientSettingsIp(d, i["ip"], pre_append)
	}
	pre_append = pre + ".0." + "mtu"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["mtu"], _ = expandSystemInterfaceL2TpClientSettingsMtu(d, i["mtu"], pre_append)
	}
	pre_append = pre + ".0." + "password"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["password"], _ = expandSystemInterfaceL2TpClientSettingsPassword(d, i["password"], pre_append)
	}
	pre_append = pre + ".0." + "peer_host"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["peer-host"], _ = expandSystemInterfaceL2TpClientSettingsPeerHost(d, i["peer_host"], pre_append)
	}
	pre_append = pre + ".0." + "peer_mask"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["peer-mask"], _ = expandSystemInterfaceL2TpClientSettingsPeerMask(d, i["peer_mask"], pre_append)
	}
	pre_append = pre + ".0." + "peer_port"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["peer-port"], _ = expandSystemInterfaceL2TpClientSettingsPeerPort(d, i["peer_port"], pre_append)
	}
	pre_append = pre + ".0." + "priority"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["priority"], _ = expandSystemInterfaceL2TpClientSettingsPriority(d, i["priority"], pre_append)
	}
	pre_append = pre + ".0." + "user"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["user"], _ = expandSystemInterfaceL2TpClientSettingsUser(d, i["user"], pre_append)
	}

	return result, nil
}

func expandSystemInterfaceL2TpClientSettingsAuthType(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceL2TpClientSettingsDefaultgw(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceL2TpClientSettingsDistance(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceL2TpClientSettingsHelloInterval(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceL2TpClientSettingsIp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.([]interface{})), nil
}

func expandSystemInterfaceL2TpClientSettingsMtu(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceL2TpClientSettingsPassword(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceL2TpClientSettingsPeerHost(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceL2TpClientSettingsPeerMask(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceL2TpClientSettingsPeerPort(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceL2TpClientSettingsPriority(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceL2TpClientSettingsUser(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceLacpHaSecondary(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceLacpHaSlave(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceLacpMode(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceLacpSpeed(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceLcpEchoInterval(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceLcpMaxEchoFails(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceLinkUpDelay(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceLldpNetworkPolicy(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceLldpReception(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceLldpTransmission(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMacaddr(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceManagedSubnetworkSize(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceManagementIp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.([]interface{})), nil
}

func expandSystemInterfaceMaxEgressBurstRate(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMaxEgressRate(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMeasuredDownstreamBandwidth(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMeasuredUpstreamBandwidth(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMediatype(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMember(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceMinLinks(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMinLinksDown(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMirroringDirection(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMirroringFilter(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}

	i := l[0].(map[string]interface{})
	result := make(map[string]interface{})

	pre_append := "" // complex
	pre_append = pre + ".0." + "dbg_dump"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["dbg-dump"], _ = expandSystemInterfaceMirroringFilterDbgDump(d, i["dbg_dump"], pre_append)
	}
	pre_append = pre + ".0." + "filter_dport"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["filter-dport"], _ = expandSystemInterfaceMirroringFilterFilterDport(d, i["filter_dport"], pre_append)
	}
	pre_append = pre + ".0." + "filter_dstip"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["filter-dstip"], _ = expandSystemInterfaceMirroringFilterFilterDstip(d, i["filter_dstip"], pre_append)
	}
	pre_append = pre + ".0." + "filter_protocol"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["filter-protocol"], _ = expandSystemInterfaceMirroringFilterFilterProtocol(d, i["filter_protocol"], pre_append)
	}
	pre_append = pre + ".0." + "filter_sport"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["filter-sport"], _ = expandSystemInterfaceMirroringFilterFilterSport(d, i["filter_sport"], pre_append)
	}
	pre_append = pre + ".0." + "filter_srcip"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["filter-srcip"], _ = expandSystemInterfaceMirroringFilterFilterSrcip(d, i["filter_srcip"], pre_append)
	}

	return result, nil
}

func expandSystemInterfaceMirroringFilterDbgDump(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMirroringFilterFilterDport(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMirroringFilterFilterDstip(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.([]interface{})), nil
}

func expandSystemInterfaceMirroringFilterFilterProtocol(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMirroringFilterFilterSport(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMirroringFilterFilterSrcip(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.([]interface{})), nil
}

func expandSystemInterfaceMirroringPort(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceMode(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMonitorBandwidth(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMtu(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMtuOverride(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceMuxType(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceName(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceNdiscforward(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceNetbiosForward(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceNetflowSampleRate(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceNetflowSampler(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceNetflowSamplerId(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceNpQosProfile(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceOutbandwidth(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePadtRetryTimeout(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePassword(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfacePhyMode(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePhySetting(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}

	i := l[0].(map[string]interface{})
	result := make(map[string]interface{})

	pre_append := "" // complex
	pre_append = pre + ".0." + "signal_ok_threshold_value"
	if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
		result["signal-ok-threshold-value"], _ = expandSystemInterfacePhySettingSignalOkThresholdValue(d, i["signal_ok_threshold_value"], pre_append)
	}

	return result, nil
}

func expandSystemInterfacePhySettingSignalOkThresholdValue(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePoe(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePollingInterval(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePortMirroring(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePppoeEgressCos(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePppoeUnnumberedNegotiate(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePptpAuthType(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePptpClient(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePptpPassword(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfacePptpServerIp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePptpTimeout(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePptpUser(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePreserveSessionRoute(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePriority(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePriorityOverride(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceProxyCaptivePortal(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePvcAtmQos(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePvcChan(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePvcCrc(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePvcPcr(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePvcScr(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePvcVlanId(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePvcVlanRxId(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePvcVlanRxOp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePvcVlanTxId(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfacePvcVlanTxOp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceReachableTime(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceRedundantInterface(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceRemoteIp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.([]interface{})), nil
}

func expandSystemInterfaceReplacemsgOverrideGroup(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceRetransmission(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceRingRx(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceRingTx(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceRole(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSampleDirection(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSampleRate(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecondaryIp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecondaryip(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "allowaccess"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["allowaccess"], _ = expandSystemInterfaceSecondaryipAllowaccess(d, i["allowaccess"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "id"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["id"], _ = expandSystemInterfaceSecondaryipId(d, i["id"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "ip"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["ip"], _ = expandSystemInterfaceSecondaryipIp(d, i["ip"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "secip_relay_ip"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["secip-relay-ip"], _ = expandSystemInterfaceSecondaryipSecipRelayIp(d, i["secip_relay_ip"], pre_append)
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceSecondaryipAllowaccess(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceSecondaryipId(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecondaryipIp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.([]interface{})), nil
}

func expandSystemInterfaceSecondaryipSecipRelayIp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecurity8021XDynamicVlanId(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecurity8021XMaster(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecurity8021XMemberMode(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecurity8021XMode(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecurityExemptList(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceSecurityExternalLogout(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecurityExternalWeb(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecurityGroups(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceSecurityIpAuthBypass(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecurityMacAuthBypass(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecurityMode(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSecurityRedirectUrl(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSelectProfile30A35B(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceServiceName(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSflowSampler(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSfpDsl(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSfpDslAdslFallback(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSfpDslAutodetect(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSfpDslMac(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSnmpIndex(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSpeed(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSpilloverThreshold(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSrcCheck(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceStatus(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceStp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceStpHaSlave(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceStpEdge(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceStpHaSecondary(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceStpforward(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceStpforwardMode(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSubst(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSubstituteDstMac(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwAlgorithm(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwcFirstCreate(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwcVlan(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitch(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerAccessVlan(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerArpInspection(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerDhcpSnooping(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerDhcpSnoopingOption82(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerDhcpSnoopingVerifyMac(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerDynamic(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceSwitchControllerFeature(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerIgmpSnooping(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerIgmpSnoopingFastLeave(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerIgmpSnoopingProxy(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerIotScanning(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerLearningLimit(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerMgmtVlan(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerNac(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceSwitchControllerNetflowCollect(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerOffload(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerOffloadGw(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerOffloadIp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerRspanMode(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerSourceIp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSwitchControllerTrafficPolicy(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceSystemId(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceSystemIdType(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceTagging(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "category"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["category"], _ = expandSystemInterfaceTaggingCategory(d, i["category"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "name"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["name"], _ = expandSystemInterfaceTaggingName(d, i["name"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "tags"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["tags"], _ = expandSystemInterfaceTaggingTags(d, i["tags"], pre_append)
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceTaggingCategory(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceTaggingName(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceTaggingTags(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceTcMode(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceTcpMss(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceTrunk(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceTrustIp1(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.([]interface{})), nil
}

func expandSystemInterfaceTrustIp2(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.([]interface{})), nil
}

func expandSystemInterfaceTrustIp3(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.([]interface{})), nil
}

func expandSystemInterfaceTrustIp61(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceTrustIp62(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceTrustIp63(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceType(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceUsername(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVci(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVdom(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceVectoring(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVindex(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVirtualMac(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVlanId(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVlanOpMode(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVlanProtocol(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVlanforward(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVlanid(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVpi(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrf(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "accept_mode"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["accept-mode"], _ = expandSystemInterfaceVrrpAcceptMode(d, i["accept_mode"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "adv_interval"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["adv-interval"], _ = expandSystemInterfaceVrrpAdvInterval(d, i["adv_interval"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "ignore_default_route"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["ignore-default-route"], _ = expandSystemInterfaceVrrpIgnoreDefaultRoute(d, i["ignore_default_route"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "preempt"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["preempt"], _ = expandSystemInterfaceVrrpPreempt(d, i["preempt"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "priority"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["priority"], _ = expandSystemInterfaceVrrpPriority(d, i["priority"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "proxy_arp"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			t, err := expandSystemInterfaceVrrpProxyArp(d, i["proxy_arp"], pre_append)
			if err != nil {
				return result, err
			} else if t != nil {
				tmp["proxy-arp"] = t
			}
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "start_time"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["start-time"], _ = expandSystemInterfaceVrrpStartTime(d, i["start_time"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "status"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["status"], _ = expandSystemInterfaceVrrpStatus(d, i["status"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "version"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["version"], _ = expandSystemInterfaceVrrpVersion(d, i["version"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrdst"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["vrdst"], _ = expandSystemInterfaceVrrpVrdst(d, i["vrdst"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrdst_priority"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["vrdst-priority"], _ = expandSystemInterfaceVrrpVrdstPriority(d, i["vrdst_priority"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrgrp"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["vrgrp"], _ = expandSystemInterfaceVrrpVrgrp(d, i["vrgrp"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrid"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["vrid"], _ = expandSystemInterfaceVrrpVrid(d, i["vrid"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "vrip"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["vrip"], _ = expandSystemInterfaceVrrpVrip(d, i["vrip"], pre_append)
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceVrrpAcceptMode(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpAdvInterval(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpIgnoreDefaultRoute(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpPreempt(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpPriority(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpProxyArp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "id"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["id"], _ = expandSystemInterfaceVrrpProxyArpId(d, i["id"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "ip"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["ip"], _ = expandSystemInterfaceVrrpProxyArpIp(d, i["ip"], pre_append)
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceVrrpProxyArpId(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpProxyArpIp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpStartTime(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpStatus(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpVersion(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpVrdst(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceVrrpVrdstPriority(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpVrgrp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpVrid(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpVrip(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceVrrpVirtualMac(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWccp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWeight(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifi5GThreshold(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiAcl(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiApBand(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiAuth(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiAutoConnect(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiAutoSave(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiBroadcastSsid(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiDnsServer1(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiDnsServer2(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiEncrypt(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiFragmentThreshold(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiGateway(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiKey(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceWifiKeyindex(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiMacFilter(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiNetworks(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	l := v.([]interface{})
	result := make([]map[string]interface{}, 0, len(l))

	if len(l) == 0 || l[0] == nil {
		return result, nil
	}

	con := 0
	for _, r := range l {
		tmp := make(map[string]interface{})
		i := r.(map[string]interface{})
		pre_append := "" // table

		pre_append = pre + "." + strconv.Itoa(con) + "." + "id"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["id"], _ = expandSystemInterfaceWifiNetworksId(d, i["id"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "obsolete_security_options"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["obsolete-security-options"], _ = expandSystemInterfaceWifiNetworksObsoleteSecurityOptions(d, i["obsolete_security_options"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_ca_certificate"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["wifi-ca-certificate"], _ = expandSystemInterfaceWifiNetworksWifiCaCertificate(d, i["wifi_ca_certificate"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_client_certificate"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["wifi-client-certificate"], _ = expandSystemInterfaceWifiNetworksWifiClientCertificate(d, i["wifi_client_certificate"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_eap_type"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["wifi-eap-type"], _ = expandSystemInterfaceWifiNetworksWifiEapType(d, i["wifi_eap_type"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_encrypt"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["wifi-encrypt"], _ = expandSystemInterfaceWifiNetworksWifiEncrypt(d, i["wifi_encrypt"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_key"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["wifi-key"], _ = expandSystemInterfaceWifiNetworksWifiKey(d, i["wifi_key"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_keyindex"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["wifi-keyindex"], _ = expandSystemInterfaceWifiNetworksWifiKeyindex(d, i["wifi_keyindex"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_passphrase"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["wifi-passphrase"], _ = expandSystemInterfaceWifiNetworksWifiPassphrase(d, i["wifi_passphrase"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_private_key"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["wifi-private-key"], _ = expandSystemInterfaceWifiNetworksWifiPrivateKey(d, i["wifi_private_key"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_private_key_password"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["wifi-private-key-password"], _ = expandSystemInterfaceWifiNetworksWifiPrivateKeyPassword(d, i["wifi_private_key_password"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_security"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["wifi-security"], _ = expandSystemInterfaceWifiNetworksWifiSecurity(d, i["wifi_security"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_ssid"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["wifi-ssid"], _ = expandSystemInterfaceWifiNetworksWifiSsid(d, i["wifi_ssid"], pre_append)
		}

		pre_append = pre + "." + strconv.Itoa(con) + "." + "wifi_username"
		if _, ok := d.GetOk(pre_append); ok || d.HasChange(pre_append) {
			tmp["wifi-username"], _ = expandSystemInterfaceWifiNetworksWifiUsername(d, i["wifi_username"], pre_append)
		}

		if len(tmp) > 0 {
			result = append(result, tmp)
		}

		con += 1
	}

	return result, nil
}

func expandSystemInterfaceWifiNetworksId(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiNetworksObsoleteSecurityOptions(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiNetworksWifiCaCertificate(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceWifiNetworksWifiClientCertificate(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceWifiNetworksWifiEapType(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiNetworksWifiEncrypt(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiNetworksWifiKey(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceWifiNetworksWifiKeyindex(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiNetworksWifiPassphrase(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceWifiNetworksWifiPrivateKey(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiNetworksWifiPrivateKeyPassword(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceWifiNetworksWifiSecurity(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiNetworksWifiSsid(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiNetworksWifiUsername(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiPassphrase(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceWifiRadiusServer(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return expandStringList(v.(*schema.Set).List()), nil
}

func expandSystemInterfaceWifiRtsThreshold(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiSecurity(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiSsid(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWifiUsergroup(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func expandSystemInterfaceWinsIp(d *schema.ResourceData, v interface{}, pre string) (interface{}, error) {
	return v, nil
}

func getObjectSystemInterface(d *schema.ResourceData) (*map[string]interface{}, error) {
	obj := make(map[string]interface{})

	if v, ok := d.GetOk("ac_name"); ok || d.HasChange("ac_name") {
		t, err := expandSystemInterfaceAcName(d, v, "ac_name")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ac-name"] = t
		}
	}

	if v, ok := d.GetOk("aggregate"); ok || d.HasChange("aggregate") {
		t, err := expandSystemInterfaceAggregate(d, v, "aggregate")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["aggregate"] = t
		}
	}

	if v, ok := d.GetOk("aggregate_type"); ok || d.HasChange("aggregate_type") {
		t, err := expandSystemInterfaceAggregateType(d, v, "aggregate_type")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["aggregate-type"] = t
		}
	}

	if v, ok := d.GetOk("algorithm"); ok || d.HasChange("algorithm") {
		t, err := expandSystemInterfaceAlgorithm(d, v, "algorithm")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["algorithm"] = t
		}
	}

	if v, ok := d.GetOk("alias"); ok || d.HasChange("alias") {
		t, err := expandSystemInterfaceAlias(d, v, "alias")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["alias"] = t
		}
	}

	if v, ok := d.GetOk("allowaccess"); ok || d.HasChange("allowaccess") {
		t, err := expandSystemInterfaceAllowaccess(d, v, "allowaccess")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["allowaccess"] = t
		}
	}

	if v, ok := d.GetOk("annex"); ok || d.HasChange("annex") {
		t, err := expandSystemInterfaceAnnex(d, v, "annex")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["annex"] = t
		}
	}

	if v, ok := d.GetOk("ap_discover"); ok || d.HasChange("ap_discover") {
		t, err := expandSystemInterfaceApDiscover(d, v, "ap_discover")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ap-discover"] = t
		}
	}

	if v, ok := d.GetOk("arpforward"); ok || d.HasChange("arpforward") {
		t, err := expandSystemInterfaceArpforward(d, v, "arpforward")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["arpforward"] = t
		}
	}

	if v, ok := d.GetOk("atm_protocol"); ok || d.HasChange("atm_protocol") {
		t, err := expandSystemInterfaceAtmProtocol(d, v, "atm_protocol")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["atm-protocol"] = t
		}
	}

	if v, ok := d.GetOk("auth_cert"); ok || d.HasChange("auth_cert") {
		t, err := expandSystemInterfaceAuthCert(d, v, "auth_cert")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["auth-cert"] = t
		}
	}

	if v, ok := d.GetOk("auth_portal_addr"); ok || d.HasChange("auth_portal_addr") {
		t, err := expandSystemInterfaceAuthPortalAddr(d, v, "auth_portal_addr")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["auth-portal-addr"] = t
		}
	}

	if v, ok := d.GetOk("auth_type"); ok || d.HasChange("auth_type") {
		t, err := expandSystemInterfaceAuthType(d, v, "auth_type")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["auth-type"] = t
		}
	}

	if v, ok := d.GetOk("auto_auth_extension_device"); ok || d.HasChange("auto_auth_extension_device") {
		t, err := expandSystemInterfaceAutoAuthExtensionDevice(d, v, "auto_auth_extension_device")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["auto-auth-extension-device"] = t
		}
	}

	if v, ok := d.GetOk("bandwidth_measure_time"); ok || d.HasChange("bandwidth_measure_time") {
		t, err := expandSystemInterfaceBandwidthMeasureTime(d, v, "bandwidth_measure_time")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["bandwidth-measure-time"] = t
		}
	}

	if v, ok := d.GetOk("bfd"); ok || d.HasChange("bfd") {
		t, err := expandSystemInterfaceBfd(d, v, "bfd")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["bfd"] = t
		}
	}

	if v, ok := d.GetOk("bfd_desired_min_tx"); ok || d.HasChange("bfd_desired_min_tx") {
		t, err := expandSystemInterfaceBfdDesiredMinTx(d, v, "bfd_desired_min_tx")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["bfd-desired-min-tx"] = t
		}
	}

	if v, ok := d.GetOk("bfd_detect_mult"); ok || d.HasChange("bfd_detect_mult") {
		t, err := expandSystemInterfaceBfdDetectMult(d, v, "bfd_detect_mult")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["bfd-detect-mult"] = t
		}
	}

	if v, ok := d.GetOk("bfd_required_min_rx"); ok || d.HasChange("bfd_required_min_rx") {
		t, err := expandSystemInterfaceBfdRequiredMinRx(d, v, "bfd_required_min_rx")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["bfd-required-min-rx"] = t
		}
	}

	if v, ok := d.GetOk("broadcast_forticlient_discovery"); ok || d.HasChange("broadcast_forticlient_discovery") {
		t, err := expandSystemInterfaceBroadcastForticlientDiscovery(d, v, "broadcast_forticlient_discovery")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["broadcast-forticlient-discovery"] = t
		}
	}

	if v, ok := d.GetOk("broadcast_forward"); ok || d.HasChange("broadcast_forward") {
		t, err := expandSystemInterfaceBroadcastForward(d, v, "broadcast_forward")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["broadcast-forward"] = t
		}
	}

	if v, ok := d.GetOk("captive_portal"); ok || d.HasChange("captive_portal") {
		t, err := expandSystemInterfaceCaptivePortal(d, v, "captive_portal")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["captive-portal"] = t
		}
	}

	if v, ok := d.GetOk("cli_conn_status"); ok || d.HasChange("cli_conn_status") {
		t, err := expandSystemInterfaceCliConnStatus(d, v, "cli_conn_status")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["cli-conn-status"] = t
		}
	}

	if v, ok := d.GetOk("client_options"); ok || d.HasChange("client_options") {
		t, err := expandSystemInterfaceClientOptions(d, v, "client_options")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["client-options"] = t
		}
	}

	if v, ok := d.GetOk("color"); ok || d.HasChange("color") {
		t, err := expandSystemInterfaceColor(d, v, "color")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["color"] = t
		}
	}

	if v, ok := d.GetOk("dedicated_to"); ok || d.HasChange("dedicated_to") {
		t, err := expandSystemInterfaceDedicatedTo(d, v, "dedicated_to")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dedicated-to"] = t
		}
	}

	if v, ok := d.GetOk("default_purdue_level"); ok || d.HasChange("default_purdue_level") {
		t, err := expandSystemInterfaceDefaultPurdueLevel(d, v, "default_purdue_level")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["default-purdue-level"] = t
		}
	}

	if v, ok := d.GetOk("defaultgw"); ok || d.HasChange("defaultgw") {
		t, err := expandSystemInterfaceDefaultgw(d, v, "defaultgw")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["defaultgw"] = t
		}
	}

	if v, ok := d.GetOk("description"); ok || d.HasChange("description") {
		t, err := expandSystemInterfaceDescription(d, v, "description")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["description"] = t
		}
	}

	if v, ok := d.GetOk("detected_peer_mtu"); ok || d.HasChange("detected_peer_mtu") {
		t, err := expandSystemInterfaceDetectedPeerMtu(d, v, "detected_peer_mtu")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["detected-peer-mtu"] = t
		}
	}

	if v, ok := d.GetOk("device_identification"); ok || d.HasChange("device_identification") {
		t, err := expandSystemInterfaceDeviceIdentification(d, v, "device_identification")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["device-identification"] = t
		}
	}

	if v, ok := d.GetOk("device_user_identification"); ok || d.HasChange("device_user_identification") {
		t, err := expandSystemInterfaceDeviceUserIdentification(d, v, "device_user_identification")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["device-user-identification"] = t
		}
	}

	if v, ok := d.GetOk("devindex"); ok || d.HasChange("devindex") {
		t, err := expandSystemInterfaceDevindex(d, v, "devindex")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["devindex"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_broadcast_flag"); ok || d.HasChange("dhcp_broadcast_flag") {
		t, err := expandSystemInterfaceDhcpBroadcastFlag(d, v, "dhcp_broadcast_flag")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-broadcast-flag"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_classless_route_addition"); ok || d.HasChange("dhcp_classless_route_addition") {
		t, err := expandSystemInterfaceDhcpClasslessRouteAddition(d, v, "dhcp_classless_route_addition")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-classless-route-addition"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_client_identifier"); ok || d.HasChange("dhcp_client_identifier") {
		t, err := expandSystemInterfaceDhcpClientIdentifier(d, v, "dhcp_client_identifier")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-client-identifier"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_relay_agent_option"); ok || d.HasChange("dhcp_relay_agent_option") {
		t, err := expandSystemInterfaceDhcpRelayAgentOption(d, v, "dhcp_relay_agent_option")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-relay-agent-option"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_relay_allow_no_end_option"); ok || d.HasChange("dhcp_relay_allow_no_end_option") {
		t, err := expandSystemInterfaceDhcpRelayAllowNoEndOption(d, v, "dhcp_relay_allow_no_end_option")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-relay-allow-no-end-option"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_relay_circuit_id"); ok || d.HasChange("dhcp_relay_circuit_id") {
		t, err := expandSystemInterfaceDhcpRelayCircuitId(d, v, "dhcp_relay_circuit_id")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-relay-circuit-id"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_relay_interface"); ok || d.HasChange("dhcp_relay_interface") {
		t, err := expandSystemInterfaceDhcpRelayInterface(d, v, "dhcp_relay_interface")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-relay-interface"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_relay_interface_select_method"); ok || d.HasChange("dhcp_relay_interface_select_method") {
		t, err := expandSystemInterfaceDhcpRelayInterfaceSelectMethod(d, v, "dhcp_relay_interface_select_method")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-relay-interface-select-method"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_relay_ip"); ok || d.HasChange("dhcp_relay_ip") {
		t, err := expandSystemInterfaceDhcpRelayIp(d, v, "dhcp_relay_ip")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-relay-ip"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_relay_link_selection"); ok || d.HasChange("dhcp_relay_link_selection") {
		t, err := expandSystemInterfaceDhcpRelayLinkSelection(d, v, "dhcp_relay_link_selection")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-relay-link-selection"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_relay_request_all_server"); ok || d.HasChange("dhcp_relay_request_all_server") {
		t, err := expandSystemInterfaceDhcpRelayRequestAllServer(d, v, "dhcp_relay_request_all_server")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-relay-request-all-server"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_relay_service"); ok || d.HasChange("dhcp_relay_service") {
		t, err := expandSystemInterfaceDhcpRelayService(d, v, "dhcp_relay_service")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-relay-service"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_relay_source_ip"); ok || d.HasChange("dhcp_relay_source_ip") {
		t, err := expandSystemInterfaceDhcpRelaySourceIp(d, v, "dhcp_relay_source_ip")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-relay-source-ip"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_relay_type"); ok || d.HasChange("dhcp_relay_type") {
		t, err := expandSystemInterfaceDhcpRelayType(d, v, "dhcp_relay_type")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-relay-type"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_relay_vrf_select"); ok || d.HasChange("dhcp_relay_vrf_select") {
		t, err := expandSystemInterfaceDhcpRelayVrfSelect(d, v, "dhcp_relay_vrf_select")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-relay-vrf-select"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_renew_time"); ok || d.HasChange("dhcp_renew_time") {
		t, err := expandSystemInterfaceDhcpRenewTime(d, v, "dhcp_renew_time")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-renew-time"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_smart_relay"); ok || d.HasChange("dhcp_smart_relay") {
		t, err := expandSystemInterfaceDhcpSmartRelay(d, v, "dhcp_smart_relay")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-smart-relay"] = t
		}
	}

	if v, ok := d.GetOk("dhcp_snooping_server_list"); ok || d.HasChange("dhcp_snooping_server_list") {
		t, err := expandSystemInterfaceDhcpSnoopingServerList(d, v, "dhcp_snooping_server_list")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dhcp-snooping-server-list"] = t
		}
	}

	if v, ok := d.GetOk("disc_retry_timeout"); ok || d.HasChange("disc_retry_timeout") {
		t, err := expandSystemInterfaceDiscRetryTimeout(d, v, "disc_retry_timeout")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["disc-retry-timeout"] = t
		}
	}

	if v, ok := d.GetOk("disconnect_threshold"); ok || d.HasChange("disconnect_threshold") {
		t, err := expandSystemInterfaceDisconnectThreshold(d, v, "disconnect_threshold")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["disconnect-threshold"] = t
		}
	}

	if v, ok := d.GetOk("distance"); ok || d.HasChange("distance") {
		t, err := expandSystemInterfaceDistance(d, v, "distance")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["distance"] = t
		}
	}

	if v, ok := d.GetOk("dns_server_override"); ok || d.HasChange("dns_server_override") {
		t, err := expandSystemInterfaceDnsServerOverride(d, v, "dns_server_override")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dns-server-override"] = t
		}
	}

	if v, ok := d.GetOk("dns_server_protocol"); ok || d.HasChange("dns_server_protocol") {
		t, err := expandSystemInterfaceDnsServerProtocol(d, v, "dns_server_protocol")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["dns-server-protocol"] = t
		}
	}

	if v, ok := d.GetOk("drop_fragment"); ok || d.HasChange("drop_fragment") {
		t, err := expandSystemInterfaceDropFragment(d, v, "drop_fragment")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["drop-fragment"] = t
		}
	}

	if v, ok := d.GetOk("drop_overlapped_fragment"); ok || d.HasChange("drop_overlapped_fragment") {
		t, err := expandSystemInterfaceDropOverlappedFragment(d, v, "drop_overlapped_fragment")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["drop-overlapped-fragment"] = t
		}
	}

	if v, ok := d.GetOk("eap_ca_cert"); ok || d.HasChange("eap_ca_cert") {
		t, err := expandSystemInterfaceEapCaCert(d, v, "eap_ca_cert")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["eap-ca-cert"] = t
		}
	}

	if v, ok := d.GetOk("eap_identity"); ok || d.HasChange("eap_identity") {
		t, err := expandSystemInterfaceEapIdentity(d, v, "eap_identity")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["eap-identity"] = t
		}
	}

	if v, ok := d.GetOk("eap_method"); ok || d.HasChange("eap_method") {
		t, err := expandSystemInterfaceEapMethod(d, v, "eap_method")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["eap-method"] = t
		}
	}

	if v, ok := d.GetOk("eap_password"); ok || d.HasChange("eap_password") {
		t, err := expandSystemInterfaceEapPassword(d, v, "eap_password")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["eap-password"] = t
		}
	}

	if v, ok := d.GetOk("eap_supplicant"); ok || d.HasChange("eap_supplicant") {
		t, err := expandSystemInterfaceEapSupplicant(d, v, "eap_supplicant")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["eap-supplicant"] = t
		}
	}

	if v, ok := d.GetOk("eap_user_cert"); ok || d.HasChange("eap_user_cert") {
		t, err := expandSystemInterfaceEapUserCert(d, v, "eap_user_cert")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["eap-user-cert"] = t
		}
	}

	if v, ok := d.GetOk("egress_cos"); ok || d.HasChange("egress_cos") {
		t, err := expandSystemInterfaceEgressCos(d, v, "egress_cos")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["egress-cos"] = t
		}
	}

	if v, ok := d.GetOk("egress_queues"); ok || d.HasChange("egress_queues") {
		t, err := expandSystemInterfaceEgressQueues(d, v, "egress_queues")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["egress-queues"] = t
		}
	}

	if v, ok := d.GetOk("egress_shaping_profile"); ok || d.HasChange("egress_shaping_profile") {
		t, err := expandSystemInterfaceEgressShapingProfile(d, v, "egress_shaping_profile")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["egress-shaping-profile"] = t
		}
	}

	if v, ok := d.GetOk("eip"); ok || d.HasChange("eip") {
		t, err := expandSystemInterfaceEip(d, v, "eip")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["eip"] = t
		}
	}

	if v, ok := d.GetOk("estimated_downstream_bandwidth"); ok || d.HasChange("estimated_downstream_bandwidth") {
		t, err := expandSystemInterfaceEstimatedDownstreamBandwidth(d, v, "estimated_downstream_bandwidth")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["estimated-downstream-bandwidth"] = t
		}
	}

	if v, ok := d.GetOk("estimated_upstream_bandwidth"); ok || d.HasChange("estimated_upstream_bandwidth") {
		t, err := expandSystemInterfaceEstimatedUpstreamBandwidth(d, v, "estimated_upstream_bandwidth")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["estimated-upstream-bandwidth"] = t
		}
	}

	if v, ok := d.GetOk("exclude_signatures"); ok || d.HasChange("exclude_signatures") {
		t, err := expandSystemInterfaceExcludeSignatures(d, v, "exclude_signatures")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["exclude-signatures"] = t
		}
	}

	if v, ok := d.GetOk("explicit_ftp_proxy"); ok || d.HasChange("explicit_ftp_proxy") {
		t, err := expandSystemInterfaceExplicitFtpProxy(d, v, "explicit_ftp_proxy")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["explicit-ftp-proxy"] = t
		}
	}

	if v, ok := d.GetOk("explicit_web_proxy"); ok || d.HasChange("explicit_web_proxy") {
		t, err := expandSystemInterfaceExplicitWebProxy(d, v, "explicit_web_proxy")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["explicit-web-proxy"] = t
		}
	}

	if v, ok := d.GetOk("external"); ok || d.HasChange("external") {
		t, err := expandSystemInterfaceExternal(d, v, "external")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["external"] = t
		}
	}

	if v, ok := d.GetOk("fail_action_on_extender"); ok || d.HasChange("fail_action_on_extender") {
		t, err := expandSystemInterfaceFailActionOnExtender(d, v, "fail_action_on_extender")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["fail-action-on-extender"] = t
		}
	}

	if v, ok := d.GetOk("fail_alert_interfaces"); ok || d.HasChange("fail_alert_interfaces") {
		t, err := expandSystemInterfaceFailAlertInterfaces(d, v, "fail_alert_interfaces")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["fail-alert-interfaces"] = t
		}
	}

	if v, ok := d.GetOk("fail_alert_method"); ok || d.HasChange("fail_alert_method") {
		t, err := expandSystemInterfaceFailAlertMethod(d, v, "fail_alert_method")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["fail-alert-method"] = t
		}
	}

	if v, ok := d.GetOk("fail_detect"); ok || d.HasChange("fail_detect") {
		t, err := expandSystemInterfaceFailDetect(d, v, "fail_detect")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["fail-detect"] = t
		}
	}

	if v, ok := d.GetOk("fail_detect_option"); ok || d.HasChange("fail_detect_option") {
		t, err := expandSystemInterfaceFailDetectOption(d, v, "fail_detect_option")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["fail-detect-option"] = t
		}
	}

	if v, ok := d.GetOk("fortilink"); ok || d.HasChange("fortilink") {
		t, err := expandSystemInterfaceFortilink(d, v, "fortilink")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["fortilink"] = t
		}
	}

	if v, ok := d.GetOk("fortilink_backup_link"); ok || d.HasChange("fortilink_backup_link") {
		t, err := expandSystemInterfaceFortilinkBackupLink(d, v, "fortilink_backup_link")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["fortilink-backup-link"] = t
		}
	}

	if v, ok := d.GetOk("fortilink_neighbor_detect"); ok || d.HasChange("fortilink_neighbor_detect") {
		t, err := expandSystemInterfaceFortilinkNeighborDetect(d, v, "fortilink_neighbor_detect")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["fortilink-neighbor-detect"] = t
		}
	}

	if v, ok := d.GetOk("fortilink_split_interface"); ok || d.HasChange("fortilink_split_interface") {
		t, err := expandSystemInterfaceFortilinkSplitInterface(d, v, "fortilink_split_interface")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["fortilink-split-interface"] = t
		}
	}

	if v, ok := d.GetOk("fortilink_stacking"); ok || d.HasChange("fortilink_stacking") {
		t, err := expandSystemInterfaceFortilinkStacking(d, v, "fortilink_stacking")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["fortilink-stacking"] = t
		}
	}

	if v, ok := d.GetOk("forward_domain"); ok || d.HasChange("forward_domain") {
		t, err := expandSystemInterfaceForwardDomain(d, v, "forward_domain")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["forward-domain"] = t
		}
	}

	if v, ok := d.GetOk("forward_error_correction"); ok || d.HasChange("forward_error_correction") {
		t, err := expandSystemInterfaceForwardErrorCorrection(d, v, "forward_error_correction")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["forward-error-correction"] = t
		}
	}

	if v, ok := d.GetOk("gateway_address"); ok || d.HasChange("gateway_address") {
		t, err := expandSystemInterfaceGatewayAddress(d, v, "gateway_address")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["gateway-address"] = t
		}
	}

	if v, ok := d.GetOk("gi_gk"); ok || d.HasChange("gi_gk") {
		t, err := expandSystemInterfaceGiGk(d, v, "gi_gk")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["gi-gk"] = t
		}
	}

	if v, ok := d.GetOk("icmp_accept_redirect"); ok || d.HasChange("icmp_accept_redirect") {
		t, err := expandSystemInterfaceIcmpAcceptRedirect(d, v, "icmp_accept_redirect")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["icmp-accept-redirect"] = t
		}
	}

	if v, ok := d.GetOk("icmp_send_redirect"); ok || d.HasChange("icmp_send_redirect") {
		t, err := expandSystemInterfaceIcmpSendRedirect(d, v, "icmp_send_redirect")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["icmp-send-redirect"] = t
		}
	}

	if v, ok := d.GetOk("ident_accept"); ok || d.HasChange("ident_accept") {
		t, err := expandSystemInterfaceIdentAccept(d, v, "ident_accept")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ident-accept"] = t
		}
	}

	if v, ok := d.GetOk("idle_timeout"); ok || d.HasChange("idle_timeout") {
		t, err := expandSystemInterfaceIdleTimeout(d, v, "idle_timeout")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["idle-timeout"] = t
		}
	}

	if v, ok := d.GetOk("ike_saml_server"); ok || d.HasChange("ike_saml_server") {
		t, err := expandSystemInterfaceIkeSamlServer(d, v, "ike_saml_server")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ike-saml-server"] = t
		}
	}

	if v, ok := d.GetOk("inbandwidth"); ok || d.HasChange("inbandwidth") {
		t, err := expandSystemInterfaceInbandwidth(d, v, "inbandwidth")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["inbandwidth"] = t
		}
	}

	if v, ok := d.GetOk("ingress_cos"); ok || d.HasChange("ingress_cos") {
		t, err := expandSystemInterfaceIngressCos(d, v, "ingress_cos")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ingress-cos"] = t
		}
	}

	if v, ok := d.GetOk("ingress_shaping_profile"); ok || d.HasChange("ingress_shaping_profile") {
		t, err := expandSystemInterfaceIngressShapingProfile(d, v, "ingress_shaping_profile")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ingress-shaping-profile"] = t
		}
	}

	if v, ok := d.GetOk("ingress_spillover_threshold"); ok || d.HasChange("ingress_spillover_threshold") {
		t, err := expandSystemInterfaceIngressSpilloverThreshold(d, v, "ingress_spillover_threshold")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ingress-spillover-threshold"] = t
		}
	}

	if v, ok := d.GetOk("interconnect_profile"); ok || d.HasChange("interconnect_profile") {
		t, err := expandSystemInterfaceInterconnectProfile(d, v, "interconnect_profile")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["interconnect-profile"] = t
		}
	}

	if v, ok := d.GetOk("interface"); ok || d.HasChange("interface") {
		t, err := expandSystemInterfaceInterface(d, v, "interface")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["interface"] = t
		}
	}

	if v, ok := d.GetOk("internal"); ok || d.HasChange("internal") {
		t, err := expandSystemInterfaceInternal(d, v, "internal")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["internal"] = t
		}
	}

	if v, ok := d.GetOk("ip"); ok || d.HasChange("ip") {
		t, err := expandSystemInterfaceIp(d, v, "ip")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ip"] = t
		}
	}

	if v, ok := d.GetOk("ip_managed_by_fortiipam"); ok || d.HasChange("ip_managed_by_fortiipam") {
		t, err := expandSystemInterfaceIpManagedByFortiipam(d, v, "ip_managed_by_fortiipam")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ip-managed-by-fortiipam"] = t
		}
	}

	if v, ok := d.GetOk("ipmac"); ok || d.HasChange("ipmac") {
		t, err := expandSystemInterfaceIpmac(d, v, "ipmac")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ipmac"] = t
		}
	}

	if v, ok := d.GetOk("ips_sniffer_mode"); ok || d.HasChange("ips_sniffer_mode") {
		t, err := expandSystemInterfaceIpsSnifferMode(d, v, "ips_sniffer_mode")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ips-sniffer-mode"] = t
		}
	}

	if v, ok := d.GetOk("ipunnumbered"); ok || d.HasChange("ipunnumbered") {
		t, err := expandSystemInterfaceIpunnumbered(d, v, "ipunnumbered")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ipunnumbered"] = t
		}
	}

	if v, ok := d.GetOk("ipv6"); ok || d.HasChange("ipv6") {
		t, err := expandSystemInterfaceIpv6(d, v, "ipv6")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ipv6"] = t
		}
	}

	if v, ok := d.GetOk("l2forward"); ok || d.HasChange("l2forward") {
		t, err := expandSystemInterfaceL2Forward(d, v, "l2forward")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["l2forward"] = t
		}
	}

	if v, ok := d.GetOk("l2tp_client"); ok || d.HasChange("l2tp_client") {
		t, err := expandSystemInterfaceL2TpClient(d, v, "l2tp_client")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["l2tp-client"] = t
		}
	}

	if v, ok := d.GetOk("l2tp_client_settings"); ok || d.HasChange("l2tp_client_settings") {
		t, err := expandSystemInterfaceL2TpClientSettings(d, v, "l2tp_client_settings")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["l2tp-client-settings"] = t
		}
	}

	if v, ok := d.GetOk("lacp_ha_secondary"); ok || d.HasChange("lacp_ha_secondary") {
		t, err := expandSystemInterfaceLacpHaSecondary(d, v, "lacp_ha_secondary")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["lacp-ha-secondary"] = t
		}
	}

	if v, ok := d.GetOk("lacp_ha_slave"); ok || d.HasChange("lacp_ha_slave") {
		t, err := expandSystemInterfaceLacpHaSlave(d, v, "lacp_ha_slave")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["lacp-ha-slave"] = t
		}
	}

	if v, ok := d.GetOk("lacp_mode"); ok || d.HasChange("lacp_mode") {
		t, err := expandSystemInterfaceLacpMode(d, v, "lacp_mode")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["lacp-mode"] = t
		}
	}

	if v, ok := d.GetOk("lacp_speed"); ok || d.HasChange("lacp_speed") {
		t, err := expandSystemInterfaceLacpSpeed(d, v, "lacp_speed")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["lacp-speed"] = t
		}
	}

	if v, ok := d.GetOk("lcp_echo_interval"); ok || d.HasChange("lcp_echo_interval") {
		t, err := expandSystemInterfaceLcpEchoInterval(d, v, "lcp_echo_interval")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["lcp-echo-interval"] = t
		}
	}

	if v, ok := d.GetOk("lcp_max_echo_fails"); ok || d.HasChange("lcp_max_echo_fails") {
		t, err := expandSystemInterfaceLcpMaxEchoFails(d, v, "lcp_max_echo_fails")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["lcp-max-echo-fails"] = t
		}
	}

	if v, ok := d.GetOk("link_up_delay"); ok || d.HasChange("link_up_delay") {
		t, err := expandSystemInterfaceLinkUpDelay(d, v, "link_up_delay")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["link-up-delay"] = t
		}
	}

	if v, ok := d.GetOk("lldp_network_policy"); ok || d.HasChange("lldp_network_policy") {
		t, err := expandSystemInterfaceLldpNetworkPolicy(d, v, "lldp_network_policy")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["lldp-network-policy"] = t
		}
	}

	if v, ok := d.GetOk("lldp_reception"); ok || d.HasChange("lldp_reception") {
		t, err := expandSystemInterfaceLldpReception(d, v, "lldp_reception")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["lldp-reception"] = t
		}
	}

	if v, ok := d.GetOk("lldp_transmission"); ok || d.HasChange("lldp_transmission") {
		t, err := expandSystemInterfaceLldpTransmission(d, v, "lldp_transmission")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["lldp-transmission"] = t
		}
	}

	if v, ok := d.GetOk("macaddr"); ok || d.HasChange("macaddr") {
		t, err := expandSystemInterfaceMacaddr(d, v, "macaddr")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["macaddr"] = t
		}
	}

	if v, ok := d.GetOk("managed_subnetwork_size"); ok || d.HasChange("managed_subnetwork_size") {
		t, err := expandSystemInterfaceManagedSubnetworkSize(d, v, "managed_subnetwork_size")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["managed-subnetwork-size"] = t
		}
	}

	if v, ok := d.GetOk("management_ip"); ok || d.HasChange("management_ip") {
		t, err := expandSystemInterfaceManagementIp(d, v, "management_ip")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["management-ip"] = t
		}
	}

	if v, ok := d.GetOk("max_egress_burst_rate"); ok || d.HasChange("max_egress_burst_rate") {
		t, err := expandSystemInterfaceMaxEgressBurstRate(d, v, "max_egress_burst_rate")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["max-egress-burst-rate"] = t
		}
	}

	if v, ok := d.GetOk("max_egress_rate"); ok || d.HasChange("max_egress_rate") {
		t, err := expandSystemInterfaceMaxEgressRate(d, v, "max_egress_rate")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["max-egress-rate"] = t
		}
	}

	if v, ok := d.GetOk("measured_downstream_bandwidth"); ok || d.HasChange("measured_downstream_bandwidth") {
		t, err := expandSystemInterfaceMeasuredDownstreamBandwidth(d, v, "measured_downstream_bandwidth")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["measured-downstream-bandwidth"] = t
		}
	}

	if v, ok := d.GetOk("measured_upstream_bandwidth"); ok || d.HasChange("measured_upstream_bandwidth") {
		t, err := expandSystemInterfaceMeasuredUpstreamBandwidth(d, v, "measured_upstream_bandwidth")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["measured-upstream-bandwidth"] = t
		}
	}

	if v, ok := d.GetOk("mediatype"); ok || d.HasChange("mediatype") {
		t, err := expandSystemInterfaceMediatype(d, v, "mediatype")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["mediatype"] = t
		}
	}

	if v, ok := d.GetOk("member"); ok || d.HasChange("member") {
		t, err := expandSystemInterfaceMember(d, v, "member")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["member"] = t
		}
	}

	if v, ok := d.GetOk("min_links"); ok || d.HasChange("min_links") {
		t, err := expandSystemInterfaceMinLinks(d, v, "min_links")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["min-links"] = t
		}
	}

	if v, ok := d.GetOk("min_links_down"); ok || d.HasChange("min_links_down") {
		t, err := expandSystemInterfaceMinLinksDown(d, v, "min_links_down")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["min-links-down"] = t
		}
	}

	if v, ok := d.GetOk("mirroring_direction"); ok || d.HasChange("mirroring_direction") {
		t, err := expandSystemInterfaceMirroringDirection(d, v, "mirroring_direction")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["mirroring-direction"] = t
		}
	}

	if v, ok := d.GetOk("mirroring_filter"); ok || d.HasChange("mirroring_filter") {
		t, err := expandSystemInterfaceMirroringFilter(d, v, "mirroring_filter")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["mirroring-filter"] = t
		}
	}

	if v, ok := d.GetOk("mirroring_port"); ok || d.HasChange("mirroring_port") {
		t, err := expandSystemInterfaceMirroringPort(d, v, "mirroring_port")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["mirroring-port"] = t
		}
	}

	if v, ok := d.GetOk("mode"); ok || d.HasChange("mode") {
		t, err := expandSystemInterfaceMode(d, v, "mode")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["mode"] = t
		}
	}

	if v, ok := d.GetOk("monitor_bandwidth"); ok || d.HasChange("monitor_bandwidth") {
		t, err := expandSystemInterfaceMonitorBandwidth(d, v, "monitor_bandwidth")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["monitor-bandwidth"] = t
		}
	}

	if v, ok := d.GetOk("mtu"); ok || d.HasChange("mtu") {
		t, err := expandSystemInterfaceMtu(d, v, "mtu")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["mtu"] = t
		}
	}

	if v, ok := d.GetOk("mtu_override"); ok || d.HasChange("mtu_override") {
		t, err := expandSystemInterfaceMtuOverride(d, v, "mtu_override")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["mtu-override"] = t
		}
	}

	if v, ok := d.GetOk("mux_type"); ok || d.HasChange("mux_type") {
		t, err := expandSystemInterfaceMuxType(d, v, "mux_type")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["mux-type"] = t
		}
	}

	if v, ok := d.GetOk("name"); ok || d.HasChange("name") {
		t, err := expandSystemInterfaceName(d, v, "name")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["name"] = t
		}
	}

	if v, ok := d.GetOk("ndiscforward"); ok || d.HasChange("ndiscforward") {
		t, err := expandSystemInterfaceNdiscforward(d, v, "ndiscforward")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ndiscforward"] = t
		}
	}

	if v, ok := d.GetOk("netbios_forward"); ok || d.HasChange("netbios_forward") {
		t, err := expandSystemInterfaceNetbiosForward(d, v, "netbios_forward")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["netbios-forward"] = t
		}
	}

	if v, ok := d.GetOk("netflow_sample_rate"); ok || d.HasChange("netflow_sample_rate") {
		t, err := expandSystemInterfaceNetflowSampleRate(d, v, "netflow_sample_rate")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["netflow-sample-rate"] = t
		}
	}

	if v, ok := d.GetOk("netflow_sampler"); ok || d.HasChange("netflow_sampler") {
		t, err := expandSystemInterfaceNetflowSampler(d, v, "netflow_sampler")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["netflow-sampler"] = t
		}
	}

	if v, ok := d.GetOk("netflow_sampler_id"); ok || d.HasChange("netflow_sampler_id") {
		t, err := expandSystemInterfaceNetflowSamplerId(d, v, "netflow_sampler_id")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["netflow-sampler-id"] = t
		}
	}

	if v, ok := d.GetOk("np_qos_profile"); ok || d.HasChange("np_qos_profile") {
		t, err := expandSystemInterfaceNpQosProfile(d, v, "np_qos_profile")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["np-qos-profile"] = t
		}
	}

	if v, ok := d.GetOk("outbandwidth"); ok || d.HasChange("outbandwidth") {
		t, err := expandSystemInterfaceOutbandwidth(d, v, "outbandwidth")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["outbandwidth"] = t
		}
	}

	if v, ok := d.GetOk("padt_retry_timeout"); ok || d.HasChange("padt_retry_timeout") {
		t, err := expandSystemInterfacePadtRetryTimeout(d, v, "padt_retry_timeout")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["padt-retry-timeout"] = t
		}
	}

	if v, ok := d.GetOk("password"); ok || d.HasChange("password") {
		t, err := expandSystemInterfacePassword(d, v, "password")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["password"] = t
		}
	}

	if v, ok := d.GetOk("phy_mode"); ok || d.HasChange("phy_mode") {
		t, err := expandSystemInterfacePhyMode(d, v, "phy_mode")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["phy-mode"] = t
		}
	}

	if v, ok := d.GetOk("phy_setting"); ok || d.HasChange("phy_setting") {
		t, err := expandSystemInterfacePhySetting(d, v, "phy_setting")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["phy-setting"] = t
		}
	}

	if v, ok := d.GetOk("poe"); ok || d.HasChange("poe") {
		t, err := expandSystemInterfacePoe(d, v, "poe")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["poe"] = t
		}
	}

	if v, ok := d.GetOk("polling_interval"); ok || d.HasChange("polling_interval") {
		t, err := expandSystemInterfacePollingInterval(d, v, "polling_interval")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["polling-interval"] = t
		}
	}

	if v, ok := d.GetOk("port_mirroring"); ok || d.HasChange("port_mirroring") {
		t, err := expandSystemInterfacePortMirroring(d, v, "port_mirroring")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["port-mirroring"] = t
		}
	}

	if v, ok := d.GetOk("pppoe_egress_cos"); ok || d.HasChange("pppoe_egress_cos") {
		t, err := expandSystemInterfacePppoeEgressCos(d, v, "pppoe_egress_cos")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["pppoe-egress-cos"] = t
		}
	}

	if v, ok := d.GetOk("pppoe_unnumbered_negotiate"); ok || d.HasChange("pppoe_unnumbered_negotiate") {
		t, err := expandSystemInterfacePppoeUnnumberedNegotiate(d, v, "pppoe_unnumbered_negotiate")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["pppoe-unnumbered-negotiate"] = t
		}
	}

	if v, ok := d.GetOk("pptp_auth_type"); ok || d.HasChange("pptp_auth_type") {
		t, err := expandSystemInterfacePptpAuthType(d, v, "pptp_auth_type")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["pptp-auth-type"] = t
		}
	}

	if v, ok := d.GetOk("pptp_client"); ok || d.HasChange("pptp_client") {
		t, err := expandSystemInterfacePptpClient(d, v, "pptp_client")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["pptp-client"] = t
		}
	}

	if v, ok := d.GetOk("pptp_password"); ok || d.HasChange("pptp_password") {
		t, err := expandSystemInterfacePptpPassword(d, v, "pptp_password")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["pptp-password"] = t
		}
	}

	if v, ok := d.GetOk("pptp_server_ip"); ok || d.HasChange("pptp_server_ip") {
		t, err := expandSystemInterfacePptpServerIp(d, v, "pptp_server_ip")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["pptp-server-ip"] = t
		}
	}

	if v, ok := d.GetOk("pptp_timeout"); ok || d.HasChange("pptp_timeout") {
		t, err := expandSystemInterfacePptpTimeout(d, v, "pptp_timeout")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["pptp-timeout"] = t
		}
	}

	if v, ok := d.GetOk("pptp_user"); ok || d.HasChange("pptp_user") {
		t, err := expandSystemInterfacePptpUser(d, v, "pptp_user")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["pptp-user"] = t
		}
	}

	if v, ok := d.GetOk("preserve_session_route"); ok || d.HasChange("preserve_session_route") {
		t, err := expandSystemInterfacePreserveSessionRoute(d, v, "preserve_session_route")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["preserve-session-route"] = t
		}
	}

	if v, ok := d.GetOk("priority"); ok || d.HasChange("priority") {
		t, err := expandSystemInterfacePriority(d, v, "priority")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["priority"] = t
		}
	}

	if v, ok := d.GetOk("priority_override"); ok || d.HasChange("priority_override") {
		t, err := expandSystemInterfacePriorityOverride(d, v, "priority_override")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["priority-override"] = t
		}
	}

	if v, ok := d.GetOk("proxy_captive_portal"); ok || d.HasChange("proxy_captive_portal") {
		t, err := expandSystemInterfaceProxyCaptivePortal(d, v, "proxy_captive_portal")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["proxy-captive-portal"] = t
		}
	}

	if v, ok := d.GetOk("pvc_atm_qos"); ok || d.HasChange("pvc_atm_qos") {
		t, err := expandSystemInterfacePvcAtmQos(d, v, "pvc_atm_qos")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["pvc-atm-qos"] = t
		}
	}

	if v, ok := d.GetOk("pvc_chan"); ok || d.HasChange("pvc_chan") {
		t, err := expandSystemInterfacePvcChan(d, v, "pvc_chan")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["pvc-chan"] = t
		}
	}

	if v, ok := d.GetOk("pvc_crc"); ok || d.HasChange("pvc_crc") {
		t, err := expandSystemInterfacePvcCrc(d, v, "pvc_crc")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["pvc-crc"] = t
		}
	}

	if v, ok := d.GetOk("pvc_pcr"); ok || d.HasChange("pvc_pcr") {
		t, err := expandSystemInterfacePvcPcr(d, v, "pvc_pcr")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["pvc-pcr"] = t
		}
	}

	if v, ok := d.GetOk("pvc_scr"); ok || d.HasChange("pvc_scr") {
		t, err := expandSystemInterfacePvcScr(d, v, "pvc_scr")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["pvc-scr"] = t
		}
	}

	if v, ok := d.GetOk("pvc_vlan_id"); ok || d.HasChange("pvc_vlan_id") {
		t, err := expandSystemInterfacePvcVlanId(d, v, "pvc_vlan_id")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["pvc-vlan-id"] = t
		}
	}

	if v, ok := d.GetOk("pvc_vlan_rx_id"); ok || d.HasChange("pvc_vlan_rx_id") {
		t, err := expandSystemInterfacePvcVlanRxId(d, v, "pvc_vlan_rx_id")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["pvc-vlan-rx-id"] = t
		}
	}

	if v, ok := d.GetOk("pvc_vlan_rx_op"); ok || d.HasChange("pvc_vlan_rx_op") {
		t, err := expandSystemInterfacePvcVlanRxOp(d, v, "pvc_vlan_rx_op")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["pvc-vlan-rx-op"] = t
		}
	}

	if v, ok := d.GetOk("pvc_vlan_tx_id"); ok || d.HasChange("pvc_vlan_tx_id") {
		t, err := expandSystemInterfacePvcVlanTxId(d, v, "pvc_vlan_tx_id")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["pvc-vlan-tx-id"] = t
		}
	}

	if v, ok := d.GetOk("pvc_vlan_tx_op"); ok || d.HasChange("pvc_vlan_tx_op") {
		t, err := expandSystemInterfacePvcVlanTxOp(d, v, "pvc_vlan_tx_op")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["pvc-vlan-tx-op"] = t
		}
	}

	if v, ok := d.GetOk("reachable_time"); ok || d.HasChange("reachable_time") {
		t, err := expandSystemInterfaceReachableTime(d, v, "reachable_time")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["reachable-time"] = t
		}
	}

	if v, ok := d.GetOk("redundant_interface"); ok || d.HasChange("redundant_interface") {
		t, err := expandSystemInterfaceRedundantInterface(d, v, "redundant_interface")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["redundant-interface"] = t
		}
	}

	if v, ok := d.GetOk("remote_ip"); ok || d.HasChange("remote_ip") {
		t, err := expandSystemInterfaceRemoteIp(d, v, "remote_ip")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["remote-ip"] = t
		}
	}

	if v, ok := d.GetOk("replacemsg_override_group"); ok || d.HasChange("replacemsg_override_group") {
		t, err := expandSystemInterfaceReplacemsgOverrideGroup(d, v, "replacemsg_override_group")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["replacemsg-override-group"] = t
		}
	}

	if v, ok := d.GetOk("retransmission"); ok || d.HasChange("retransmission") {
		t, err := expandSystemInterfaceRetransmission(d, v, "retransmission")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["retransmission"] = t
		}
	}

	if v, ok := d.GetOk("ring_rx"); ok || d.HasChange("ring_rx") {
		t, err := expandSystemInterfaceRingRx(d, v, "ring_rx")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ring-rx"] = t
		}
	}

	if v, ok := d.GetOk("ring_tx"); ok || d.HasChange("ring_tx") {
		t, err := expandSystemInterfaceRingTx(d, v, "ring_tx")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["ring-tx"] = t
		}
	}

	if v, ok := d.GetOk("role"); ok || d.HasChange("role") {
		t, err := expandSystemInterfaceRole(d, v, "role")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["role"] = t
		}
	}

	if v, ok := d.GetOk("sample_direction"); ok || d.HasChange("sample_direction") {
		t, err := expandSystemInterfaceSampleDirection(d, v, "sample_direction")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["sample-direction"] = t
		}
	}

	if v, ok := d.GetOk("sample_rate"); ok || d.HasChange("sample_rate") {
		t, err := expandSystemInterfaceSampleRate(d, v, "sample_rate")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["sample-rate"] = t
		}
	}

	if v, ok := d.GetOk("secondary_ip"); ok || d.HasChange("secondary_ip") {
		t, err := expandSystemInterfaceSecondaryIp(d, v, "secondary_ip")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["secondary-IP"] = t
		}
	}

	if v, ok := d.GetOk("secondaryip"); ok || d.HasChange("secondaryip") {
		t, err := expandSystemInterfaceSecondaryip(d, v, "secondaryip")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["secondaryip"] = t
		}
	}

	if v, ok := d.GetOk("security_8021x_dynamic_vlan_id"); ok || d.HasChange("security_8021x_dynamic_vlan_id") {
		t, err := expandSystemInterfaceSecurity8021XDynamicVlanId(d, v, "security_8021x_dynamic_vlan_id")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["security-8021x-dynamic-vlan-id"] = t
		}
	}

	if v, ok := d.GetOk("security_8021x_master"); ok || d.HasChange("security_8021x_master") {
		t, err := expandSystemInterfaceSecurity8021XMaster(d, v, "security_8021x_master")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["security-8021x-master"] = t
		}
	}

	if v, ok := d.GetOk("security_8021x_member_mode"); ok || d.HasChange("security_8021x_member_mode") {
		t, err := expandSystemInterfaceSecurity8021XMemberMode(d, v, "security_8021x_member_mode")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["security-8021x-member-mode"] = t
		}
	}

	if v, ok := d.GetOk("security_8021x_mode"); ok || d.HasChange("security_8021x_mode") {
		t, err := expandSystemInterfaceSecurity8021XMode(d, v, "security_8021x_mode")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["security-8021x-mode"] = t
		}
	}

	if v, ok := d.GetOk("security_exempt_list"); ok || d.HasChange("security_exempt_list") {
		t, err := expandSystemInterfaceSecurityExemptList(d, v, "security_exempt_list")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["security-exempt-list"] = t
		}
	}

	if v, ok := d.GetOk("security_external_logout"); ok || d.HasChange("security_external_logout") {
		t, err := expandSystemInterfaceSecurityExternalLogout(d, v, "security_external_logout")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["security-external-logout"] = t
		}
	}

	if v, ok := d.GetOk("security_external_web"); ok || d.HasChange("security_external_web") {
		t, err := expandSystemInterfaceSecurityExternalWeb(d, v, "security_external_web")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["security-external-web"] = t
		}
	}

	if v, ok := d.GetOk("security_groups"); ok || d.HasChange("security_groups") {
		t, err := expandSystemInterfaceSecurityGroups(d, v, "security_groups")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["security-groups"] = t
		}
	}

	if v, ok := d.GetOk("security_ip_auth_bypass"); ok || d.HasChange("security_ip_auth_bypass") {
		t, err := expandSystemInterfaceSecurityIpAuthBypass(d, v, "security_ip_auth_bypass")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["security-ip-auth-bypass"] = t
		}
	}

	if v, ok := d.GetOk("security_mac_auth_bypass"); ok || d.HasChange("security_mac_auth_bypass") {
		t, err := expandSystemInterfaceSecurityMacAuthBypass(d, v, "security_mac_auth_bypass")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["security-mac-auth-bypass"] = t
		}
	}

	if v, ok := d.GetOk("security_mode"); ok || d.HasChange("security_mode") {
		t, err := expandSystemInterfaceSecurityMode(d, v, "security_mode")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["security-mode"] = t
		}
	}

	if v, ok := d.GetOk("security_redirect_url"); ok || d.HasChange("security_redirect_url") {
		t, err := expandSystemInterfaceSecurityRedirectUrl(d, v, "security_redirect_url")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["security-redirect-url"] = t
		}
	}

	if v, ok := d.GetOk("select_profile_30a_35b"); ok || d.HasChange("select_profile_30a_35b") {
		t, err := expandSystemInterfaceSelectProfile30A35B(d, v, "select_profile_30a_35b")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["select-profile-30a-35b"] = t
		}
	}

	if v, ok := d.GetOk("service_name"); ok || d.HasChange("service_name") {
		t, err := expandSystemInterfaceServiceName(d, v, "service_name")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["service-name"] = t
		}
	}

	if v, ok := d.GetOk("sflow_sampler"); ok || d.HasChange("sflow_sampler") {
		t, err := expandSystemInterfaceSflowSampler(d, v, "sflow_sampler")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["sflow-sampler"] = t
		}
	}

	if v, ok := d.GetOk("sfp_dsl"); ok || d.HasChange("sfp_dsl") {
		t, err := expandSystemInterfaceSfpDsl(d, v, "sfp_dsl")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["sfp-dsl"] = t
		}
	}

	if v, ok := d.GetOk("sfp_dsl_adsl_fallback"); ok || d.HasChange("sfp_dsl_adsl_fallback") {
		t, err := expandSystemInterfaceSfpDslAdslFallback(d, v, "sfp_dsl_adsl_fallback")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["sfp-dsl-adsl-fallback"] = t
		}
	}

	if v, ok := d.GetOk("sfp_dsl_autodetect"); ok || d.HasChange("sfp_dsl_autodetect") {
		t, err := expandSystemInterfaceSfpDslAutodetect(d, v, "sfp_dsl_autodetect")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["sfp-dsl-autodetect"] = t
		}
	}

	if v, ok := d.GetOk("sfp_dsl_mac"); ok || d.HasChange("sfp_dsl_mac") {
		t, err := expandSystemInterfaceSfpDslMac(d, v, "sfp_dsl_mac")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["sfp-dsl-mac"] = t
		}
	}

	if v, ok := d.GetOk("snmp_index"); ok || d.HasChange("snmp_index") {
		t, err := expandSystemInterfaceSnmpIndex(d, v, "snmp_index")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["snmp-index"] = t
		}
	}

	if v, ok := d.GetOk("speed"); ok || d.HasChange("speed") {
		t, err := expandSystemInterfaceSpeed(d, v, "speed")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["speed"] = t
		}
	}

	if v, ok := d.GetOk("spillover_threshold"); ok || d.HasChange("spillover_threshold") {
		t, err := expandSystemInterfaceSpilloverThreshold(d, v, "spillover_threshold")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["spillover-threshold"] = t
		}
	}

	if v, ok := d.GetOk("src_check"); ok || d.HasChange("src_check") {
		t, err := expandSystemInterfaceSrcCheck(d, v, "src_check")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["src-check"] = t
		}
	}

	if v, ok := d.GetOk("status"); ok || d.HasChange("status") {
		t, err := expandSystemInterfaceStatus(d, v, "status")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["status"] = t
		}
	}

	if v, ok := d.GetOk("stp"); ok || d.HasChange("stp") {
		t, err := expandSystemInterfaceStp(d, v, "stp")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["stp"] = t
		}
	}

	if v, ok := d.GetOk("stp_ha_slave"); ok || d.HasChange("stp_ha_slave") {
		t, err := expandSystemInterfaceStpHaSlave(d, v, "stp_ha_slave")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["stp-ha-slave"] = t
		}
	}

	if v, ok := d.GetOk("stp_edge"); ok || d.HasChange("stp_edge") {
		t, err := expandSystemInterfaceStpEdge(d, v, "stp_edge")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["stp-edge"] = t
		}
	}

	if v, ok := d.GetOk("stp_ha_secondary"); ok || d.HasChange("stp_ha_secondary") {
		t, err := expandSystemInterfaceStpHaSecondary(d, v, "stp_ha_secondary")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["stp-ha-secondary"] = t
		}
	}

	if v, ok := d.GetOk("stpforward"); ok || d.HasChange("stpforward") {
		t, err := expandSystemInterfaceStpforward(d, v, "stpforward")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["stpforward"] = t
		}
	}

	if v, ok := d.GetOk("stpforward_mode"); ok || d.HasChange("stpforward_mode") {
		t, err := expandSystemInterfaceStpforwardMode(d, v, "stpforward_mode")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["stpforward-mode"] = t
		}
	}

	if v, ok := d.GetOk("subst"); ok || d.HasChange("subst") {
		t, err := expandSystemInterfaceSubst(d, v, "subst")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["subst"] = t
		}
	}

	if v, ok := d.GetOk("substitute_dst_mac"); ok || d.HasChange("substitute_dst_mac") {
		t, err := expandSystemInterfaceSubstituteDstMac(d, v, "substitute_dst_mac")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["substitute-dst-mac"] = t
		}
	}

	if v, ok := d.GetOk("sw_algorithm"); ok || d.HasChange("sw_algorithm") {
		t, err := expandSystemInterfaceSwAlgorithm(d, v, "sw_algorithm")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["sw-algorithm"] = t
		}
	}

	if v, ok := d.GetOk("swc_first_create"); ok || d.HasChange("swc_first_create") {
		t, err := expandSystemInterfaceSwcFirstCreate(d, v, "swc_first_create")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["swc-first-create"] = t
		}
	}

	if v, ok := d.GetOk("swc_vlan"); ok || d.HasChange("swc_vlan") {
		t, err := expandSystemInterfaceSwcVlan(d, v, "swc_vlan")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["swc-vlan"] = t
		}
	}

	if v, ok := d.GetOk("switch"); ok || d.HasChange("switch") {
		t, err := expandSystemInterfaceSwitch(d, v, "switch")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_access_vlan"); ok || d.HasChange("switch_controller_access_vlan") {
		t, err := expandSystemInterfaceSwitchControllerAccessVlan(d, v, "switch_controller_access_vlan")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-access-vlan"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_arp_inspection"); ok || d.HasChange("switch_controller_arp_inspection") {
		t, err := expandSystemInterfaceSwitchControllerArpInspection(d, v, "switch_controller_arp_inspection")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-arp-inspection"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_dhcp_snooping"); ok || d.HasChange("switch_controller_dhcp_snooping") {
		t, err := expandSystemInterfaceSwitchControllerDhcpSnooping(d, v, "switch_controller_dhcp_snooping")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-dhcp-snooping"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_dhcp_snooping_option82"); ok || d.HasChange("switch_controller_dhcp_snooping_option82") {
		t, err := expandSystemInterfaceSwitchControllerDhcpSnoopingOption82(d, v, "switch_controller_dhcp_snooping_option82")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-dhcp-snooping-option82"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_dhcp_snooping_verify_mac"); ok || d.HasChange("switch_controller_dhcp_snooping_verify_mac") {
		t, err := expandSystemInterfaceSwitchControllerDhcpSnoopingVerifyMac(d, v, "switch_controller_dhcp_snooping_verify_mac")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-dhcp-snooping-verify-mac"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_dynamic"); ok || d.HasChange("switch_controller_dynamic") {
		t, err := expandSystemInterfaceSwitchControllerDynamic(d, v, "switch_controller_dynamic")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-dynamic"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_feature"); ok || d.HasChange("switch_controller_feature") {
		t, err := expandSystemInterfaceSwitchControllerFeature(d, v, "switch_controller_feature")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-feature"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_igmp_snooping"); ok || d.HasChange("switch_controller_igmp_snooping") {
		t, err := expandSystemInterfaceSwitchControllerIgmpSnooping(d, v, "switch_controller_igmp_snooping")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-igmp-snooping"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_igmp_snooping_fast_leave"); ok || d.HasChange("switch_controller_igmp_snooping_fast_leave") {
		t, err := expandSystemInterfaceSwitchControllerIgmpSnoopingFastLeave(d, v, "switch_controller_igmp_snooping_fast_leave")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-igmp-snooping-fast-leave"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_igmp_snooping_proxy"); ok || d.HasChange("switch_controller_igmp_snooping_proxy") {
		t, err := expandSystemInterfaceSwitchControllerIgmpSnoopingProxy(d, v, "switch_controller_igmp_snooping_proxy")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-igmp-snooping-proxy"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_iot_scanning"); ok || d.HasChange("switch_controller_iot_scanning") {
		t, err := expandSystemInterfaceSwitchControllerIotScanning(d, v, "switch_controller_iot_scanning")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-iot-scanning"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_learning_limit"); ok || d.HasChange("switch_controller_learning_limit") {
		t, err := expandSystemInterfaceSwitchControllerLearningLimit(d, v, "switch_controller_learning_limit")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-learning-limit"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_mgmt_vlan"); ok || d.HasChange("switch_controller_mgmt_vlan") {
		t, err := expandSystemInterfaceSwitchControllerMgmtVlan(d, v, "switch_controller_mgmt_vlan")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-mgmt-vlan"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_nac"); ok || d.HasChange("switch_controller_nac") {
		t, err := expandSystemInterfaceSwitchControllerNac(d, v, "switch_controller_nac")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-nac"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_netflow_collect"); ok || d.HasChange("switch_controller_netflow_collect") {
		t, err := expandSystemInterfaceSwitchControllerNetflowCollect(d, v, "switch_controller_netflow_collect")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-netflow-collect"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_offload"); ok || d.HasChange("switch_controller_offload") {
		t, err := expandSystemInterfaceSwitchControllerOffload(d, v, "switch_controller_offload")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-offload"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_offload_gw"); ok || d.HasChange("switch_controller_offload_gw") {
		t, err := expandSystemInterfaceSwitchControllerOffloadGw(d, v, "switch_controller_offload_gw")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-offload-gw"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_offload_ip"); ok || d.HasChange("switch_controller_offload_ip") {
		t, err := expandSystemInterfaceSwitchControllerOffloadIp(d, v, "switch_controller_offload_ip")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-offload-ip"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_rspan_mode"); ok || d.HasChange("switch_controller_rspan_mode") {
		t, err := expandSystemInterfaceSwitchControllerRspanMode(d, v, "switch_controller_rspan_mode")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-rspan-mode"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_source_ip"); ok || d.HasChange("switch_controller_source_ip") {
		t, err := expandSystemInterfaceSwitchControllerSourceIp(d, v, "switch_controller_source_ip")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-source-ip"] = t
		}
	}

	if v, ok := d.GetOk("switch_controller_traffic_policy"); ok || d.HasChange("switch_controller_traffic_policy") {
		t, err := expandSystemInterfaceSwitchControllerTrafficPolicy(d, v, "switch_controller_traffic_policy")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["switch-controller-traffic-policy"] = t
		}
	}

	if v, ok := d.GetOk("system_id"); ok || d.HasChange("system_id") {
		t, err := expandSystemInterfaceSystemId(d, v, "system_id")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["system-id"] = t
		}
	}

	if v, ok := d.GetOk("system_id_type"); ok || d.HasChange("system_id_type") {
		t, err := expandSystemInterfaceSystemIdType(d, v, "system_id_type")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["system-id-type"] = t
		}
	}

	if v, ok := d.GetOk("tagging"); ok || d.HasChange("tagging") {
		t, err := expandSystemInterfaceTagging(d, v, "tagging")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["tagging"] = t
		}
	}

	if v, ok := d.GetOk("tc_mode"); ok || d.HasChange("tc_mode") {
		t, err := expandSystemInterfaceTcMode(d, v, "tc_mode")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["tc-mode"] = t
		}
	}

	if v, ok := d.GetOk("tcp_mss"); ok || d.HasChange("tcp_mss") {
		t, err := expandSystemInterfaceTcpMss(d, v, "tcp_mss")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["tcp-mss"] = t
		}
	}

	if v, ok := d.GetOk("trunk"); ok || d.HasChange("trunk") {
		t, err := expandSystemInterfaceTrunk(d, v, "trunk")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["trunk"] = t
		}
	}

	if v, ok := d.GetOk("trust_ip_1"); ok || d.HasChange("trust_ip_1") {
		t, err := expandSystemInterfaceTrustIp1(d, v, "trust_ip_1")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["trust-ip-1"] = t
		}
	}

	if v, ok := d.GetOk("trust_ip_2"); ok || d.HasChange("trust_ip_2") {
		t, err := expandSystemInterfaceTrustIp2(d, v, "trust_ip_2")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["trust-ip-2"] = t
		}
	}

	if v, ok := d.GetOk("trust_ip_3"); ok || d.HasChange("trust_ip_3") {
		t, err := expandSystemInterfaceTrustIp3(d, v, "trust_ip_3")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["trust-ip-3"] = t
		}
	}

	if v, ok := d.GetOk("trust_ip6_1"); ok || d.HasChange("trust_ip6_1") {
		t, err := expandSystemInterfaceTrustIp61(d, v, "trust_ip6_1")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["trust-ip6-1"] = t
		}
	}

	if v, ok := d.GetOk("trust_ip6_2"); ok || d.HasChange("trust_ip6_2") {
		t, err := expandSystemInterfaceTrustIp62(d, v, "trust_ip6_2")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["trust-ip6-2"] = t
		}
	}

	if v, ok := d.GetOk("trust_ip6_3"); ok || d.HasChange("trust_ip6_3") {
		t, err := expandSystemInterfaceTrustIp63(d, v, "trust_ip6_3")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["trust-ip6-3"] = t
		}
	}

	if v, ok := d.GetOk("type"); ok || d.HasChange("type") {
		t, err := expandSystemInterfaceType(d, v, "type")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["type"] = t
		}
	}

	if v, ok := d.GetOk("username"); ok || d.HasChange("username") {
		t, err := expandSystemInterfaceUsername(d, v, "username")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["username"] = t
		}
	}

	if v, ok := d.GetOk("vci"); ok || d.HasChange("vci") {
		t, err := expandSystemInterfaceVci(d, v, "vci")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vci"] = t
		}
	}

	if v, ok := d.GetOk("vdom"); ok || d.HasChange("vdom") {
		t, err := expandSystemInterfaceVdom(d, v, "vdom")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vdom"] = t
		}
	}

	if v, ok := d.GetOk("vectoring"); ok || d.HasChange("vectoring") {
		t, err := expandSystemInterfaceVectoring(d, v, "vectoring")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vectoring"] = t
		}
	}

	if v, ok := d.GetOk("vindex"); ok || d.HasChange("vindex") {
		t, err := expandSystemInterfaceVindex(d, v, "vindex")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vindex"] = t
		}
	}

	if v, ok := d.GetOk("virtual_mac"); ok || d.HasChange("virtual_mac") {
		t, err := expandSystemInterfaceVirtualMac(d, v, "virtual_mac")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["virtual-mac"] = t
		}
	}

	if v, ok := d.GetOk("vlan_id"); ok || d.HasChange("vlan_id") {
		t, err := expandSystemInterfaceVlanId(d, v, "vlan_id")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vlan-id"] = t
		}
	}

	if v, ok := d.GetOk("vlan_op_mode"); ok || d.HasChange("vlan_op_mode") {
		t, err := expandSystemInterfaceVlanOpMode(d, v, "vlan_op_mode")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vlan-op-mode"] = t
		}
	}

	if v, ok := d.GetOk("vlan_protocol"); ok || d.HasChange("vlan_protocol") {
		t, err := expandSystemInterfaceVlanProtocol(d, v, "vlan_protocol")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vlan-protocol"] = t
		}
	}

	if v, ok := d.GetOk("vlanforward"); ok || d.HasChange("vlanforward") {
		t, err := expandSystemInterfaceVlanforward(d, v, "vlanforward")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vlanforward"] = t
		}
	}

	if v, ok := d.GetOk("vlanid"); ok || d.HasChange("vlanid") {
		t, err := expandSystemInterfaceVlanid(d, v, "vlanid")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vlanid"] = t
		}
	}

	if v, ok := d.GetOk("vpi"); ok || d.HasChange("vpi") {
		t, err := expandSystemInterfaceVpi(d, v, "vpi")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vpi"] = t
		}
	}

	if v, ok := d.GetOk("vrf"); ok || d.HasChange("vrf") {
		t, err := expandSystemInterfaceVrf(d, v, "vrf")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vrf"] = t
		}
	}

	if v, ok := d.GetOk("vrrp"); ok || d.HasChange("vrrp") {
		t, err := expandSystemInterfaceVrrp(d, v, "vrrp")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vrrp"] = t
		}
	}

	if v, ok := d.GetOk("vrrp_virtual_mac"); ok || d.HasChange("vrrp_virtual_mac") {
		t, err := expandSystemInterfaceVrrpVirtualMac(d, v, "vrrp_virtual_mac")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["vrrp-virtual-mac"] = t
		}
	}

	if v, ok := d.GetOk("wccp"); ok || d.HasChange("wccp") {
		t, err := expandSystemInterfaceWccp(d, v, "wccp")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wccp"] = t
		}
	}

	if v, ok := d.GetOk("weight"); ok || d.HasChange("weight") {
		t, err := expandSystemInterfaceWeight(d, v, "weight")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["weight"] = t
		}
	}

	if v, ok := d.GetOk("wifi_5g_threshold"); ok || d.HasChange("wifi_5g_threshold") {
		t, err := expandSystemInterfaceWifi5GThreshold(d, v, "wifi_5g_threshold")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-5g-threshold"] = t
		}
	}

	if v, ok := d.GetOk("wifi_acl"); ok || d.HasChange("wifi_acl") {
		t, err := expandSystemInterfaceWifiAcl(d, v, "wifi_acl")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-acl"] = t
		}
	}

	if v, ok := d.GetOk("wifi_ap_band"); ok || d.HasChange("wifi_ap_band") {
		t, err := expandSystemInterfaceWifiApBand(d, v, "wifi_ap_band")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-ap-band"] = t
		}
	}

	if v, ok := d.GetOk("wifi_auth"); ok || d.HasChange("wifi_auth") {
		t, err := expandSystemInterfaceWifiAuth(d, v, "wifi_auth")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-auth"] = t
		}
	}

	if v, ok := d.GetOk("wifi_auto_connect"); ok || d.HasChange("wifi_auto_connect") {
		t, err := expandSystemInterfaceWifiAutoConnect(d, v, "wifi_auto_connect")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-auto-connect"] = t
		}
	}

	if v, ok := d.GetOk("wifi_auto_save"); ok || d.HasChange("wifi_auto_save") {
		t, err := expandSystemInterfaceWifiAutoSave(d, v, "wifi_auto_save")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-auto-save"] = t
		}
	}

	if v, ok := d.GetOk("wifi_broadcast_ssid"); ok || d.HasChange("wifi_broadcast_ssid") {
		t, err := expandSystemInterfaceWifiBroadcastSsid(d, v, "wifi_broadcast_ssid")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-broadcast-ssid"] = t
		}
	}

	if v, ok := d.GetOk("wifi_dns_server1"); ok || d.HasChange("wifi_dns_server1") {
		t, err := expandSystemInterfaceWifiDnsServer1(d, v, "wifi_dns_server1")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-dns-server1"] = t
		}
	}

	if v, ok := d.GetOk("wifi_dns_server2"); ok || d.HasChange("wifi_dns_server2") {
		t, err := expandSystemInterfaceWifiDnsServer2(d, v, "wifi_dns_server2")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-dns-server2"] = t
		}
	}

	if v, ok := d.GetOk("wifi_encrypt"); ok || d.HasChange("wifi_encrypt") {
		t, err := expandSystemInterfaceWifiEncrypt(d, v, "wifi_encrypt")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-encrypt"] = t
		}
	}

	if v, ok := d.GetOk("wifi_fragment_threshold"); ok || d.HasChange("wifi_fragment_threshold") {
		t, err := expandSystemInterfaceWifiFragmentThreshold(d, v, "wifi_fragment_threshold")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-fragment-threshold"] = t
		}
	}

	if v, ok := d.GetOk("wifi_gateway"); ok || d.HasChange("wifi_gateway") {
		t, err := expandSystemInterfaceWifiGateway(d, v, "wifi_gateway")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-gateway"] = t
		}
	}

	if v, ok := d.GetOk("wifi_key"); ok || d.HasChange("wifi_key") {
		t, err := expandSystemInterfaceWifiKey(d, v, "wifi_key")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-key"] = t
		}
	}

	if v, ok := d.GetOk("wifi_keyindex"); ok || d.HasChange("wifi_keyindex") {
		t, err := expandSystemInterfaceWifiKeyindex(d, v, "wifi_keyindex")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-keyindex"] = t
		}
	}

	if v, ok := d.GetOk("wifi_mac_filter"); ok || d.HasChange("wifi_mac_filter") {
		t, err := expandSystemInterfaceWifiMacFilter(d, v, "wifi_mac_filter")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-mac-filter"] = t
		}
	}

	if v, ok := d.GetOk("wifi_networks"); ok || d.HasChange("wifi_networks") {
		t, err := expandSystemInterfaceWifiNetworks(d, v, "wifi_networks")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-networks"] = t
		}
	}

	if v, ok := d.GetOk("wifi_passphrase"); ok || d.HasChange("wifi_passphrase") {
		t, err := expandSystemInterfaceWifiPassphrase(d, v, "wifi_passphrase")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-passphrase"] = t
		}
	}

	if v, ok := d.GetOk("wifi_radius_server"); ok || d.HasChange("wifi_radius_server") {
		t, err := expandSystemInterfaceWifiRadiusServer(d, v, "wifi_radius_server")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-radius-server"] = t
		}
	}

	if v, ok := d.GetOk("wifi_rts_threshold"); ok || d.HasChange("wifi_rts_threshold") {
		t, err := expandSystemInterfaceWifiRtsThreshold(d, v, "wifi_rts_threshold")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-rts-threshold"] = t
		}
	}

	if v, ok := d.GetOk("wifi_security"); ok || d.HasChange("wifi_security") {
		t, err := expandSystemInterfaceWifiSecurity(d, v, "wifi_security")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-security"] = t
		}
	}

	if v, ok := d.GetOk("wifi_ssid"); ok || d.HasChange("wifi_ssid") {
		t, err := expandSystemInterfaceWifiSsid(d, v, "wifi_ssid")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-ssid"] = t
		}
	}

	if v, ok := d.GetOk("wifi_usergroup"); ok || d.HasChange("wifi_usergroup") {
		t, err := expandSystemInterfaceWifiUsergroup(d, v, "wifi_usergroup")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wifi-usergroup"] = t
		}
	}

	if v, ok := d.GetOk("wins_ip"); ok || d.HasChange("wins_ip") {
		t, err := expandSystemInterfaceWinsIp(d, v, "wins_ip")
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj["wins-ip"] = t
		}
	}

	return &obj, nil
}
